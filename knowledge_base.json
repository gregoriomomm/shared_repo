{
  "programs": {
    "LGSTSQ": {
      "name": "LGSTSQ",
      "calls": [],
      "called_by": [
        "LGAPDB01",
        "LGACDB02",
        "LGUPOL01",
        "LGICDB01",
        "LGAPVS01",
        "LGUPDB01",
        "LGAPBR01",
        "LGIPOL01",
        "LGACDB01",
        "LGUPVS01",
        "LGACUS01",
        "LGDPVS01",
        "OLDACDB2",
        "OLDACDB1",
        "LGICUS01",
        "LGACVS01",
        "LGUCDB01",
        "LGUCVS01",
        "LGUCUS01",
        "LGIPDB01",
        "LGAPOL01",
        "LGDPOL01",
        "LGDPDB01"
      ],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [],
      "data_structures": {},
      "community": "Community 5",
      "program_language": "COBOL",
      "understanding": {
        "comments": "Utility program for diagnostic and error message logging in CICS environment",
        "title": "Dual-Channel Message Logging Utility",
        "purpose": {
          "business_goal": [
            "Provide centralized logging for application diagnostics and error tracking",
            "Support custom queue targeting for specialized message handling"
          ],
          "implementation": "Receives messages from either calling programs or terminal input and writes them to both transient data queue (CSMT) and temporary storage queue (GENAERRS or custom)"
        },
        "program_type": {
          "category": "technical",
          "function": "Logging and diagnostics"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Queue Writing Services",
                "description": "Handles writing messages to CICS queues",
                "shortName": "QueueWriter",
                "codeBlocks": "WRITEQ TD, WRITEQ TS operations"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "EXEC CICS WRITEQ TD QUEUE(STDQ-NAME) FROM(WRITE-MSG) RESP(WS-RESP) LENGTH(WS-RECV-LEN) END-EXEC.",
              "EXEC CICS WRITEQ TS QUEUE(STSQ-NAME) FROM(WRITE-MSG) RESP(WS-RESP) NOSUSPEND LENGTH(WS-RECV-LEN) END-EXEC."
            ],
            "architectural_layer_semantic_keywords": [
              "writeq",
              "queue",
              "data",
              "storage"
            ]
          },
          {
            "traditionalLayer": "User Interface",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Interface"
              }
            ],
            "modernLayer": "Presentation",
            "classifications": [
              "Terminal Applications"
            ],
            "elements": [
              {
                "name": "Terminal I/O Handler",
                "description": "Manages terminal input and output",
                "shortName": "TermIO",
                "codeBlocks": "RECEIVE, SEND operations"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "EXEC CICS RECEIVE INTO(WS-RECV) LENGTH(WS-RECV-LEN) RESP(WS-RESP) END-EXEC",
              "EXEC CICS SEND TEXT FROM(FILLER-X) WAIT ERASE LENGTH(1) FREEKB END-EXEC."
            ],
            "architectural_layer_semantic_keywords": [
              "receive",
              "send",
              "terminal",
              "display"
            ]
          },
          {
            "traditionalLayer": "Platform",
            "togaf": [
              {
                "architecture": "Technology Architecture",
                "layer": "Technology Components"
              }
            ],
            "modernLayer": "Infrastructure",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "CICS Environment Interface",
                "description": "Interacts with CICS system environment",
                "shortName": "CICSEnv",
                "codeBlocks": "ASSIGN, RETURN operations"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "EXEC CICS ASSIGN SYSID(WRITE-MSG-SYSID) RESP(WS-RESP) END-EXEC.",
              "EXEC CICS ASSIGN STARTCODE(WS-STARTCODE) RESP(WS-RESP) END-EXEC.",
              "EXEC CICS ASSIGN PRINSYSID(WS-PRINSYSID) RESP(WS-RESP) END-EXEC.",
              "EXEC CICS ASSIGN INVOKINGPROG(WS-INVOKEPROG) RESP(WS-RESP) END-EXEC.",
              "EXEC CICS RETURN END-EXEC."
            ],
            "architectural_layer_semantic_keywords": [
              "assign",
              "return",
              "system",
              "environment"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Log Message",
            "sources": [
              {
                "type": "queue",
                "source_name": "CSMT",
                "reference": "Transient Data Queue"
              },
              {
                "type": "queue",
                "source_name": "GENAERRS",
                "reference": "Temporary Storage Queue"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "System ID",
              "Message Text"
            ],
            "business_context": "Provides diagnostic and error information for application monitoring and troubleshooting"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "WRITE-MSG-SYSID",
            "semantic_type": "SYSTEM_IDENTIFIER",
            "source": "CICS ASSIGN command retrieves system identifier",
            "related_entities": [
              "Log Message"
            ],
            "confidence": "high"
          },
          {
            "parameter": "WRITE-MSG-MSG",
            "semantic_type": "MESSAGE_TEXT",
            "source": "Used to store message content from either COMMAREA or terminal input",
            "related_entities": [
              "Log Message"
            ],
            "confidence": "high"
          },
          {
            "parameter": "STSQ-NAME",
            "semantic_type": "QUEUE_IDENTIFIER",
            "source": "Used as identifier for temporary storage queue",
            "related_entities": [
              "Log Message"
            ],
            "confidence": "high"
          },
          {
            "parameter": "STDQ-NAME",
            "semantic_type": "QUEUE_IDENTIFIER",
            "source": "Used as identifier for transient data queue",
            "related_entities": [
              "Log Message"
            ],
            "confidence": "high"
          },
          {
            "parameter": "WS-FLAG",
            "semantic_type": "PROCESSING_MODE_INDICATOR",
            "source": "Indicates whether program was called ('C') or received terminal input ('R')",
            "related_entities": [
              "Log Message"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Messages can be received from either program calls or terminal input",
            "implementation": "Program checks WS-INVOKEPROG to determine if called by another program; if so, gets message from COMMAREA, otherwise receives from terminal"
          },
          {
            "rule": "Messages are always written to both transient data and temporary storage queues",
            "implementation": "Program executes both WRITEQ TD and WRITEQ TS commands for each message"
          },
          {
            "rule": "Messages can specify a custom queue name using 'Q=' prefix",
            "implementation": "If message starts with 'Q=', program extracts the queue name and modifies the message content accordingly"
          },
          {
            "rule": "Terminal users receive visual confirmation after message logging",
            "implementation": "For terminal-initiated requests, program sends a response to clear the screen"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "messaging",
              "target": "CICS Transient Data Queue",
              "data": "Log Message"
            },
            {
              "type": "messaging",
              "target": "CICS Temporary Storage Queue",
              "data": "Log Message"
            }
          ],
          "data_sources": [
            "COMMAREA from calling program",
            "Terminal input"
          ],
          "data_destinations": [
            "Transient Data Queue (CSMT)",
            "Temporary Storage Queue (GENAERRS or custom)"
          ]
        },
        "features": [
          {
            "feature": "Dual-channel message logging",
            "rules": [
              {
                "rule": "Write messages to both TD and TS queues",
                "scenario": "Application needs to log diagnostic information",
                "steps": [
                  {
                    "step": "Write message to transient data queue",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "CSMT",
                        "object_type": "queue",
                        "when": "Always"
                      }
                    ],
                    "when": "After message is formatted",
                    "exceptions": "CICS response code in WS-RESP"
                  },
                  {
                    "step": "Write message to temporary storage queue",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "GENAERRS or custom queue",
                        "object_type": "queue",
                        "when": "Always"
                      }
                    ],
                    "when": "After writing to transient data queue",
                    "exceptions": "CICS response code in WS-RESP, NOSUSPEND option prevents abend if queue full"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Custom queue targeting",
            "rules": [
              {
                "rule": "Allow messages to specify target queue",
                "scenario": "Application needs to log to a specific queue",
                "steps": [
                  {
                    "step": "Check for queue specification",
                    "external": false,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "WRITE-MSG-MSG",
                        "object_type": "variable",
                        "when": "Message starts with 'Q='"
                      }
                    ],
                    "when": "After receiving message",
                    "exceptions": "None"
                  },
                  {
                    "step": "Extract queue name and reformat message",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "STSQ-EXT",
                        "object_type": "variable",
                        "when": "Message starts with 'Q='"
                      },
                      {
                        "name": "WRITE-MSG-MSG",
                        "object_type": "variable",
                        "when": "Message starts with 'Q='"
                      }
                    ],
                    "when": "Message contains queue specification",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "CSMT": "Standard CICS message log queue",
          "GENAERRS": "Application error message repository",
          "Transient Data Queue": "CICS facility for sequential message logging",
          "Temporary Storage Queue": "CICS facility for non-sequential data storage"
        },
        "program_context": {
          "program_name": "LGSTSQ",
          "includes": [],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 98.5,
            "CICS": 1.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.95,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Imperative"
          ],
          "language_version_hints": [
            "COBOL 85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "PROCEDURE DIVISION",
            "EXEC CICS commands",
            "Hierarchical data structures",
            "Picture clauses (PIC)",
            "Computational fields (COMP)",
            "Mainframe transaction processing",
            "Fixed-format source code",
            "Explicit length and type declarations"
          ]
        }
      }
    },
    "LGSETUP": {
      "name": "LGSETUP",
      "calls": [],
      "called_by": [],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [],
      "data_structures": {},
      "community": "Community 13",
      "program_language": "COBOL",
      "understanding": {
        "comments": "GENAPP system initialization program that establishes customer number ranges and transaction tracking counters",
        "title": "GENAPP System Initialization and Customer Range Setup",
        "purpose": {
          "business_goal": [
            "Initialize the GENAPP system counters and control parameters",
            "Set up customer number ranges"
          ],
          "implementation": "The program deletes and recreates various CICS temporary storage queues and counters in the GENA pool, setting initial values for customer number ranges and transaction tracking"
        },
        "program_type": {
          "category": "technical",
          "function": "System initialization"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Counter Management",
                "description": "Manages CICS counters in the GENA pool for tracking system usage",
                "shortName": "CounterMgmt",
                "codeBlocks": "Counter initialization section (lines 250-550)"
              },
              {
                "name": "Temporary Storage Queue Management",
                "description": "Manages CICS temporary storage queues for system control",
                "shortName": "TSQMgmt",
                "codeBlocks": "Temporary storage queue setup (lines 210-240)"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "85%",
            "evidence": [
              "EXEC CICS DeleteQ TS Queue(STSQ-ERRS)",
              "EXEC CICS DeleteQ TS Queue(STSQ-STRT)",
              "EXEC CICS DeleteQ TS Queue(STSQ-STAT)",
              "EXEC CICS DeleteQ TS Queue(STSQ-NAME)",
              "EXEC CICS WRITEQ TS QUEUE(STSQ-NAME)",
              "EXEC CICS Delete Counter(GENAcount)",
              "EXEC CICS Define Counter(GENAcount)"
            ],
            "architectural_layer_semantic_keywords": [
              "delete",
              "define",
              "counter",
              "queue",
              "pool",
              "storage"
            ]
          },
          {
            "traditionalLayer": "Platform",
            "togaf": [
              {
                "architecture": "Technology Architecture",
                "layer": "Technology Components"
              }
            ],
            "modernLayer": "Infrastructure",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "CICS Interface",
                "description": "Interfaces with CICS services for system operations",
                "shortName": "CICSIntf",
                "codeBlocks": "EXEC CICS commands throughout the program"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "10%",
            "evidence": [
              "EXEC CICS RECEIVE INTO(WS-RECV)",
              "EXEC CICS SEND TEXT FROM(WRITE-MSG-H)",
              "EXEC CICS RETURN"
            ],
            "architectural_layer_semantic_keywords": [
              "receive",
              "send",
              "return",
              "exec",
              "cics"
            ]
          },
          {
            "traditionalLayer": "User Interface",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Interface"
              }
            ],
            "modernLayer": "Presentation",
            "classifications": [
              "Mainframe Terminal Interface"
            ],
            "elements": [
              {
                "name": "Terminal Output",
                "description": "Displays confirmation message to user terminal",
                "shortName": "TermOut",
                "codeBlocks": "EXEC CICS SEND TEXT command"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "5%",
            "evidence": [
              "EXEC CICS SEND TEXT FROM(WRITE-MSG-H) WAIT ERASE LENGTH(24) FREEKB"
            ],
            "architectural_layer_semantic_keywords": [
              "send",
              "text",
              "display",
              "output"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Customer",
            "sources": [
              {
                "type": "counter",
                "source_name": "GENACUSTNUM",
                "reference": "Customer number counter in GENA pool"
              },
              {
                "type": "queue",
                "source_name": "GENACNTL",
                "reference": "Temporary storage queue storing customer number range"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create",
              "delete"
            ],
            "attributes": [
              "Customer Number Range (Low to High)"
            ],
            "business_context": "Core entity for the GENAPP system that requires initialization of valid customer number ranges"
          },
          {
            "name": "Transaction Counters",
            "sources": [
              {
                "type": "counter",
                "source_name": "GENA Pool Counters",
                "reference": "Various transaction counters in GENA pool (GENACNT100-GENACNTI99)"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create",
              "delete"
            ],
            "attributes": [
              "Transaction Type",
              "Counter Value"
            ],
            "business_context": "Tracks various transaction types and volumes in the GENAPP system"
          },
          {
            "name": "System Control",
            "sources": [
              {
                "type": "queue",
                "source_name": "GENACNTL",
                "reference": "Control information temporary storage queue"
              },
              {
                "type": "queue",
                "source_name": "GENAERRS",
                "reference": "Error tracking temporary storage queue"
              },
              {
                "type": "queue",
                "source_name": "GENASTRT",
                "reference": "System startup temporary storage queue"
              },
              {
                "type": "queue",
                "source_name": "GENASTAT",
                "reference": "System status temporary storage queue"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create",
              "delete"
            ],
            "attributes": [
              "Control Parameters",
              "System Status"
            ],
            "business_context": "Manages system-wide control parameters and status information for the GENAPP application"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "FrstCustNum",
            "semantic_type": "CUSTOMER_ID_LOWER_BOUND",
            "source": "Used to set the lower bound of customer number range in GENACNTL queue",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "LastCustNum",
            "semantic_type": "CUSTOMER_ID_UPPER_BOUND",
            "source": "Used to set the upper bound of customer number range and initialize GENACUSTNUM counter",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "GENApool",
            "semantic_type": "COUNTER_POOL_NAME",
            "source": "Used as the pool name for all CICS counters in the application",
            "related_entities": [
              "Customer",
              "Transaction Counters"
            ],
            "confidence": "high"
          },
          {
            "parameter": "GENACNT*",
            "semantic_type": "TRANSACTION_COUNTER_NAME",
            "source": "Naming pattern for various transaction counters (e.g., GENACNT100, GENACNT200)",
            "related_entities": [
              "Transaction Counters"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Customer numbers must be within a predefined range",
            "implementation": "The program sets up a customer number range with FrstCustNum as lower bound and LastCustNum as upper bound"
          },
          {
            "rule": "Customer number range can be overridden at runtime",
            "implementation": "The program accepts an optional input parameter to override the LastCustNum value"
          },
          {
            "rule": "Transaction counters must be reset during system initialization",
            "implementation": "All transaction counters are deleted and redefined with initial value of zero"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "maintenance",
          "integration_approaches": [
            {
              "type": "other",
              "target": "GENA pool",
              "data": "Customer number and transaction counters"
            },
            {
              "type": "other",
              "target": "CICS TS Queues",
              "data": "System control information"
            }
          ],
          "data_sources": [
            "Terminal input (optional customer number limit)"
          ],
          "data_destinations": [
            "CICS Counters in GENA pool",
            "CICS Temporary Storage Queues",
            "Terminal output"
          ]
        },
        "features": [
          {
            "feature": "GENAPP System Initialization",
            "rules": [
              {
                "rule": "Initialize system control parameters",
                "scenario": "System startup",
                "steps": [
                  {
                    "step": "Receive optional customer number limit from terminal",
                    "external": true,
                    "step_type": "read",
                    "objects": [
                      {
                        "name": "Terminal",
                        "object_type": "terminal",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Delete existing temporary storage queues",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "GENAERRS",
                        "object_type": "queue",
                        "when": "Always"
                      },
                      {
                        "name": "GENASTRT",
                        "object_type": "queue",
                        "when": "Always"
                      },
                      {
                        "name": "GENASTAT",
                        "object_type": "queue",
                        "when": "Always"
                      },
                      {
                        "name": "GENACNTL",
                        "object_type": "queue",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Write customer number range to control queue",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "GENACNTL",
                        "object_type": "queue",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Initialize customer number counter",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "GENACUSTNUM",
                        "object_type": "counter",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Initialize transaction tracking counters",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "GENACNT* counters",
                        "object_type": "counter",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Display confirmation message",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "Terminal",
                        "object_type": "terminal",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "GENA": "Prefix for GENAPP application resources",
          "Customer Number Range": "Valid range of customer identifiers in the system",
          "Transaction Counter": "Counter that tracks the number of specific transaction types"
        },
        "program_context": {
          "program_name": "LGSETUP",
          "includes": [],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Procedural",
            "Imperative"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "CICS": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Mainframe"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cob",
            ".cbl",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PROCEDURE DIVISION",
            "PIC data type declarations",
            "EXEC CICS transaction handling",
            "Hierarchical data structure definitions",
            "Fixed-format source code layout",
            "Alphanumeric and numeric picture clauses",
            "Mainframe transaction processing indicators"
          ]
        }
      }
    },
    "LGIPVS01": {
      "name": "LGIPVS01",
      "calls": [],
      "called_by": [],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [],
      "data_structures": {},
      "community": "Community 3",
      "program_language": "COBOL",
      "understanding": {
        "comments": "A dual-mode policy information retrieval program that supports both interactive terminal access and programmatic access via COMMAREA",
        "title": "Policy Information Retrieval System",
        "purpose": {
          "business_goal": [
            "Retrieve policy information based on policy type and number",
            "Support both interactive and programmatic access"
          ],
          "implementation": "Reads policy records from KSDSPOLY file using a generic key search and returns policy details in the appropriate format based on invocation method"
        },
        "program_type": {
          "category": "business",
          "function": "Data retrieval"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Policy Retrieval",
                "description": "Reads policy information from KSDSPOLY file using generic key search",
                "shortName": "PolicyRead",
                "codeBlocks": "CICS Read File operation"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "30%",
            "evidence": [
              "Exec CICS Read File('KSDSPOLY') Into(CA-AREA) Length(F64) Ridfld(PART-KEY) KeyLength(F11) Generic RESP(WS-RESP) GTEQ End-Exec."
            ],
            "architectural_layer_semantic_keywords": [
              "read",
              "file",
              "retrieve",
              "generic",
              "key search"
            ]
          },
          {
            "traditionalLayer": "User Interface",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Interface"
              }
            ],
            "modernLayer": "Presentation",
            "classifications": [
              "Terminal Interface"
            ],
            "elements": [
              {
                "name": "Response Formatting",
                "description": "Formats and returns policy information based on request type",
                "shortName": "ResponseUI",
                "codeBlocks": "CICS SEND TEXT operation"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "25%",
            "evidence": [
              "EXEC CICS SEND TEXT FROM(WRITE-MSG) WAIT ERASE LENGTH(80) FREEKB END-EXEC"
            ],
            "architectural_layer_semantic_keywords": [
              "send",
              "display",
              "format",
              "output",
              "terminal"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Request Processing",
                "description": "Determines if request came from terminal or program and processes accordingly",
                "shortName": "RequestProc",
                "codeBlocks": "MAINLINE section conditional logic"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "IF WS-STARTCODE(1:1) = 'D' or WS-Invokeprog Not = Spaces MOVE 'C' To WS-FLAG...",
              "If CA-Policy-Type Not = Part-Key-Type Or WS-RESP NOT = DFHRESP(NORMAL)..."
            ],
            "architectural_layer_semantic_keywords": [
              "process",
              "validate",
              "determine",
              "check"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "API-Driven"
            ],
            "elements": [
              {
                "name": "Program Interface",
                "description": "Handles communication with calling programs via COMMAREA",
                "shortName": "ProgInterface",
                "codeBlocks": "DFHCOMMAREA handling"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "25%",
            "evidence": [
              "MOVE COMMA-DATA TO WS-COMMAREA",
              "Move Spaces To COMMA-Data Move Write-Msg-Text To COMMA-Data-Text Move Write-Msg-Key To COMMA-Data-Key"
            ],
            "architectural_layer_semantic_keywords": [
              "interface",
              "commarea",
              "communication",
              "return"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Insurance Policy",
            "sources": [
              {
                "type": "file",
                "source_name": "KSDSPOLY",
                "reference": "Exec CICS Read File('KSDSPOLY')"
              },
              {
                "type": "record",
                "source_name": "CA-AREA",
                "reference": "CA-AREA structure containing policy information"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "Policy Type",
              "Customer Number",
              "Policy Number"
            ],
            "business_context": "Core business entity representing insurance policies that can be retrieved by policy type and number",
            "original_name": "Policy"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "PART-KEY",
            "semantic_type": "POLICY_SEARCH_KEY",
            "source": "Used as search key in policy retrieval operation",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "PART-KEY-Type",
            "semantic_type": "POLICY_TYPE",
            "source": "First component of policy search key",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "PART-KEY-Num",
            "semantic_type": "POLICY_NUMBER",
            "source": "Second component of policy search key",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POLICY-TYPE",
            "semantic_type": "POLICY_TYPE",
            "source": "Field in policy record structure",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Field in policy record structure",
            "related_entities": [
              "Insurance Policy",
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_NUMBER",
            "source": "Field in policy record structure",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "WS-FLAG",
            "semantic_type": "PROCESSING_MODE",
            "source": "Used to determine if program was called (C) or received terminal input (R)",
            "related_entities": [],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Policy retrieval must match on policy type",
            "implementation": "If CA-Policy-Type Not = Part-Key-Type Or WS-RESP NOT = DFHRESP(NORMAL) - returns error message when policy type doesn't match"
          },
          {
            "rule": "Policy search uses generic key search with greater than or equal logic",
            "implementation": "CICS Read with Generic and GTEQ options"
          },
          {
            "rule": "Different response formats based on invocation method",
            "implementation": "If WS-FLAG = 'R' Then - terminal output, Else - COMMAREA output"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "file_access",
              "target": "KSDSPOLY",
              "data": "Policy records"
            },
            {
              "type": "api",
              "target": "DFHCOMMAREA",
              "data": "Policy information"
            }
          ],
          "data_sources": [
            "KSDSPOLY file",
            "Terminal input",
            "COMMAREA input"
          ],
          "data_destinations": [
            "Terminal screen",
            "COMMAREA output"
          ]
        },
        "features": [
          {
            "feature": "Policy Information Retrieval",
            "rules": [
              {
                "rule": "Retrieve policy information by policy type and number",
                "scenario": "User or program requests policy details",
                "steps": [
                  {
                    "step": "Determine if request came from terminal or program",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "CICS ASSIGN",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Extract policy type and number from input",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Read policy record from file",
                    "external": true,
                    "step_type": "read",
                    "objects": [
                      {
                        "name": "KSDSPOLY",
                        "object_type": "file",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Record not found, Policy type mismatch"
                  },
                  {
                    "step": "Format and return policy information",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "Terminal",
                        "object_type": "program",
                        "when": "WS-FLAG = 'R'"
                      },
                      {
                        "name": "COMMAREA",
                        "object_type": "program",
                        "when": "WS-FLAG = 'C'"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Dual-mode Interface",
            "rules": [
              {
                "rule": "Support both interactive and programmatic access",
                "scenario": "Program can be used directly by users or called by other programs",
                "steps": [
                  {
                    "step": "Determine access method",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Process terminal input",
                    "external": true,
                    "step_type": "read",
                    "objects": [
                      {
                        "name": "CICS RECEIVE",
                        "object_type": "program",
                        "when": "WS-STARTCODE(1:1) \u2260 'D' and WS-Invokeprog = Spaces"
                      }
                    ],
                    "when": "Terminal access",
                    "exceptions": "None"
                  },
                  {
                    "step": "Process COMMAREA input",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Program access",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Policy": "Insurance contract identified by type and number",
          "Customer Number": "Identifier for the policyholder",
          "Policy Type": "Single character code identifying the category of insurance policy",
          "Generic Key Search": "Search method that finds records with keys greater than or equal to the search key"
        },
        "program_context": {
          "program_name": "LGIPVS01",
          "includes": [],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Procedural",
            "Imperative"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "CICS": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.95,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Imperative"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cob",
            ".cbl",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PROCEDURE DIVISION",
            "EXEC CICS commands",
            "Hierarchical data structures",
            "Pic X and Pic 9 data type declarations",
            "Explicit length and type specifications",
            "Mainframe transaction processing syntax"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Policy Management"
      }
    },
    "LGASTAT1": {
      "name": "LGASTAT1",
      "calls": [],
      "called_by": [],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [
        "LGCMAREA"
      ],
      "data_structures": {},
      "community": "Community 2",
      "program_language": "COBOL",
      "understanding": {
        "comments": "Program tracks and maintains transaction statistics by counting various transaction types and storing timestamps",
        "title": "CICS Transaction Statistics Tracking System",
        "purpose": {
          "business_goal": [
            "Track transaction statistics",
            "Maintain counters for various transaction types"
          ],
          "implementation": "Retrieves transaction data from containers or commarea, maintains counters in a temporary storage queue, and updates a named counter"
        },
        "program_type": {
          "category": "technical",
          "function": "Transaction monitoring and statistics collection"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Temporary Storage Queue Operations",
                "description": "Reads from or creates entries in a CICS temporary storage queue",
                "shortName": "TSQueue",
                "codeBlocks": "ReadQ TS, WriteQ TS operations"
              },
              {
                "name": "Named Counter Operations",
                "description": "Retrieves counter values from a named counter pool",
                "shortName": "NamedCounter",
                "codeBlocks": "Get Counter operation"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "Exec Cics ReadQ TS Queue(WS-Qname) Into(WS-Qarea)",
              "Exec Cics WriteQ TS Queue(WS-Qname) From(WS-Qarea)",
              "Exec CICS Get Counter(GENAcount) Pool(GENApool) Value(Trancount)"
            ],
            "architectural_layer_semantic_keywords": [
              "read",
              "write",
              "queue",
              "counter",
              "retrieve"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Messaging"
            ],
            "elements": [
              {
                "name": "CICS Container Interaction",
                "description": "Retrieves data from CICS event processing containers",
                "shortName": "CICSContainers",
                "codeBlocks": "Get Container operations"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "Exec CICS Get Container(WS-CHANname1) Into(WS-Data-Req)",
              "Exec CICS Get Container(WS-CHANname2) Into(WS-Data-RC)"
            ],
            "architectural_layer_semantic_keywords": [
              "get",
              "container",
              "channel"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Transaction Code Normalization",
                "description": "Normalizes transaction codes for consistent counting",
                "shortName": "TxNormalization",
                "codeBlocks": "Transaction code mapping logic"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "If GENAcounter = '02ACUS' Move '01ACUS' to GENAcounter",
              "If GENAcounter = '02ICOM' or GENAcounter = '03ICOM' or GENAcounter = '05ICOM' Move '01ICOM' to GENAcounter",
              "If GENAType Not = '00' Move '99' To GENAtype"
            ],
            "architectural_layer_semantic_keywords": [
              "normalize",
              "transform",
              "process"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Transaction Statistics",
            "sources": [
              {
                "type": "queue",
                "source_name": "Named Counter Pool",
                "reference": "GENAcount in GENApool"
              },
              {
                "type": "queue",
                "source_name": "Temporary Storage Queue",
                "reference": "WS-Qname (GENASTRT)"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read",
              "update",
              "create"
            ],
            "attributes": [
              "Transaction code",
              "Transaction type",
              "Timestamp"
            ],
            "business_context": "Tracks and maintains counters for various transaction types in the system"
          },
          {
            "name": "Transaction Request",
            "sources": [
              {
                "type": "integration",
                "source_name": "CICS Containers",
                "reference": "WS-CHANname1, WS-CHANname2"
              },
              {
                "type": "variable",
                "source_name": "DFHCOMMAREA",
                "reference": "CA-REQUEST-ID, CA-RETURN-CODE"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "Request ID",
              "Return code"
            ],
            "business_context": "Represents transaction request information used to determine which counters to update"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "GENAcounter",
            "semantic_type": "TRANSACTION_CODE",
            "source": "Used to identify specific transaction types for counting",
            "related_entities": [
              "Transaction Statistics"
            ],
            "confidence": "high"
          },
          {
            "parameter": "GENAtype",
            "semantic_type": "TRANSACTION_STATUS",
            "source": "Indicates transaction status (success/failure)",
            "related_entities": [
              "Transaction Statistics"
            ],
            "confidence": "high"
          },
          {
            "parameter": "WS-Qname",
            "semantic_type": "QUEUE_IDENTIFIER",
            "source": "Identifies the temporary storage queue for timestamp data",
            "related_entities": [
              "Transaction Statistics"
            ],
            "confidence": "high"
          },
          {
            "parameter": "WS-Date",
            "semantic_type": "TRANSACTION_DATE",
            "source": "Stores the date when transaction statistics are recorded",
            "related_entities": [
              "Transaction Statistics"
            ],
            "confidence": "high"
          },
          {
            "parameter": "WS-Time",
            "semantic_type": "TRANSACTION_TIME",
            "source": "Stores the time when transaction statistics are recorded",
            "related_entities": [
              "Transaction Statistics"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "TRANSACTION_CODE",
            "source": "Identifies the type of transaction request from commarea",
            "related_entities": [
              "Transaction Request"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "TRANSACTION_STATUS",
            "source": "Indicates the result status of a transaction from commarea",
            "related_entities": [
              "Transaction Request"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Normalize transaction codes for consistent counting",
            "implementation": "If GENAcounter = '02ACUS' Move '01ACUS' to GENAcounter. If GENAcounter = '02ICOM' or GENAcounter = '03ICOM' or GENAcounter = '05ICOM' Move '01ICOM' to GENAcounter."
          },
          {
            "rule": "Non-zero return codes are treated as errors",
            "implementation": "If GENAType Not = '00' Move '99' To GENAtype."
          },
          {
            "rule": "First-time access to the queue creates a timestamp entry",
            "implementation": "If WS-RESP = DFHRESP(QIDERR) Then... create new timestamp entry with current date and time"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "messaging",
              "target": "CICS Containers",
              "data": "Transaction request data"
            },
            {
              "type": "messaging",
              "target": "Temporary Storage Queue",
              "data": "Timestamp data"
            },
            {
              "type": "messaging",
              "target": "Named Counter Pool",
              "data": "Transaction counter values"
            }
          ],
          "data_sources": [
            "CICS Containers",
            "DFHCOMMAREA",
            "CICS ASKTIME/FORMATTIME"
          ],
          "data_destinations": [
            "Temporary Storage Queue (GENASTRT)",
            "Named Counter Pool (GENA)"
          ]
        },
        "features": [
          {
            "feature": "Transaction Statistics Tracking",
            "rules": [
              {
                "rule": "Track transaction counts by type",
                "scenario": "When a transaction is processed, update the appropriate counter",
                "steps": [
                  {
                    "step": "Retrieve transaction data from CICS containers",
                    "external": true,
                    "step_type": "read",
                    "objects": [
                      {
                        "name": "CICS Containers",
                        "object_type": "container",
                        "when": "Always attempted first"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Container retrieval failure"
                  },
                  {
                    "step": "Fallback to commarea if container retrieval fails",
                    "external": false,
                    "step_type": "read",
                    "objects": [
                      {
                        "name": "DFHCOMMAREA",
                        "object_type": "commarea",
                        "when": "When container retrieval fails"
                      }
                    ],
                    "when": "WS-RESP not equal to DFHRESP(NORMAL)",
                    "exceptions": "Empty commarea"
                  },
                  {
                    "step": "Read or create timestamp in temporary storage queue",
                    "external": true,
                    "step_type": "read",
                    "objects": [
                      {
                        "name": "Temporary Storage Queue",
                        "object_type": "queue",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Queue not found (QIDERR)"
                  },
                  {
                    "step": "Normalize transaction codes",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "For specific transaction codes (02ACUS, 02ICOM, 03ICOM, 05ICOM)",
                    "exceptions": "None"
                  },
                  {
                    "step": "Update named counter",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "Named Counter Pool",
                        "object_type": "counter",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Counter access failure"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "GENAcounter": "Transaction code identifier",
          "GENAtype": "Transaction status code",
          "GENASTRT": "Transaction timestamp queue",
          "GENApool": "Transaction statistics counter pool"
        },
        "program_context": {
          "program_name": "LGASTAT1",
          "includes": [
            "LGCMAREA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "Unfinished_Code_Fragment": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "LINKAGE SECTION",
            "PIC data type declarations",
            "Hierarchical data structure with 01, 03 level indicators",
            "REDEFINES clause for data structure overlays",
            "Fixed-format source code layout",
            "Verbose division and section structure",
            "Explicit length and type specification for data fields"
          ]
        }
      }
    },
    "LGICVS01": {
      "name": "LGICVS01",
      "calls": [],
      "called_by": [],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [],
      "data_structures": {},
      "community": "Community 10",
      "program_language": "COBOL",
      "understanding": {
        "comments": "Program generates random customer numbers within a defined range for the GENAPP system",
        "title": "Customer Number Generator for GENAPP System",
        "purpose": {
          "business_goal": [
            "Generate a random customer number within a specified range",
            "Maintain customer number range boundaries in a temporary storage queue"
          ],
          "implementation": "The program reads low and high customer number boundaries from a temporary storage queue (GENACNTL), generates a random customer number within that range, and validates it against the customer file"
        },
        "program_type": {
          "category": "business",
          "function": "Data retrieval and generation"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Random Customer Number Generation",
                "description": "Generates a random customer number within the specified range",
                "shortName": "CustomerNumGen",
                "codeBlocks": "MAINLINE section (lines 179-193)"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "40%",
            "evidence": [
              "Compute WS-Random-Number = Function Integer((Function Random(EIBTASKN) * (ws-cust-high - ws-cust-low)) + WS-Cust-Low)",
              "Business entity 'Customer' is involved in the logic",
              "Validation of generated customer number against customer file"
            ],
            "architectural_layer_semantic_keywords": [
              "calculate",
              "process",
              "validate",
              "random",
              "generate"
            ]
          },
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "TSQ Management",
                "description": "Reads and writes customer number range boundaries to/from temporary storage queue",
                "shortName": "TSQMgmt",
                "codeBlocks": "MAINLINE section (lines 136-178)"
              },
              {
                "name": "Customer File Access",
                "description": "Validates generated customer number against customer file",
                "shortName": "CustFileAccess",
                "codeBlocks": "MAINLINE section (lines 185-193)"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "45%",
            "evidence": [
              "EXEC CICS ReadQ TS Queue(STSQ-NAME)",
              "EXEC CICS WRITEQ TS QUEUE(STSQ-NAME)",
              "Exec CICS Read File('KSDSCUST')",
              "Data retrieval and storage operations for customer number boundaries"
            ],
            "architectural_layer_semantic_keywords": [
              "read",
              "write",
              "queue",
              "file",
              "retrieve"
            ]
          },
          {
            "traditionalLayer": "User Interface",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Interface"
              }
            ],
            "modernLayer": "Presentation",
            "classifications": [
              "Terminal Interface"
            ],
            "elements": [
              {
                "name": "Response Formatting",
                "description": "Formats and returns the generated customer number to the user",
                "shortName": "RespFormat",
                "codeBlocks": "MAINLINE section (lines 194-205)"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "15%",
            "evidence": [
              "EXEC CICS SEND TEXT FROM(WRITE-MSG-H)",
              "Conditional formatting based on invocation method (terminal vs program)",
              "Formatting of response message with customer number"
            ],
            "architectural_layer_semantic_keywords": [
              "display",
              "send",
              "format",
              "output"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Customer",
            "sources": [
              {
                "type": "file",
                "source_name": "KSDSCUST",
                "reference": "Customer file containing customer records"
              },
              {
                "type": "record",
                "source_name": "CA-AREA",
                "reference": "Customer record structure with customer number"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CA-CUSTOMER-NUM"
            ],
            "business_context": "Core entity representing customers in the GENAPP system, identified by unique customer numbers"
          },
          {
            "name": "CustomerNumberRange",
            "sources": [
              {
                "type": "queue",
                "source_name": "GENACNTL",
                "reference": "Temporary storage queue storing customer number range boundaries"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read",
              "create",
              "update"
            ],
            "attributes": [
              "WS-Cust-Low",
              "WS-Cust-High"
            ],
            "business_context": "Configuration entity that defines the valid range for customer numbers in the system"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "WS-Cust-Low",
            "semantic_type": "CUSTOMER_ID_MINIMUM",
            "source": "Used as lower boundary for customer number generation",
            "related_entities": [
              "Customer",
              "CustomerNumberRange"
            ],
            "confidence": "high"
          },
          {
            "parameter": "WS-Cust-High",
            "semantic_type": "CUSTOMER_ID_MAXIMUM",
            "source": "Used as upper boundary for customer number generation",
            "related_entities": [
              "Customer",
              "CustomerNumberRange"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as unique identifier for customer records",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "WS-Random-Number",
            "semantic_type": "GENERATED_CUSTOMER_ID",
            "source": "Result of random number generation within customer ID range",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "STSQ-NAME",
            "semantic_type": "CONFIGURATION_QUEUE_NAME",
            "source": "Name of temporary storage queue for system configuration",
            "related_entities": [
              "CustomerNumberRange"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Customer numbers must be within the defined range boundaries",
            "implementation": "Program generates random numbers only within WS-Cust-Low and WS-Cust-High boundaries"
          },
          {
            "rule": "Generated customer numbers must be validated against existing customer records",
            "implementation": "Program reads the KSDSCUST file with the generated number to validate it exists"
          },
          {
            "rule": "Customer number range boundaries must be persisted for system use",
            "implementation": "Program stores boundaries in GENACNTL temporary storage queue"
          },
          {
            "rule": "Default customer number range is 0001000001 to 0001000001 if not found in storage",
            "implementation": "Program initializes WS-Cust-Low and WS-Cust-High to 0001000001 before attempting to read from TSQ"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "file_access",
              "target": "KSDSCUST",
              "data": "customer records"
            },
            {
              "type": "messaging",
              "target": "GENACNTL",
              "data": "temporary storage queue"
            }
          ],
          "data_sources": [
            "KSDSCUST customer file",
            "GENACNTL temporary storage queue"
          ],
          "data_destinations": [
            "Terminal display",
            "COMMAREA for calling programs"
          ]
        },
        "features": [
          {
            "feature": "Customer Number Generation",
            "rules": [
              {
                "rule": "Generate unique customer numbers within system-defined boundaries",
                "scenario": "When a new customer needs to be created in the system",
                "steps": [
                  {
                    "step": "Retrieve customer number range boundaries",
                    "external": true,
                    "step_type": "read",
                    "objects": [
                      {
                        "name": "GENACNTL",
                        "object_type": "queue",
                        "when": "Always"
                      }
                    ],
                    "when": "At program start",
                    "exceptions": "If queue doesn't exist, default values are used"
                  },
                  {
                    "step": "Generate random customer number",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "After retrieving range boundaries",
                    "exceptions": "None"
                  },
                  {
                    "step": "Validate generated number against customer file",
                    "external": true,
                    "step_type": "read",
                    "objects": [
                      {
                        "name": "KSDSCUST",
                        "object_type": "file",
                        "when": "After generating random number"
                      }
                    ],
                    "when": "After random number generation",
                    "exceptions": "If record not found, generated number is used as-is"
                  },
                  {
                    "step": "Return customer number to caller",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "Terminal or COMMAREA",
                        "object_type": "program",
                        "when": "Based on invocation method"
                      }
                    ],
                    "when": "After validation",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Customer Number Range Management",
            "rules": [
              {
                "rule": "Maintain system-wide customer number range boundaries",
                "scenario": "System configuration for customer number allocation",
                "steps": [
                  {
                    "step": "Create TSQ if it doesn't exist",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "GENACNTL",
                        "object_type": "queue",
                        "when": "When TSQ doesn't exist"
                      }
                    ],
                    "when": "WS-FLAG-TSQE = 'Y'",
                    "exceptions": "Queue write failures"
                  },
                  {
                    "step": "Update low customer number boundary",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "GENACNTL",
                        "object_type": "queue",
                        "when": "When low boundary not found in TSQ"
                      }
                    ],
                    "when": "WS-FLAG-TSQL = 'Y'",
                    "exceptions": "Queue write failures"
                  },
                  {
                    "step": "Update high customer number boundary",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "GENACNTL",
                        "object_type": "queue",
                        "when": "When high boundary not found in TSQ"
                      }
                    ],
                    "when": "WS-FLAG-TSQH = 'Y'",
                    "exceptions": "Queue write failures"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Customer Number": "Unique identifier for customers in the GENAPP system",
          "Customer Number Range": "Configuration defining valid customer number boundaries",
          "GENACNTL": "Control record for the GENAPP system stored in temporary storage"
        },
        "program_context": {
          "program_name": "LGICVS01",
          "includes": [],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Procedural",
            "Imperative"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "CICS Transaction Processing": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Mainframe Transaction Processing"
          ],
          "language_version_hints": [
            "Enterprise COBOL",
            "COBOL-85 Standard"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "PROCEDURE DIVISION",
            "EXEC CICS commands",
            "Hierarchical data structure with 01, 03 level numbers",
            "PIC clause for data type definition",
            "MOVE statement for data assignment",
            "Mainframe transaction processing keywords",
            "Fixed-format source code layout",
            "Verbose division-based structure"
          ]
        },
        "business_domain": "Party Reference",
        "service_domain": "Party Reference Data Directory"
      }
    },
    "LGAPDB01": {
      "name": "LGAPDB01",
      "calls": [
        "LGSTSQ",
        "SQLERRP",
        "SQLWARN",
        "SQLERRD",
        "SQLEXT",
        "SQLCAID",
        "SQLERRM",
        "SQLCODE",
        "SQLCABC"
      ],
      "called_by": [
        "LGAPOL01"
      ],
      "uses_tables": [
        {
          "name": "HOUSE",
          "persistent_perations": [
            "create"
          ]
        },
        {
          "name": "POLICY",
          "persistent_perations": [
            "create",
            "read"
          ]
        },
        {
          "name": "CLAIM",
          "persistent_perations": [
            "create"
          ]
        },
        {
          "name": "ENDOWMENT",
          "persistent_perations": [
            "create"
          ]
        },
        {
          "name": "COMMERCIAL",
          "persistent_perations": [
            "create"
          ]
        },
        {
          "name": "MOTOR",
          "persistent_perations": [
            "create"
          ]
        }
      ],
      "uses_screens": [],
      "includes": [
        "LGPOLICY",
        "LGCMAREA",
        "SQLCA"
      ],
      "data_structures": {},
      "community": "Community 12",
      "program_language": "COBOL",
      "understanding": {
        "comments": "Insurance policy database operations handler that creates and manages different types of insurance policies and claims in a database",
        "title": "Insurance Policy Database Operations Handler",
        "purpose": {
          "business_goal": [
            "Create and manage different types of insurance policies in a database",
            "Process policy-related data including endowment, house, motor, commercial policies and claims"
          ],
          "implementation": "Uses SQL operations to insert policy data into various database tables based on the request type received in the COMMAREA"
        },
        "program_type": {
          "category": "business",
          "function": "Database operations for insurance policy management"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Relational Databases"
            ],
            "elements": [
              {
                "name": "SQL Database Operations",
                "description": "Performs SQL INSERT operations on various insurance policy-related tables",
                "shortName": "SQL-OPS",
                "codeBlocks": "INSERT-POLICY, INSERT-ENDOW, INSERT-HOUSE, INSERT-MOTOR, INSERT-COMMERCIAL, INSERT-CLAIM"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "70%",
            "evidence": [
              "EXEC SQL INSERT INTO POLICY (...) VALUES (...)",
              "EXEC SQL INSERT INTO ENDOWMENT (...) VALUES (...)",
              "EXEC SQL INSERT INTO HOUSE (...) VALUES (...)",
              "EXEC SQL INSERT INTO MOTOR (...) VALUES (...)",
              "EXEC SQL INSERT INTO COMMERCIAL (...) VALUES (...)",
              "EXEC SQL INSERT INTO CLAIM (...) VALUES (...)",
              "EXEC SQL SET :DB2-POLICYNUM-INT = IDENTITY_VAL_LOCAL()",
              "EXEC SQL SELECT LASTCHANGED INTO :CA-LASTCHANGED FROM POLICY"
            ],
            "architectural_layer_semantic_keywords": [
              "insert",
              "select",
              "sql",
              "database",
              "table"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              },
              {
                "architecture": "Business Architecture",
                "layer": "Business Processes"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Policy Type Determination",
                "description": "Determines the type of insurance policy to process based on request ID",
                "shortName": "POL-TYPE",
                "codeBlocks": "MAINLINE section"
              },
              {
                "name": "Insurance Policy Processing",
                "description": "Processes different types of insurance policies (endowment, house, motor, commercial) and claims",
                "shortName": "POL-PROC",
                "codeBlocks": "MAINLINE section, INSERT-POLICY, INSERT-ENDOW, INSERT-HOUSE, INSERT-MOTOR, INSERT-COMMERCIAL, INSERT-CLAIM"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "EVALUATE CA-REQUEST-ID",
              "WHEN '01AEND' MOVE 'E' TO DB2-POLICYTYPE",
              "WHEN '01AHOU' MOVE 'H' TO DB2-POLICYTYPE",
              "WHEN '01AMOT' MOVE 'M' TO DB2-POLICYTYPE",
              "WHEN '01ACOM' MOVE 'C' TO DB2-POLICYTYPE",
              "WHEN '01ACLM' MOVE 'X' TO DB2-POLICYTYPE",
              "If CA-REQUEST-ID Not = '01ACLM' PERFORM INSERT-POLICY End-If"
            ],
            "architectural_layer_semantic_keywords": [
              "evaluate",
              "process",
              "policy",
              "insurance",
              "business entity"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Messaging"
            ],
            "elements": [
              {
                "name": "Error Logging",
                "description": "Formats and logs error messages using the LGSTSQ utility program",
                "shortName": "ERR-LOG",
                "codeBlocks": "WRITE-ERROR-MESSAGE section"
              },
              {
                "name": "Post-Processing Link",
                "description": "Links to LGAPVS01 program for validation or post-processing",
                "shortName": "POST-PROC",
                "codeBlocks": "MAINLINE section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "10%",
            "evidence": [
              "EXEC CICS LINK PROGRAM('LGSTSQ') COMMAREA(ERROR-MSG) LENGTH(LENGTH OF ERROR-MSG)",
              "EXEC CICS Link Program(LGAPVS01) Commarea(DFHCOMMAREA) LENGTH(32500)"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "program",
              "error",
              "message",
              "communication"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Insurance Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "POLICY",
                "reference": "Database table for storing base policy information"
              },
              {
                "type": "record",
                "source_name": "CA-POLICY-REQUEST",
                "reference": "COMMAREA structure for policy data"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create",
              "read"
            ],
            "attributes": [
              "PolicyNumber",
              "CustomerNumber",
              "IssueDate",
              "ExpiryDate",
              "PolicyType",
              "LastChanged",
              "BrokerId",
              "BrokersReference",
              "Payment"
            ],
            "business_context": "Core insurance product record that serves as the foundation for all policy types",
            "original_name": "Policy"
          },
          {
            "name": "Endowment Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "ENDOWMENT",
                "reference": "Database table for endowment policy details"
              },
              {
                "type": "record",
                "source_name": "CA-ENDOWMENT",
                "reference": "COMMAREA structure for endowment policy data"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "PolicyNumber",
              "WithProfits",
              "Equities",
              "ManagedFund",
              "FundName",
              "Term",
              "SumAssured",
              "LifeAssured",
              "PaddingData"
            ],
            "business_context": "Investment-based life insurance policy with savings component",
            "original_name": "EndowmentPolicy"
          },
          {
            "name": "House Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "HOUSE",
                "reference": "Database table for house insurance details"
              },
              {
                "type": "record",
                "source_name": "CA-HOUSE",
                "reference": "COMMAREA structure for house policy data"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "PolicyNumber",
              "PropertyType",
              "Bedrooms",
              "Value",
              "HouseName",
              "HouseNumber",
              "Postcode"
            ],
            "business_context": "Property insurance for residential buildings",
            "original_name": "HousePolicy"
          },
          {
            "name": "Motor Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "MOTOR",
                "reference": "Database table for motor insurance details"
              },
              {
                "type": "record",
                "source_name": "CA-MOTOR",
                "reference": "COMMAREA structure for motor policy data"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "PolicyNumber",
              "Make",
              "Model",
              "Value",
              "RegNumber",
              "Colour",
              "CC",
              "YearOfManufacture",
              "Premium",
              "Accidents"
            ],
            "business_context": "Vehicle insurance covering automobiles",
            "original_name": "MotorPolicy"
          },
          {
            "name": "Commercial Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "COMMERCIAL",
                "reference": "Database table for commercial insurance details"
              },
              {
                "type": "record",
                "source_name": "CA-COMMERCIAL",
                "reference": "COMMAREA structure for commercial policy data"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "PolicyNumber",
              "RequestDate",
              "StartDate",
              "RenewalDate",
              "Address",
              "Zipcode",
              "LatitudeN",
              "LongitudeW",
              "Customer",
              "PropertyType",
              "FirePeril",
              "FirePremium",
              "CrimePeril",
              "CrimePremium",
              "FloodPeril",
              "FloodPremium",
              "WeatherPeril",
              "WeatherPremium",
              "Status",
              "RejectionReason"
            ],
            "business_context": "Business property insurance with multiple peril coverages",
            "original_name": "CommercialPolicy"
          },
          {
            "name": "Claim",
            "sources": [
              {
                "type": "table",
                "source_name": "CLAIM",
                "reference": "Database table for insurance claim details"
              },
              {
                "type": "record",
                "source_name": "CA-CLAIM",
                "reference": "COMMAREA structure for claim data"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "ClaimNumber",
              "PolicyNumber",
              "ClaimDate",
              "Paid",
              "Value",
              "Cause",
              "Observations"
            ],
            "business_context": "Record of insurance claim against a policy"
          },
          {
            "name": "Customer",
            "sources": [
              {
                "type": "variable",
                "source_name": "CA-CUSTOMER-NUM",
                "reference": "Customer identifier used in database operations"
              }
            ],
            "importance": "primary",
            "persistent_operations": [],
            "attributes": [
              "CustomerNumber"
            ],
            "business_context": "Insurance policy holder who purchases and owns policies"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "TRANSACTION_CODE",
            "source": "Used in EVALUATE statement to determine processing path",
            "related_entities": [
              "Insurance Policy",
              "Endowment Policy",
              "House Policy",
              "Motor Policy",
              "Commercial Policy",
              "Claim"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as foreign key in policy creation",
            "related_entities": [
              "Customer",
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_ID",
            "source": "Primary identifier for policies, retrieved from database after insertion",
            "related_entities": [
              "Insurance Policy",
              "Endowment Policy",
              "House Policy",
              "Motor Policy",
              "Commercial Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "DB2-POLICYTYPE",
            "semantic_type": "POLICY_TYPE_CODE",
            "source": "Single character code indicating policy classification",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Operation result code returned to calling program",
            "related_entities": [],
            "confidence": "high"
          },
          {
            "parameter": "CA-ISSUE-DATE",
            "semantic_type": "POLICY_START_DATE",
            "source": "Date when policy coverage begins",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-EXPIRY-DATE",
            "semantic_type": "POLICY_END_DATE",
            "source": "Date when policy coverage ends",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-BROKERID",
            "semantic_type": "BROKER_ID",
            "source": "Identifier for insurance broker who sold the policy",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-M-CC",
            "semantic_type": "ENGINE_CAPACITY",
            "source": "Engine size in cubic centimeters for motor vehicles",
            "related_entities": [
              "Motor Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-C-Value",
            "semantic_type": "CLAIM_AMOUNT",
            "source": "Monetary value of insurance claim",
            "related_entities": [
              "Claim"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Each policy must be associated with a valid customer",
            "implementation": "Customer number is required as foreign key when inserting policy records"
          },
          {
            "rule": "Policy type must be one of the supported categories (Endowment, House, Motor, Commercial, Claim)",
            "implementation": "CA-REQUEST-ID is validated against specific codes ('01AEND', '01AHOU', '01AMOT', '01ACOM', '01ACLM')"
          },
          {
            "rule": "Policy numbers are system-generated and returned to the caller",
            "implementation": "Database generates policy number via IDENTITY_VAL_LOCAL() function and returns it to the program"
          },
          {
            "rule": "All policy types except claims require a base policy record",
            "implementation": "INSERT-POLICY is performed for all request types except '01ACLM'"
          },
          {
            "rule": "Policy-specific details are stored in type-specific tables",
            "implementation": "Separate INSERT operations for ENDOWMENT, HOUSE, MOTOR, COMMERCIAL tables based on policy type"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "db",
              "target": "SQL Database",
              "data": "Insurance policy and claim data"
            },
            {
              "type": "messaging",
              "target": "LGSTSQ",
              "data": "Error messages"
            },
            {
              "type": "api",
              "target": "LGAPVS01",
              "data": "Post-processing validation"
            }
          ],
          "data_sources": [
            "COMMAREA input parameters"
          ],
          "data_destinations": [
            "POLICY table",
            "ENDOWMENT table",
            "HOUSE table",
            "MOTOR table",
            "COMMERCIAL table",
            "CLAIM table",
            "LGSTSQ error log",
            "LGAPVS01 program"
          ]
        },
        "features": [
          {
            "feature": "Insurance Policy Creation",
            "rules": [
              {
                "rule": "Create new insurance policy records",
                "scenario": "User submits policy creation request",
                "steps": [
                  {
                    "step": "Validate request type",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "Invalid request type (CA-RETURN-CODE = '99')"
                  },
                  {
                    "step": "Create base policy record",
                    "external": false,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "POLICY",
                        "object_type": "table",
                        "when": "CA-REQUEST-ID not = '01ACLM'"
                      }
                    ],
                    "when": "CA-REQUEST-ID not = '01ACLM'",
                    "exceptions": "SQL error (CA-RETURN-CODE = '90'), Foreign key violation (CA-RETURN-CODE = '70')"
                  },
                  {
                    "step": "Create policy-specific record",
                    "external": false,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "ENDOWMENT",
                        "object_type": "table",
                        "when": "CA-REQUEST-ID = '01AEND'"
                      },
                      {
                        "name": "HOUSE",
                        "object_type": "table",
                        "when": "CA-REQUEST-ID = '01AHOU'"
                      },
                      {
                        "name": "MOTOR",
                        "object_type": "table",
                        "when": "CA-REQUEST-ID = '01AMOT'"
                      },
                      {
                        "name": "COMMERCIAL",
                        "object_type": "table",
                        "when": "CA-REQUEST-ID = '01ACOM'"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "SQL error (CA-RETURN-CODE = '90')"
                  },
                  {
                    "step": "Post-processing validation",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGAPVS01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None specified"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Insurance Claim Creation",
            "rules": [
              {
                "rule": "Create new insurance claim records",
                "scenario": "User submits claim creation request",
                "steps": [
                  {
                    "step": "Validate request type",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "Invalid request type (CA-RETURN-CODE = '99')"
                  },
                  {
                    "step": "Create claim record",
                    "external": false,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "CLAIM",
                        "object_type": "table",
                        "when": "CA-REQUEST-ID = '01ACLM'"
                      }
                    ],
                    "when": "CA-REQUEST-ID = '01ACLM'",
                    "exceptions": "SQL error (CA-RETURN-CODE = '90')"
                  },
                  {
                    "step": "Post-processing validation",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGAPVS01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None specified"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Endowment": "Investment-based life insurance policy with savings component",
          "House": "Property insurance for residential buildings",
          "Motor": "Vehicle insurance covering automobiles",
          "Commercial": "Business property insurance with multiple peril coverages",
          "Claim": "Request for compensation under an insurance policy",
          "Policy": "Contract between insurer and insured",
          "Broker": "Insurance intermediary who sells policies",
          "Premium": "Amount paid for insurance coverage",
          "Peril": "Specific risk covered by insurance (Fire, Crime, Flood, Weather)"
        },
        "program_context": {
          "program_name": "LGAPDB01",
          "includes": [
            "LGPOLICY",
            "LGCMAREA",
            "SQLCA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Procedural",
            "Structured"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 95,
            "SQL": 5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "PROGRAM-ID declaration",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PIC (Picture) clauses for data definition",
            "COMP (Computational) storage types",
            "Embedded SQL with EXEC SQL statement",
            "Hierarchical data structure with 01, 03, 05 level numbers",
            "Fixed-format source code layout",
            "Verbose data description syntax",
            "Alphanumeric and numeric data type definitions"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Policy Management"
      }
    },
    "LGACDB02": {
      "name": "LGACDB02",
      "calls": [
        "LGSTSQ"
      ],
      "called_by": [
        "OLDACDB1",
        "LGACDB01"
      ],
      "uses_tables": [
        {
          "name": "CUSTOMER_SECURE",
          "persistent_perations": [
            "create"
          ]
        }
      ],
      "uses_screens": [],
      "includes": [
        "LGPOLICY",
        "SQLCA"
      ],
      "data_structures": {},
      "community": "Community 5",
      "program_language": "COBOL",
      "understanding": {
        "comments": "This program manages customer security records by inserting password information into a secure database table",
        "title": "Customer Security Record Management",
        "purpose": {
          "business_goal": [
            "Create customer security records with password information"
          ],
          "implementation": "Inserts customer security records into the CUSTOMER_SECURE database table with password, state indicator, and password change count information"
        },
        "program_type": {
          "category": "business",
          "function": "Database management"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Entities",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Entities"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Relational Data Model"
            ],
            "elements": [
              {
                "name": "Customer Security Record",
                "description": "Database entity representing customer security information including password, state indicator, and password change count",
                "shortName": "CUSTOMER_SECURE",
                "codeBlocks": "INSERT-CUSTOMER-PASSWORD section"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "EXEC SQL INSERT INTO CUSTOMER_SECURE (customerNumber, customerPass, state_indicator, pass_changes) VALUES (:DB2-CUSTOMERNUM-INT, :D2-CUSTSECR-PASS, :D2-CUSTSECR-STATE, :DB2-CUSTOMERCNT-INT)"
            ],
            "architectural_layer_semantic_keywords": [
              "insert",
              "SQL",
              "database",
              "table"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Customer Security Management",
                "description": "Business logic for managing customer security records",
                "shortName": "MAINLINE",
                "codeBlocks": "MAINLINE section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "Evaluate D2-REQUEST-ID - Business decision logic based on request type",
              "When '02ACUS' - Specific business operation code for adding customer security records",
              "Move D2-CUSTOMER-NUM To DB2-CUSTOMERNUM-INT - Business entity (customer) transformation"
            ],
            "architectural_layer_semantic_keywords": [
              "evaluate",
              "business operation",
              "customer"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Messaging"
            ],
            "elements": [
              {
                "name": "Error Logging",
                "description": "Error handling and logging functionality",
                "shortName": "WRITE-ERROR-MESSAGE",
                "codeBlocks": "WRITE-ERROR-MESSAGE section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "EXEC CICS LINK PROGRAM('LGSTSQ') COMMAREA(ERROR-MSG) LENGTH(LENGTH OF ERROR-MSG)"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "error",
              "message",
              "logging"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Customer Security",
            "sources": [
              {
                "type": "table",
                "source_name": "CUSTOMER_SECURE",
                "reference": "Database table for storing customer security information"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "customerNumber",
              "customerPass",
              "state_indicator",
              "pass_changes"
            ],
            "business_context": "Stores customer authentication and security information including password, state indicator, and password change count",
            "original_name": "Customer Security Record"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "D2-REQUEST-ID",
            "semantic_type": "ACTION_CODE",
            "source": "Used in MAINLINE section to determine processing flow",
            "related_entities": [
              "Customer Security"
            ],
            "confidence": "high"
          },
          {
            "parameter": "D2-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as primary key for CUSTOMER_SECURE table",
            "related_entities": [
              "Customer Security"
            ],
            "confidence": "high"
          },
          {
            "parameter": "D2-CUSTSECR-PASS",
            "semantic_type": "PASSWORD",
            "source": "Used as password value in CUSTOMER_SECURE table",
            "related_entities": [
              "Customer Security"
            ],
            "confidence": "high"
          },
          {
            "parameter": "D2-CUSTSECR-STATE",
            "semantic_type": "PASSWORD_STATE",
            "source": "Used as state indicator in CUSTOMER_SECURE table",
            "related_entities": [
              "Customer Security"
            ],
            "confidence": "high"
          },
          {
            "parameter": "D2-CUSTSECR-COUNT",
            "semantic_type": "PASSWORD_CHANGE_COUNT",
            "source": "Used as password change counter in CUSTOMER_SECURE table",
            "related_entities": [
              "Customer Security"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Only process request with ID '02ACUS'",
            "implementation": "Evaluate D2-REQUEST-ID and only perform INSERT-CUSTOMER-PASSWORD when value is '02ACUS'"
          },
          {
            "rule": "Return code 99 for invalid request types",
            "implementation": "When request ID is not '02ACUS', set D2-RETURN-CODE to '99'"
          },
          {
            "rule": "Return code 98 for database errors",
            "implementation": "When SQL operation fails (SQLCODE NOT EQUAL 0), set D2-RETURN-CODE to '98'"
          },
          {
            "rule": "A COMMAREA must be provided",
            "implementation": "Check EIBCALEN and abort with 'LGCA' code if zero"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "db",
              "target": "CUSTOMER_SECURE",
              "data": "Customer security information"
            },
            {
              "type": "messaging",
              "target": "LGSTSQ",
              "data": "Error messages"
            }
          ],
          "data_sources": [
            "DFHCOMMAREA (input parameters)"
          ],
          "data_destinations": [
            "CUSTOMER_SECURE database table",
            "Error log via LGSTSQ program"
          ]
        },
        "features": [
          {
            "feature": "Customer Security Record Creation",
            "rules": [
              {
                "rule": "Create customer security record with password information",
                "scenario": "Adding a new customer security record to the system",
                "steps": [
                  {
                    "step": "Validate COMMAREA exists",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "EIBCALEN IS EQUAL TO ZERO"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "ABEND with code 'LGCA' if no COMMAREA"
                  },
                  {
                    "step": "Evaluate request ID",
                    "external": false,
                    "step_type": "query",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "Return code 99 for invalid request types"
                  },
                  {
                    "step": "Insert customer security record",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "CUSTOMER_SECURE",
                        "object_type": "table",
                        "when": "D2-REQUEST-ID is '02ACUS'"
                      }
                    ],
                    "when": "D2-REQUEST-ID is '02ACUS'",
                    "exceptions": "Return code 98 if SQL error occurs"
                  },
                  {
                    "step": "Log errors if they occur",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "SQL error occurs or no COMMAREA"
                      }
                    ],
                    "when": "Error condition",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Customer Security Record": "Database record containing customer authentication information",
          "Password State": "Indicator of password status (possibly active/inactive/reset)",
          "Password Change Count": "Number of times a customer's password has been changed"
        },
        "program_context": {
          "program_name": "LGACDB02",
          "includes": [
            "LGPOLICY",
            "SQLCA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Structured"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 95,
            "SQL": 5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PIC data type declarations",
            "Hierarchical data structure with 01, 03 level indicators",
            "COMP (computational) data types",
            "Fixed-format source code layout",
            "Explicit record length and field definitions",
            "DB2 database interaction hints",
            "Enterprise transaction processing structure"
          ]
        },
        "business_domain": "Party Reference",
        "service_domain": "Party Security Management"
      }
    },
    "LGIPDB01": {
      "name": "LGIPDB01",
      "calls": [
        "LGSTSQ"
      ],
      "called_by": [
        "LGIPOL01"
      ],
      "uses_tables": [
        {
          "name": "HOUSE",
          "persistent_perations": [
            "read"
          ]
        },
        {
          "name": "POLICY",
          "persistent_perations": [
            "read"
          ]
        },
        {
          "name": "CLAIM",
          "persistent_perations": [
            "read"
          ]
        },
        {
          "name": "ENDOWMENT",
          "persistent_perations": [
            "read"
          ]
        },
        {
          "name": "COMMERCIAL",
          "persistent_perations": [
            "read"
          ]
        },
        {
          "name": "MOTOR",
          "persistent_perations": [
            "read"
          ]
        }
      ],
      "uses_screens": [],
      "includes": [
        "LGPOLICY",
        "LGCMAREA",
        "SQLCA"
      ],
      "data_structures": {},
      "community": "Community 8",
      "program_language": "COBOL",
      "understanding": {
        "comments": "Insurance policy database access module that retrieves various types of insurance policy information from DB2 database tables based on request parameters.",
        "title": "Insurance Policy Information Retrieval System",
        "purpose": {
          "business_goal": [
            "Retrieve insurance policy data from DB2 database",
            "Support multiple insurance policy types (Endowment, House, Motor, Commercial, Claims)"
          ],
          "implementation": "Uses SQL queries to retrieve policy information based on customer number, policy number, or other criteria and returns formatted data to the calling program"
        },
        "program_type": {
          "category": "business",
          "function": "Data retrieval and formatting"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Relational Databases",
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Database Query Functions",
                "description": "Functions that retrieve insurance policy data from DB2 database tables",
                "shortName": "DB2Queries",
                "codeBlocks": "GET-ENDOW-DB2-INFO, GET-HOUSE-DB2-INFO, GET-MOTOR-DB2-INFO, GET-COMMERCIAL-DB2-INFO-1, GET-COMMERCIAL-DB2-INFO-2, GET-COMMERCIAL-DB2-INFO-3, GET-COMMERCIAL-DB2-INFO-5, GET-CLAIM-DB2-INFO-1, GET-CLAIM-DB2-INFO-2"
              },
              {
                "name": "SQL Cursor Management",
                "description": "Cursor declarations and operations for retrieving multiple records",
                "shortName": "Cursors",
                "codeBlocks": "Cust_Cursor, Zip_Cursor, CusClaim_Cursor"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "85%",
            "evidence": [
              "Multiple SQL SELECT statements to retrieve data from DB2 tables",
              "Cursor declarations for retrieving multiple records",
              "OPEN, FETCH, and CLOSE cursor operations",
              "SQL error handling with SQLCODE checks"
            ],
            "architectural_layer_semantic_keywords": [
              "SELECT",
              "FROM",
              "WHERE",
              "CURSOR",
              "FETCH",
              "OPEN",
              "CLOSE",
              "DB2",
              "POLICY",
              "ENDOWMENT",
              "HOUSE",
              "MOTOR",
              "COMMERCIAL",
              "CLAIM"
            ]
          },
          {
            "traditionalLayer": "Data Entities",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Entities"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Relational Data Model"
            ],
            "elements": [
              {
                "name": "Insurance Policy Data Structures",
                "description": "Data structures representing various insurance policy types",
                "shortName": "PolicyData",
                "codeBlocks": "DB2-POLICY, DB2-ENDOWMENT, DB2-HOUSE, DB2-MOTOR, DB2-COMMERCIAL, DB2-CLAIM"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "10%",
            "evidence": [
              "Defined data structures for different policy types (ENDOWMENT, HOUSE, MOTOR, COMMERCIAL, CLAIM)",
              "Mapping between database fields and program variables"
            ],
            "architectural_layer_semantic_keywords": [
              "POLICY",
              "ENDOWMENT",
              "HOUSE",
              "MOTOR",
              "COMMERCIAL",
              "CLAIM",
              "CUSTOMERNUM",
              "POLICYNUM"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Request Routing Logic",
                "description": "Logic to route requests based on request ID to appropriate data retrieval functions",
                "shortName": "RequestRouter",
                "codeBlocks": "MAINLINE section with EVALUATE statement"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "5%",
            "evidence": [
              "EVALUATE statement to route requests based on request ID",
              "Mapping of request IDs to specific policy types and operations"
            ],
            "architectural_layer_semantic_keywords": [
              "EVALUATE",
              "REQUEST-ID",
              "WHEN",
              "PERFORM"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Insurance Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "POLICY",
                "reference": "Database table for policy information"
              },
              {
                "type": "record",
                "source_name": "DB2-POLICY",
                "reference": "Program record structure for policy data"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "PolicyNumber",
              "CustomerNumber",
              "IssueDate",
              "ExpiryDate",
              "LastChanged",
              "BrokerId",
              "BrokersReference",
              "Payment"
            ],
            "business_context": "Core entity representing insurance contracts between customers and the insurance company"
          },
          {
            "name": "Endowment Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "ENDOWMENT",
                "reference": "Database table for endowment policy information"
              },
              {
                "type": "record",
                "source_name": "DB2-ENDOWMENT",
                "reference": "Program record structure for endowment policy data"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "WithProfits",
              "Equities",
              "ManagedFund",
              "FundName",
              "Term",
              "SumAssured",
              "LifeAssured",
              "PaddingData"
            ],
            "business_context": "Specialized insurance policy type for life insurance with investment components"
          },
          {
            "name": "House Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "HOUSE",
                "reference": "Database table for house insurance policy information"
              },
              {
                "type": "record",
                "source_name": "DB2-HOUSE",
                "reference": "Program record structure for house policy data"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "PropertyType",
              "Bedrooms",
              "Value",
              "HouseName",
              "HouseNumber",
              "Postcode"
            ],
            "business_context": "Specialized insurance policy type for residential property coverage"
          },
          {
            "name": "Motor Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "MOTOR",
                "reference": "Database table for motor insurance policy information"
              },
              {
                "type": "record",
                "source_name": "DB2-MOTOR",
                "reference": "Program record structure for motor policy data"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "Make",
              "Model",
              "Value",
              "RegNumber",
              "Colour",
              "CC",
              "Manufactured",
              "Premium",
              "Accidents"
            ],
            "business_context": "Specialized insurance policy type for vehicle coverage"
          },
          {
            "name": "Commercial Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "COMMERCIAL",
                "reference": "Database table for commercial insurance policy information"
              },
              {
                "type": "record",
                "source_name": "DB2-COMMERCIAL",
                "reference": "Program record structure for commercial policy data"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "Address",
              "Postcode",
              "Latitude",
              "Longitude",
              "Customer",
              "PropertyType",
              "FirePeril",
              "FirePremium",
              "CrimePeril",
              "CrimePremium",
              "FloodPeril",
              "FloodPremium",
              "WeatherPeril",
              "WeatherPremium",
              "Status",
              "RejectReason"
            ],
            "business_context": "Specialized insurance policy type for business property coverage with multiple peril types"
          },
          {
            "name": "Claim",
            "sources": [
              {
                "type": "table",
                "source_name": "CLAIM",
                "reference": "Database table for insurance claim information"
              },
              {
                "type": "record",
                "source_name": "DB2-CLAIM",
                "reference": "Program record structure for claim data"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "ClaimNumber",
              "PolicyNumber",
              "ClaimDate",
              "Paid",
              "Value",
              "Cause",
              "Observations"
            ],
            "business_context": "Represents customer requests for compensation under their insurance policies"
          },
          {
            "name": "Customer",
            "sources": [
              {
                "type": "variable",
                "source_name": "CA-CUSTOMER-NUM",
                "reference": "Customer identifier used in database queries"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CustomerNumber"
            ],
            "business_context": "Entity representing the policyholder who purchases insurance products"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "OPERATION_CODE",
            "source": "Used in EVALUATE statement to determine which type of policy data to retrieve",
            "related_entities": [
              "Insurance Policy",
              "Endowment Policy",
              "House Policy",
              "Motor Policy",
              "Commercial Policy",
              "Claim"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used in database queries to filter by customer",
            "related_entities": [
              "Customer",
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_ID",
            "source": "Used in database queries to filter by policy",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "DB2-POLICYNUM-INT",
            "semantic_type": "POLICY_ID",
            "source": "Integer representation of policy number for SQL queries",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "DB2-CUSTOMERNUM-INT",
            "semantic_type": "CUSTOMER_ID",
            "source": "Integer representation of customer number for SQL queries",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "DB2-CLAIMNUM-INT",
            "semantic_type": "CLAIM_ID",
            "source": "Integer representation of claim number for SQL queries",
            "related_entities": [
              "Claim"
            ],
            "confidence": "high"
          },
          {
            "parameter": "DB2-B-Postcode",
            "semantic_type": "POSTAL_CODE",
            "source": "Used in database queries for location-based filtering",
            "related_entities": [
              "Commercial Policy",
              "House Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "DB2-M-CC-SINT",
            "semantic_type": "ENGINE_CAPACITY",
            "source": "Field in motor policy representing engine cubic capacity",
            "related_entities": [
              "Motor Policy"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Policy data retrieval requires valid customer number and policy number",
            "implementation": "SQL WHERE clauses filter by both CustomerNumber and PolicyNumber"
          },
          {
            "rule": "Commercial policies can be queried by postcode for location-based analysis",
            "implementation": "Zip_Cursor allows retrieval of commercial policies by postcode"
          },
          {
            "rule": "Claims can be retrieved by claim number or by customer number",
            "implementation": "GET-CLAIM-DB2-INFO-1 retrieves by claim number, GET-CLAIM-DB2-INFO-2 retrieves by customer number"
          },
          {
            "rule": "Commercial policy data includes multiple peril types with separate premium amounts",
            "implementation": "Commercial policy data structure includes separate fields for FirePeril/Premium, CrimePeril/Premium, FloodPeril/Premium, and WeatherPeril/Premium"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "inquiry",
          "integration_approaches": [
            {
              "type": "db",
              "target": "DB2 database",
              "data": "insurance policy and claim information"
            }
          ],
          "data_sources": [
            "POLICY table",
            "ENDOWMENT table",
            "HOUSE table",
            "MOTOR table",
            "COMMERCIAL table",
            "CLAIM table"
          ],
          "data_destinations": [
            "DFHCOMMAREA",
            "ICOM container"
          ]
        },
        "features": [
          {
            "feature": "Endowment Policy Information Retrieval",
            "rules": [
              {
                "rule": "Retrieve endowment policy details by customer and policy number",
                "scenario": "User requests endowment policy information",
                "steps": [
                  {
                    "step": "Convert customer and policy numbers to integer format for DB2",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Query DB2 tables for endowment policy data",
                    "external": true,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "POLICY",
                        "object_type": "table",
                        "when": "Always"
                      },
                      {
                        "name": "ENDOWMENT",
                        "object_type": "table",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "SQL error or no data found"
                  },
                  {
                    "step": "Format and return policy data to caller",
                    "external": false,
                    "step_type": "write",
                    "objects": [],
                    "when": "Data found",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          },
          {
            "feature": "House Policy Information Retrieval",
            "rules": [
              {
                "rule": "Retrieve house policy details by customer and policy number",
                "scenario": "User requests house policy information",
                "steps": [
                  {
                    "step": "Query DB2 tables for house policy data",
                    "external": true,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "POLICY",
                        "object_type": "table",
                        "when": "Always"
                      },
                      {
                        "name": "HOUSE",
                        "object_type": "table",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "SQL error or no data found"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Motor Policy Information Retrieval",
            "rules": [
              {
                "rule": "Retrieve motor policy details by customer and policy number",
                "scenario": "User requests motor policy information",
                "steps": [
                  {
                    "step": "Query DB2 tables for motor policy data",
                    "external": true,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "POLICY",
                        "object_type": "table",
                        "when": "Always"
                      },
                      {
                        "name": "MOTOR",
                        "object_type": "table",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "SQL error or no data found"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Commercial Policy Information Retrieval",
            "rules": [
              {
                "rule": "Retrieve commercial policy details by various criteria",
                "scenario": "User requests commercial policy information",
                "steps": [
                  {
                    "step": "Query DB2 tables for commercial policy data",
                    "external": true,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "POLICY",
                        "object_type": "table",
                        "when": "Always"
                      },
                      {
                        "name": "COMMERCIAL",
                        "object_type": "table",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "SQL error or no data found"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Claim Information Retrieval",
            "rules": [
              {
                "rule": "Retrieve claim details by claim number or customer number",
                "scenario": "User requests claim information",
                "steps": [
                  {
                    "step": "Query DB2 tables for claim data",
                    "external": true,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "POLICY",
                        "object_type": "table",
                        "when": "Always"
                      },
                      {
                        "name": "CLAIM",
                        "object_type": "table",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "SQL error or no data found"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Endowment": "Life insurance policy with investment component",
          "House": "Residential property insurance",
          "Motor": "Vehicle insurance",
          "Commercial": "Business property insurance with multiple peril types",
          "Claim": "Request for compensation under an insurance policy",
          "Peril": "Specific risk covered by insurance (Fire, Crime, Flood, Weather)",
          "Premium": "Amount paid for insurance coverage",
          "Broker": "Intermediary who sells insurance policies",
          "Policy": "Contract between insurer and insured"
        },
        "program_context": {
          "program_name": "LGIPDB01",
          "includes": [
            "LGPOLICY",
            "LGCMAREA",
            "SQLCA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Procedural",
            "Imperative"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 95,
            "SQL": 5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "Enterprise COBOL",
            "DB2 COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "Embedded SQL statements with EXEC SQL",
            "Explicit data type definitions with PIC clauses",
            "COMP and DISPLAY usage specifiers",
            "Cursor declaration for database queries",
            "Hierarchical data structure definitions",
            "Fixed-format source code layout"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Policy Management"
      }
    },
    "LGUPVS01": {
      "name": "LGUPVS01",
      "calls": [
        "LGSTSQ"
      ],
      "called_by": [
        "LGUPDB01"
      ],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [
        "LGCMAREA"
      ],
      "data_structures": {},
      "community": "Community 6",
      "program_language": "COBOL",
      "understanding": {
        "comments": "The program updates insurance policy records in the KSDSPOLY file based on policy type, handling different data fields for Commercial, Endowment, House, and Motor policies.",
        "title": "Insurance Policy Update Service",
        "purpose": {
          "business_goal": [
            "Update policy records in the KSDSPOLY file based on policy type",
            "Support multiple insurance product types with specialized data fields"
          ],
          "implementation": "Reads a policy record from KSDSPOLY file, updates it with data from the COMMAREA, and writes it back to the file"
        },
        "program_type": {
          "category": "business",
          "function": "Data update service"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              },
              {
                "architecture": "Business Architecture",
                "layer": "Business Processes"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Policy Type Evaluation",
                "description": "Determines policy type (Commercial, Endowment, House, Motor) and processes data accordingly",
                "shortName": "PolicyTypeEval",
                "codeBlocks": "MAINLINE Section - Evaluate WF-Request-ID block"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "40%",
            "evidence": [
              "Evaluate WF-Request-ID statement that processes different policy types (C, E, H, M)",
              "Business entity mapping based on policy type",
              "Transformation of data from COMMAREA to working storage based on business rules"
            ],
            "architectural_layer_semantic_keywords": [
              "evaluate",
              "process",
              "transform",
              "policy type"
            ]
          },
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "File Operations",
                "description": "Reads and updates policy records in the KSDSPOLY file",
                "shortName": "FileOps",
                "codeBlocks": "CICS Read/ReWrite operations"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "35%",
            "evidence": [
              "EXEC CICS Read File('KSDSPOLY') with UPDATE option",
              "EXEC CICS ReWrite File('KSDSPOLY') operation",
              "File key construction using WF-Policy-Key"
            ],
            "architectural_layer_semantic_keywords": [
              "read",
              "rewrite",
              "file",
              "update"
            ]
          },
          {
            "traditionalLayer": "Data Entities",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Entities"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Hierarchical Data Model"
            ],
            "elements": [
              {
                "name": "Policy Data Structures",
                "description": "Data structures representing different policy types",
                "shortName": "PolicyData",
                "codeBlocks": "WF-Policy-Info and CA-POLICY-REQUEST structures"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "15%",
            "evidence": [
              "WF-Policy-Info structure with policy key and type-specific data",
              "Redefined policy data structures for different policy types (Commercial, Endowment, House, Motor)",
              "CA-POLICY-REQUEST structure in LINKAGE SECTION"
            ],
            "architectural_layer_semantic_keywords": [
              "structure",
              "redefines",
              "policy data"
            ]
          },
          {
            "traditionalLayer": "Platform",
            "togaf": [
              {
                "architecture": "Technology Architecture",
                "layer": "Technology Components"
              }
            ],
            "modernLayer": "Infrastructure",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Error Handling",
                "description": "Logs errors and terminates processing when file operations fail",
                "shortName": "ErrorHandler",
                "codeBlocks": "WRITE-ERROR-MESSAGE section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "10%",
            "evidence": [
              "EXEC CICS ABEND statements",
              "Error logging via LGSTSQ program",
              "Response code handling for CICS operations"
            ],
            "architectural_layer_semantic_keywords": [
              "error",
              "abend",
              "logging"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Insurance Policy",
            "sources": [
              {
                "type": "file",
                "source_name": "KSDSPOLY",
                "reference": "Policy records storage"
              },
              {
                "type": "record",
                "source_name": "WF-Policy-Info",
                "reference": "Working storage structure for policy data"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read",
              "update"
            ],
            "attributes": [
              "WF-Policy-Key (Request-ID, Customer-Num, Policy-Num)",
              "WF-Policy-Data (type-specific data)"
            ],
            "business_context": "Core business entity representing insurance contracts with customers",
            "original_name": "Policy"
          },
          {
            "name": "Commercial Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "WF-C-Policy-Data",
                "reference": "Commercial policy specific data"
              },
              {
                "type": "record",
                "source_name": "CA-COMMERCIAL",
                "reference": "Commercial policy data in COMMAREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "update"
            ],
            "attributes": [
              "Postcode",
              "Status",
              "Customer"
            ],
            "business_context": "Business insurance policy type"
          },
          {
            "name": "Endowment Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "WF-E-Policy-Data",
                "reference": "Endowment policy specific data"
              },
              {
                "type": "record",
                "source_name": "CA-ENDOWMENT",
                "reference": "Endowment policy data in COMMAREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "update"
            ],
            "attributes": [
              "With-Profits indicator",
              "Equities indicator",
              "Managed-Fund indicator",
              "Fund-Name",
              "Life-Assured"
            ],
            "business_context": "Life insurance policy with investment component"
          },
          {
            "name": "House Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "WF-H-Policy-Data",
                "reference": "House policy specific data"
              },
              {
                "type": "record",
                "source_name": "CA-HOUSE",
                "reference": "House policy data in COMMAREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "update"
            ],
            "attributes": [
              "Property-Type",
              "Bedrooms",
              "Value",
              "Postcode",
              "House-Name"
            ],
            "business_context": "Home insurance policy"
          },
          {
            "name": "Motor Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "WF-M-Policy-Data",
                "reference": "Motor policy specific data"
              },
              {
                "type": "record",
                "source_name": "CA-MOTOR",
                "reference": "Motor policy data in COMMAREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "update"
            ],
            "attributes": [
              "Make",
              "Model",
              "Value",
              "Registration Number"
            ],
            "business_context": "Vehicle insurance policy"
          },
          {
            "name": "Customer",
            "sources": [
              {
                "type": "variable",
                "source_name": "CA-CUSTOMER-NUM",
                "reference": "Customer identifier in COMMAREA"
              },
              {
                "type": "variable",
                "source_name": "WF-Customer-Num",
                "reference": "Customer number in policy key"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [],
            "attributes": [
              "Customer Number"
            ],
            "business_context": "Policy owner, referenced as part of the policy key"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "POLICY_TYPE_CODE",
            "source": "Used to determine policy type in the evaluate statement",
            "related_entities": [
              "Insurance Policy",
              "Commercial Policy",
              "Endowment Policy",
              "House Policy",
              "Motor Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_IDENTIFIER",
            "source": "Used as part of the key to access policy records",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_IDENTIFIER",
            "source": "Used as part of the key to access policy records and in error reporting",
            "related_entities": [
              "Customer",
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "WF-Policy-Key",
            "semantic_type": "COMPOSITE_KEY",
            "source": "Composite key used to access policy records in the file",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "WF-Request-ID",
            "semantic_type": "POLICY_TYPE_INDICATOR",
            "source": "Single character code extracted from CA-REQUEST-ID to identify policy type (C, E, H, M)",
            "related_entities": [
              "Insurance Policy",
              "Commercial Policy",
              "Endowment Policy",
              "House Policy",
              "Motor Policy"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Policy updates must be performed based on policy type",
            "implementation": "The program evaluates the policy type (C, E, H, M) and maps specific fields from COMMAREA to working storage accordingly"
          },
          {
            "rule": "Policy records must be read with UPDATE option before being modified",
            "implementation": "The program reads the policy record with UPDATE option before rewriting it"
          },
          {
            "rule": "Policy key consists of request ID, customer number, and policy number",
            "implementation": "WF-Policy-Key is constructed using these three components for file access"
          },
          {
            "rule": "Errors during file operations must be logged and processing terminated",
            "implementation": "WRITE-ERROR-MESSAGE section logs errors and abends with appropriate codes"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "file_access",
              "target": "KSDSPOLY",
              "data": "Policy records"
            }
          ],
          "data_sources": [
            "COMMAREA input parameters",
            "KSDSPOLY file"
          ],
          "data_destinations": [
            "KSDSPOLY file",
            "LGSTSQ error log"
          ]
        },
        "features": [
          {
            "feature": "Policy Update Service",
            "rules": [
              {
                "rule": "Update policy based on policy type",
                "scenario": "Update existing policy information in the system",
                "steps": [
                  {
                    "step": "Extract policy type from request ID",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Map policy data based on policy type",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Based on policy type (C, E, H, M)",
                    "exceptions": "None"
                  },
                  {
                    "step": "Read existing policy record",
                    "external": true,
                    "step_type": "read",
                    "objects": [
                      {
                        "name": "KSDSPOLY",
                        "object_type": "file",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "File access error (return code 81)"
                  },
                  {
                    "step": "Update policy record",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "KSDSPOLY",
                        "object_type": "file",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "File update error (return code 82)"
                  },
                  {
                    "step": "Log errors if they occur",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "When errors occur"
                      }
                    ],
                    "when": "When file operations fail",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Commercial Policy": "Business insurance policy (type C)",
          "Endowment Policy": "Life insurance policy with investment component (type E)",
          "House Policy": "Home insurance policy (type H)",
          "Motor Policy": "Vehicle insurance policy (type M)",
          "Policy Key": "Composite identifier consisting of policy type, customer number, and policy number"
        },
        "program_context": {
          "program_name": "LGUPVS01",
          "includes": [
            "LGCMAREA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "CICS": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "LINKAGE SECTION",
            "PIC (Picture) clauses for data definition",
            "Hierarchical data structures with 01, 03, 05 level numbers",
            "REDEFINES clause for data redefinition",
            "COMP (Computational) data storage",
            "CICS transaction processing indicators",
            "Fixed-format source code layout",
            "Verbose division and section structure",
            "Explicit data type declarations",
            "Large record/commarea structures"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Policy Management"
      }
    },
    "LGUPOL01": {
      "name": "LGUPOL01",
      "calls": [
        "IND-BROKERSREF",
        "IND-BROKERID",
        "LGSTSQ",
        "IND-PAYMENT"
      ],
      "called_by": [
        "LGTESTP3",
        "LGTESTP1",
        "LGTESTP2"
      ],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [
        "LGCMAREA"
      ],
      "data_structures": {},
      "community": "Community 14",
      "program_language": "COBOL",
      "understanding": {
        "comments": "This program processes insurance policy updates by validating requests and interfacing with a database program to perform the actual updates.",
        "title": "Insurance Policy Update Processing System",
        "purpose": {
          "business_goal": [
            "Update insurance policy information in the database",
            "Validate policy update requests"
          ],
          "implementation": "The program receives policy update requests through a COMMAREA, validates the request type and data length, then links to a database program (LGUPDB01) to perform the actual update"
        },
        "program_type": {
          "category": "business",
          "function": "Policy data maintenance"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Policy Update Request Validation",
                "description": "Validates policy update requests by type and ensures sufficient data is provided",
                "shortName": "RequestValidation",
                "codeBlocks": "MAINLINE section, EVALUATE CA-REQUEST-ID block"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "30%",
            "evidence": [
              "EVALUATE CA-REQUEST-ID to determine policy type (endowment, house, motor)",
              "Validation of COMMAREA length against required length for each policy type",
              "Setting of return codes based on validation results (00=success, 98=insufficient length, 99=invalid request)"
            ],
            "architectural_layer_semantic_keywords": [
              "validate",
              "process",
              "evaluate"
            ]
          },
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Policy Database Interface",
                "description": "Links to external database program to perform policy updates",
                "shortName": "DBInterface",
                "codeBlocks": "UPDATE-POLICY-DB2-INFO section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "10%",
            "evidence": [
              "EXEC CICS LINK Program(LGUPDB01) to connect to database program",
              "Passing of the entire COMMAREA to the database program"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "database",
              "DB2"
            ]
          },
          {
            "traditionalLayer": "Platform",
            "togaf": [
              {
                "architecture": "Technology Architecture",
                "layer": "Technology Components"
              }
            ],
            "modernLayer": "Infrastructure",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Error Handling and Logging",
                "description": "Formats and logs error messages using system utilities",
                "shortName": "ErrorLogging",
                "codeBlocks": "WRITE-ERROR-MESSAGE section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "EXEC CICS ASKTIME and FORMATTIME for timestamp generation",
              "EXEC CICS LINK to LGSTSQ logging utility",
              "Formatting of error messages with transaction details"
            ],
            "architectural_layer_semantic_keywords": [
              "error",
              "logging",
              "CICS"
            ]
          },
          {
            "traditionalLayer": "Data Entities",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Entities"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Hierarchical Data Model"
            ],
            "elements": [
              {
                "name": "Policy Data Structures",
                "description": "Data structures representing different insurance policy types",
                "shortName": "PolicyEntities",
                "codeBlocks": "LINKAGE SECTION, DFHCOMMAREA definition"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "40%",
            "evidence": [
              "CA-POLICY-COMMON structure with common policy fields",
              "CA-ENDOWMENT, CA-HOUSE, CA-MOTOR policy type-specific structures",
              "CA-POLICY-REQUEST structure for policy update operations"
            ],
            "architectural_layer_semantic_keywords": [
              "structure",
              "entity",
              "data"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Insurance Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-POLICY-REQUEST",
                "reference": "Policy data structure in DFHCOMMAREA"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "update"
            ],
            "attributes": [
              "CA-POLICY-NUM",
              "CA-ISSUE-DATE",
              "CA-EXPIRY-DATE",
              "CA-LASTCHANGED",
              "CA-BROKERID",
              "CA-BROKERSREF",
              "CA-PAYMENT"
            ],
            "business_context": "Core business entity representing different types of insurance policies that can be updated through this program"
          },
          {
            "name": "Endowment Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-ENDOWMENT",
                "reference": "Endowment policy specific data in CA-POLICY-SPECIFIC"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "update"
            ],
            "attributes": [
              "CA-E-WITH-PROFITS",
              "CA-E-EQUITIES",
              "CA-E-MANAGED-FUND",
              "CA-E-FUND-NAME",
              "CA-E-TERM",
              "CA-E-SUM-ASSURED",
              "CA-E-LIFE-ASSURED"
            ],
            "business_context": "Specific type of insurance policy for investment and life coverage"
          },
          {
            "name": "House Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-HOUSE",
                "reference": "House policy specific data in CA-POLICY-SPECIFIC"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "update"
            ],
            "attributes": [
              "CA-H-PROPERTY-TYPE",
              "CA-H-BEDROOMS",
              "CA-H-VALUE",
              "CA-H-HOUSE-NAME",
              "CA-H-HOUSE-NUMBER",
              "CA-H-POSTCODE"
            ],
            "business_context": "Specific type of insurance policy for residential property coverage"
          },
          {
            "name": "Motor Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-MOTOR",
                "reference": "Motor policy specific data in CA-POLICY-SPECIFIC"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "update"
            ],
            "attributes": [
              "CA-M-MAKE",
              "CA-M-MODEL",
              "CA-M-VALUE",
              "CA-M-REGNUMBER",
              "CA-M-COLOUR",
              "CA-M-CC",
              "CA-M-MANUFACTURED",
              "CA-M-PREMIUM",
              "CA-M-ACCIDENTS"
            ],
            "business_context": "Specific type of insurance policy for motor vehicle coverage"
          },
          {
            "name": "Customer",
            "sources": [
              {
                "type": "variable",
                "source_name": "CA-CUSTOMER-NUM",
                "reference": "Customer identifier in DFHCOMMAREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [],
            "attributes": [
              "CA-CUSTOMER-NUM"
            ],
            "business_context": "Entity that owns insurance policies, referenced by customer number in policy updates"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "OPERATION_CODE",
            "source": "Used in EVALUATE statement to determine policy type and operation",
            "related_entities": [
              "Insurance Policy",
              "Endowment Policy",
              "House Policy",
              "Motor Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Set to indicate success or specific error conditions",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used in error messages and passed to database program",
            "related_entities": [
              "Customer",
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_ID",
            "source": "Used in error messages and passed to database program",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-ISSUE-DATE",
            "semantic_type": "POLICY_ISSUE_DATE",
            "source": "Part of common policy data structure",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-EXPIRY-DATE",
            "semantic_type": "POLICY_EXPIRY_DATE",
            "source": "Part of common policy data structure",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-BROKERID",
            "semantic_type": "BROKER_ID",
            "source": "Part of common policy data structure",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PAYMENT",
            "semantic_type": "PAYMENT_AMOUNT",
            "source": "Part of common policy data structure",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-M-CC",
            "semantic_type": "ENGINE_CAPACITY",
            "source": "Field in motor policy structure, context indicates cubic capacity",
            "related_entities": [
              "Motor Policy"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Policy update requests must specify a valid policy type",
            "implementation": "EVALUATE CA-REQUEST-ID with specific cases for '01UEND', '01UHOU', '01UMOT', returning error code '99' for invalid requests"
          },
          {
            "rule": "Policy update requests must provide sufficient data based on policy type",
            "implementation": "Checks EIBCALEN against required length for each policy type (WS-REQUIRED-CA-LEN), returns error code '98' if insufficient"
          },
          {
            "rule": "All policy updates must include common policy information",
            "implementation": "CA-POLICY-COMMON structure is required for all policy types and passed to the database program"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "db",
              "target": "LGUPDB01",
              "data": "Policy update information"
            }
          ],
          "data_sources": [
            "DFHCOMMAREA from calling program"
          ],
          "data_destinations": [
            "LGUPDB01 database program",
            "LGSTSQ error logging utility"
          ]
        },
        "features": [
          {
            "feature": "Insurance Policy Update",
            "rules": [
              {
                "rule": "Policy update validation and processing",
                "scenario": "Update an existing insurance policy in the system",
                "steps": [
                  {
                    "step": "Validate policy update request type",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "Invalid request type returns code '99'"
                  },
                  {
                    "step": "Validate sufficient data provided for policy type",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Valid request type",
                    "exceptions": "Insufficient data returns code '98'"
                  },
                  {
                    "step": "Update policy in database",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGUPDB01",
                        "object_type": "program",
                        "when": "Valid request with sufficient data"
                      }
                    ],
                    "when": "Request passes validation",
                    "exceptions": "Database errors handled by LGUPDB01"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Endowment": "Investment-based life insurance policy",
          "House": "Residential property insurance policy",
          "Motor": "Vehicle insurance policy",
          "Policy": "Insurance contract",
          "Broker": "Insurance intermediary who sells policies"
        },
        "program_context": {
          "program_name": "LGUPOL01",
          "includes": [
            "LGCMAREA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Structured Programming"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "Unfinished Code": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "LINKAGE SECTION",
            "PIC data type declarations",
            "REDEFINES clause",
            "COMP (computational) data storage",
            "Hierarchical data structure with 01, 03, 05 level numbers",
            "Fixed-format source code layout",
            "Verbose division and section structure",
            "Strong typing with explicit length and format specifications"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Policy Servicing"
      }
    },
    "LGACVS01": {
      "name": "LGACVS01",
      "calls": [
        "LGSTSQ"
      ],
      "called_by": [
        "OLDACDB1",
        "LGACDB01"
      ],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [
        "LGCMAREA"
      ],
      "data_structures": {},
      "community": "Community 5",
      "program_language": "COBOL",
      "understanding": {
        "comments": "Program that writes customer records to the KSDSCUST file and handles error logging",
        "title": "Customer Record Persistence Service",
        "purpose": {
          "business_goal": [
            "Write customer records to the KSDSCUST file",
            "Handle error logging for failed write operations"
          ],
          "implementation": "The program writes customer data from the COMMAREA to the KSDSCUST file using CICS file control commands and logs errors via LGSTSQ when write operations fail"
        },
        "program_type": {
          "category": "business",
          "function": "Data persistence"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Entities",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Entities"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "KSDSCUST File Access",
                "description": "Writes customer records to the KSDSCUST file",
                "shortName": "KSDSCUST",
                "codeBlocks": "EXEC CICS Write File('KSDSCUST')"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "70%",
            "evidence": [
              "EXEC CICS Write File('KSDSCUST') From(CA-Customer-Num) Length(WS-Commarea-Len) Ridfld(CA-Customer-Num) KeyLength(10)"
            ],
            "architectural_layer_semantic_keywords": [
              "write",
              "file",
              "ridfld",
              "keylength"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Messaging"
            ],
            "elements": [
              {
                "name": "Error Logging Service",
                "description": "Logs error messages to the system log via LGSTSQ program",
                "shortName": "LGSTSQ",
                "codeBlocks": "EXEC CICS LINK PROGRAM('LGSTSQ')"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "30%",
            "evidence": [
              "EXEC CICS LINK PROGRAM('LGSTSQ') COMMAREA(ERROR-MSG) LENGTH(LENGTH OF ERROR-MSG)"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "program",
              "commarea",
              "error"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Customer",
            "sources": [
              {
                "type": "file",
                "source_name": "KSDSCUST",
                "reference": "EXEC CICS Write File('KSDSCUST')"
              },
              {
                "type": "record",
                "source_name": "DFHCOMMAREA",
                "reference": "CA-CUSTOMER-NUM, CA-FIRST-NAME, CA-LAST-NAME, etc."
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "CA-CUSTOMER-NUM",
              "CA-FIRST-NAME",
              "CA-LAST-NAME",
              "CA-DOB",
              "CA-HOUSE-NAME",
              "CA-HOUSE-NUM",
              "CA-POSTCODE",
              "CA-NUM-POLICIES",
              "CA-PHONE-MOBILE",
              "CA-PHONE-HOME",
              "CA-EMAIL-ADDRESS"
            ],
            "business_context": "Core business entity representing customer information that needs to be persisted to the KSDSCUST file"
          },
          {
            "name": "Error Log",
            "sources": [
              {
                "type": "integration",
                "source_name": "LGSTSQ",
                "reference": "EXEC CICS LINK PROGRAM('LGSTSQ')"
              },
              {
                "type": "record",
                "source_name": "ERROR-MSG",
                "reference": "ERROR-MSG structure used for error logging"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "EM-DATE",
              "EM-TIME",
              "EM-CUSNUM",
              "EM-RESPRC",
              "EM-RESP2RC"
            ],
            "business_context": "Supporting entity for error tracking and troubleshooting when customer record creation fails"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as key field (Ridfld) in KSDSCUST file write operation",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Set to '80' when an error occurs during file write",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-FIRST-NAME",
            "semantic_type": "PERSON_FIRST_NAME",
            "source": "Field name in customer record structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-LAST-NAME",
            "semantic_type": "PERSON_LAST_NAME",
            "source": "Field name in customer record structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-DOB",
            "semantic_type": "PERSON_DATE_OF_BIRTH",
            "source": "Field name in customer record structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POSTCODE",
            "semantic_type": "ADDRESS_POSTAL_CODE",
            "source": "Field name in customer record structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-NUM-POLICIES",
            "semantic_type": "POLICY_COUNT",
            "source": "Field name in customer record structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-MOBILE",
            "semantic_type": "CONTACT_MOBILE_PHONE",
            "source": "Field name in customer record structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-HOME",
            "semantic_type": "CONTACT_HOME_PHONE",
            "source": "Field name in customer record structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-EMAIL-ADDRESS",
            "semantic_type": "CONTACT_EMAIL",
            "source": "Field name in customer record structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Customer records must be uniquely identified by customer number",
            "implementation": "CA-CUSTOMER-NUM is used as the key field (Ridfld) when writing to the KSDSCUST file"
          },
          {
            "rule": "Failed customer record writes must be logged with detailed error information",
            "implementation": "WRITE-ERROR-MESSAGE section formats error details including timestamp, customer number, and response codes before sending to LGSTSQ logging program"
          },
          {
            "rule": "System must terminate with a specific error code when customer record write fails",
            "implementation": "Program abends with code 'LGV0' after logging the error details"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "file_access",
              "target": "KSDSCUST",
              "data": "Customer record"
            },
            {
              "type": "messaging",
              "target": "LGSTSQ",
              "data": "Error message"
            }
          ],
          "data_sources": [
            "DFHCOMMAREA (input from calling program)"
          ],
          "data_destinations": [
            "KSDSCUST file",
            "System log via LGSTSQ"
          ]
        },
        "features": [
          {
            "feature": "Customer Record Persistence",
            "rules": [
              {
                "rule": "Write customer data to persistent storage",
                "scenario": "Customer data needs to be stored in the system",
                "steps": [
                  {
                    "step": "Write customer record to KSDSCUST file",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "KSDSCUST",
                        "object_type": "file",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "CICS file control errors"
                  },
                  {
                    "step": "Log error details if write operation fails",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "When write operation fails"
                      }
                    ],
                    "when": "WS-RESP Not = DFHRESP(NORMAL)",
                    "exceptions": "None"
                  },
                  {
                    "step": "Terminate with error code if write operation fails",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "CICS ABEND",
                        "object_type": "command",
                        "when": "When write operation fails"
                      }
                    ],
                    "when": "WS-RESP Not = DFHRESP(NORMAL)",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Customer": "A person who has insurance policies with the company",
          "Customer Number": "Unique identifier for a customer",
          "KSDSCUST": "Customer master file containing customer records"
        },
        "program_context": {
          "program_name": "LGACVS01",
          "includes": [
            "LGCMAREA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.9,
            "Mainframe Dialect": 0.1
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "Enterprise COBOL",
            "IBM COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "LINKAGE SECTION",
            "PIC (Picture) clauses",
            "Hierarchical data structures",
            "REDEFINES clause",
            "Mainframe/CICS style record definitions",
            "Fixed-width character fields",
            "Numeric computational fields",
            "Explicit division and section structure"
          ]
        },
        "business_domain": "Party Reference",
        "service_domain": "Party Reference Data Directory"
      }
    },
    "LGICDB01": {
      "name": "LGICDB01",
      "calls": [
        "LGSTSQ"
      ],
      "called_by": [
        "LGICUS01"
      ],
      "uses_tables": [
        {
          "name": "CUSTOMER",
          "persistent_perations": [
            "read"
          ]
        }
      ],
      "uses_screens": [],
      "includes": [
        "LGPOLICY",
        "LGCMAREA",
        "SQLCA"
      ],
      "data_structures": {},
      "community": "Community 7",
      "program_language": "COBOL",
      "understanding": {
        "comments": "Customer information retrieval service that provides a standardized interface for accessing customer demographic and contact details from the CUSTOMER database table",
        "title": "Customer Information Database Access Module",
        "purpose": {
          "business_goal": [
            "Retrieve customer information from the CUSTOMER database table",
            "Support customer information lookup operations"
          ],
          "implementation": "Uses SQL to query the CUSTOMER table based on a customer number and returns the customer details to the calling program"
        },
        "program_type": {
          "category": "business",
          "function": "Database access"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Relational Databases"
            ],
            "elements": [
              {
                "name": "GET-CUSTOMER-INFO",
                "description": "Database access routine that retrieves customer information from the CUSTOMER table",
                "shortName": "GET-CUST",
                "codeBlocks": "GET-CUSTOMER-INFO section (lines 474-503)"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "70%",
            "evidence": [
              "EXEC SQL SELECT statement to retrieve customer data",
              "Database table access (FROM CUSTOMER)",
              "SQL error handling with SQLCODE evaluation",
              "Data mapping between database fields and COMMAREA output fields"
            ],
            "architectural_layer_semantic_keywords": [
              "select",
              "from",
              "database",
              "SQL",
              "retrieve"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "MAINLINE",
                "description": "Main control flow that validates input parameters and orchestrates processing",
                "shortName": "MAIN",
                "codeBlocks": "MAINLINE section (lines 430-465)"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "Input validation logic for COMMAREA parameters",
              "Parameter length validation (EIBCALEN checks)",
              "Orchestration of the database access operation",
              "Setting of return codes based on processing results"
            ],
            "architectural_layer_semantic_keywords": [
              "validate",
              "process",
              "control flow",
              "return code"
            ]
          },
          {
            "traditionalLayer": "Platform",
            "togaf": [
              {
                "architecture": "Technology Architecture",
                "layer": "Technology Components"
              }
            ],
            "modernLayer": "Infrastructure",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "WRITE-ERROR-MESSAGE",
                "description": "Error handling routine that formats and logs error messages",
                "shortName": "ERR-LOG",
                "codeBlocks": "WRITE-ERROR-MESSAGE section (lines 510-538)"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "10%",
            "evidence": [
              "Error message formatting with timestamp",
              "CICS LINK to external logging program (LGSTSQ)",
              "System time retrieval with CICS ASKTIME and FORMATTIME",
              "SQL error code handling"
            ],
            "architectural_layer_semantic_keywords": [
              "error",
              "log",
              "message",
              "CICS"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Customer",
            "sources": [
              {
                "type": "table",
                "source_name": "CUSTOMER",
                "reference": "Database table accessed in GET-CUSTOMER-INFO section"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CUSTOMERNUMBER",
              "FIRSTNAME",
              "LASTNAME",
              "DATEOFBIRTH",
              "HOUSENAME",
              "HOUSENUMBER",
              "POSTCODE",
              "PHONEMOBILE",
              "PHONEHOME",
              "EMAILADDRESS"
            ],
            "business_context": "Core entity representing customer demographic and contact information in the system"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as lookup key for customer in database query",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Set based on operation results to indicate success/failure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-FIRST-NAME",
            "semantic_type": "PERSON_FIRST_NAME",
            "source": "Mapped from database FIRSTNAME field",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-LAST-NAME",
            "semantic_type": "PERSON_LAST_NAME",
            "source": "Mapped from database LASTNAME field",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-DOB",
            "semantic_type": "PERSON_DATE_OF_BIRTH",
            "source": "Mapped from database DATEOFBIRTH field",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-HOUSE-NAME",
            "semantic_type": "ADDRESS_HOUSE_NAME",
            "source": "Mapped from database HOUSENAME field",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-HOUSE-NUM",
            "semantic_type": "ADDRESS_HOUSE_NUMBER",
            "source": "Mapped from database HOUSENUMBER field",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POSTCODE",
            "semantic_type": "ADDRESS_POSTAL_CODE",
            "source": "Mapped from database POSTCODE field",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-MOBILE",
            "semantic_type": "CONTACT_PHONE_MOBILE",
            "source": "Mapped from database PHONEMOBILE field",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-HOME",
            "semantic_type": "CONTACT_PHONE_HOME",
            "source": "Mapped from database PHONEHOME field",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-EMAIL-ADDRESS",
            "semantic_type": "CONTACT_EMAIL",
            "source": "Mapped from database EMAILADDRESS field",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Customer lookup requires valid customer number",
            "implementation": "Program validates that COMMAREA contains a customer number before attempting database lookup"
          },
          {
            "rule": "Return specific status codes based on lookup results",
            "implementation": "Program sets CA-RETURN-CODE to '00' for success, '01' for customer not found, '90' for database error, '98' for invalid COMMAREA length"
          },
          {
            "rule": "COMMAREA must be of sufficient length to hold customer data",
            "implementation": "Program validates EIBCALEN against required length (WS-REQUIRED-CA-LEN) before processing"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "inquiry",
          "integration_approaches": [
            {
              "type": "db",
              "target": "CUSTOMER table",
              "data": "customer demographic and contact information"
            }
          ],
          "data_sources": [
            "CUSTOMER database table"
          ],
          "data_destinations": [
            "DFHCOMMAREA (output to calling program)",
            "LGSTSQ (error logging)"
          ]
        },
        "features": [
          {
            "feature": "Customer Information Lookup",
            "rules": [
              {
                "rule": "Retrieve customer details by customer number",
                "scenario": "External program needs to access customer information",
                "steps": [
                  {
                    "step": "Validate COMMAREA length",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "COMMAREA too short (sets return code 98)"
                  },
                  {
                    "step": "Query customer information from database",
                    "external": false,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "CUSTOMER",
                        "object_type": "table",
                        "when": "Always"
                      }
                    ],
                    "when": "Valid COMMAREA received",
                    "exceptions": "SQL error (sets return code 90), Customer not found (sets return code 01)"
                  },
                  {
                    "step": "Log errors if they occur",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "Error occurs"
                      }
                    ],
                    "when": "SQL error or invalid COMMAREA",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Customer": "Person with demographic and contact information stored in the system",
          "COMMAREA": "Communication area used to pass data between programs",
          "Return Code": "Status indicator for the operation result"
        },
        "program_context": {
          "program_name": "LGICDB01",
          "includes": [
            "LGPOLICY",
            "LGCMAREA",
            "SQLCA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Structured Programming",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 98,
            "SQL": 2
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.95,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PIC (Picture) clauses for data definition",
            "Hierarchical data structure with 01, 03 level numbers",
            "COMP (Computational) storage optimizations",
            "Fixed-format source code layout",
            "Verbose declarative programming style",
            "Database interaction hints (DB2 references)",
            "Enterprise business data record structures"
          ]
        },
        "business_domain": "Party Reference",
        "service_domain": "Party Reference Data Directory"
      }
    },
    "LGAPVS01": {
      "name": "LGAPVS01",
      "calls": [
        "LGSTSQ"
      ],
      "called_by": [],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [
        "LGCMAREA"
      ],
      "data_structures": {},
      "community": "Community 5",
      "program_language": "COBOL",
      "understanding": {
        "comments": "This program persists insurance policy data to the KSDSPOLY file, supporting multiple policy types with specialized data fields for each type",
        "title": "Insurance Policy Record Writer for KSDSPOLY File",
        "purpose": {
          "business_goal": [
            "Store policy information in the KSDSPOLY file",
            "Support multiple policy types (Commercial, Endowment, House, Motor)"
          ],
          "implementation": "Extracts policy data from the COMMAREA, formats it into a record structure, and writes it to the KSDSPOLY file"
        },
        "program_type": {
          "category": "business",
          "function": "Data persistence"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Entities",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Entities"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Hierarchical Data Model"
            ],
            "elements": [
              {
                "name": "Policy Record Structure",
                "description": "Defines the structure of policy records stored in the KSDSPOLY file",
                "shortName": "WF-Policy-Info",
                "codeBlocks": "WF-Policy-Info record definition with policy key and type-specific data fields"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "30%",
            "evidence": [
              "WF-Policy-Info record structure with key and policy type-specific data fields",
              "Different policy type structures (WF-C-Policy-Data, WF-E-Policy-Data, WF-H-Policy-Data, WF-M-Policy-Data)"
            ],
            "architectural_layer_semantic_keywords": [
              "record structure",
              "data fields",
              "redefines"
            ]
          },
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Policy File Writer",
                "description": "Writes formatted policy records to the KSDSPOLY file",
                "shortName": "KSDSPOLY-Write",
                "codeBlocks": "EXEC CICS Write File operation in MAINLINE section"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "40%",
            "evidence": [
              "EXEC CICS Write File('KSDSPOLY') operation to persist policy data",
              "Error handling for file write operations",
              "Record key construction for file access"
            ],
            "architectural_layer_semantic_keywords": [
              "write file",
              "ridfld",
              "keylength"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              },
              {
                "architecture": "Business Architecture",
                "layer": "Business Processes"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Policy Data Transformation",
                "description": "Transforms policy data from COMMAREA to file record format based on policy type",
                "shortName": "PolicyTransform",
                "codeBlocks": "MAINLINE section with Evaluate logic for different policy types"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "30%",
            "evidence": [
              "Evaluate WF-Request-ID logic to process different policy types (C, E, H, M)",
              "Business entity transformation from COMMAREA format to file record format",
              "Policy-specific field mapping based on policy type"
            ],
            "architectural_layer_semantic_keywords": [
              "transform",
              "process",
              "policy type"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Insurance Policy",
            "sources": [
              {
                "type": "file",
                "source_name": "KSDSPOLY",
                "reference": "Persistent storage for policy records"
              },
              {
                "type": "record",
                "source_name": "WF-Policy-Info",
                "reference": "Record structure for policy data to be written to file"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "Policy Number",
              "Customer Number",
              "Policy Type",
              "Policy-specific data"
            ],
            "business_context": "Core business entity representing insurance contracts of different types (Commercial, Endowment, House, Motor)",
            "original_name": "Policy"
          },
          {
            "name": "Commercial Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "WF-C-Policy-Data",
                "reference": "Commercial policy specific data fields"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "Postcode",
              "Status",
              "Customer"
            ],
            "business_context": "Specialized policy type for commercial insurance"
          },
          {
            "name": "Endowment Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "WF-E-Policy-Data",
                "reference": "Endowment policy specific data fields"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "With Profits",
              "Equities",
              "Managed Fund",
              "Fund Name",
              "Life Assured"
            ],
            "business_context": "Specialized policy type for life insurance with investment components"
          },
          {
            "name": "House Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "WF-H-Policy-Data",
                "reference": "House policy specific data fields"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "Property Type",
              "Bedrooms",
              "Value",
              "Postcode",
              "House Name"
            ],
            "business_context": "Specialized policy type for home/property insurance"
          },
          {
            "name": "Motor Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "WF-M-Policy-Data",
                "reference": "Motor policy specific data fields"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "Make",
              "Model",
              "Value",
              "Registration Number"
            ],
            "business_context": "Specialized policy type for automobile insurance"
          },
          {
            "name": "Error Log",
            "sources": [
              {
                "type": "other",
                "source_name": "LGSTSQ",
                "reference": "Error logging utility program"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "Date",
              "Time",
              "Customer Number",
              "Response Code",
              "Response2 Code"
            ],
            "business_context": "Operational support for tracking errors in policy storage operations"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "POLICY_TYPE_INDICATOR",
            "source": "Used in EVALUATE statement to determine policy type processing",
            "related_entities": [
              "Insurance Policy",
              "Commercial Policy",
              "Endowment Policy",
              "House Policy",
              "Motor Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_IDENTIFIER",
            "source": "Used as part of the record key for file storage",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_IDENTIFIER",
            "source": "Used as part of the record key and for error logging",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "WF-Policy-Key",
            "semantic_type": "COMPOSITE_KEY",
            "source": "Used as the RIDFLD for file write operation",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-Postcode",
            "semantic_type": "GEOGRAPHIC_IDENTIFIER",
            "source": "Postal code for commercial property location",
            "related_entities": [
              "Commercial Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-Status",
            "semantic_type": "STATUS_CODE",
            "source": "Status code for commercial policy",
            "related_entities": [
              "Commercial Policy"
            ],
            "confidence": "medium"
          },
          {
            "parameter": "CA-E-WITH-PROFITS",
            "semantic_type": "INVESTMENT_OPTION_INDICATOR",
            "source": "Flag indicating with-profits investment option",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-H-VALUE",
            "semantic_type": "PROPERTY_VALUE",
            "source": "Monetary value of insured property",
            "related_entities": [
              "House Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-M-REGNUMBER",
            "semantic_type": "VEHICLE_REGISTRATION",
            "source": "Vehicle registration number for motor policy",
            "related_entities": [
              "Motor Policy"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Policy data must be stored based on policy type",
            "implementation": "EVALUATE statement checks WF-Request-ID to determine which policy-specific fields to extract and store"
          },
          {
            "rule": "Policy records require a composite key for storage",
            "implementation": "WF-Policy-Key combines policy type, customer number, and policy number for unique identification"
          },
          {
            "rule": "Failed policy storage operations must be logged",
            "implementation": "Error handling routine logs details to LGSTSQ when file write operation fails"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "file_access",
              "target": "KSDSPOLY",
              "data": "Policy record"
            },
            {
              "type": "messaging",
              "target": "LGSTSQ",
              "data": "Error log"
            }
          ],
          "data_sources": [
            "DFHCOMMAREA"
          ],
          "data_destinations": [
            "KSDSPOLY file",
            "LGSTSQ error log"
          ]
        },
        "features": [
          {
            "feature": "Policy Data Persistence",
            "rules": [
              {
                "rule": "Store policy data in KSDSPOLY file",
                "scenario": "Policy data is received in COMMAREA and needs to be persisted",
                "steps": [
                  {
                    "step": "Extract policy type from request ID",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Extract policy key information",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Extract policy-specific data based on policy type",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Based on policy type (C, E, H, M)",
                    "exceptions": "Unknown policy type"
                  },
                  {
                    "step": "Write policy record to KSDSPOLY file",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "KSDSPOLY",
                        "object_type": "file",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "File write error"
                  },
                  {
                    "step": "Log error if file write fails",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "File write error"
                      }
                    ],
                    "when": "File write error",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Commercial Policy": "Business insurance policy type (identified by 'C')",
          "Endowment Policy": "Life insurance policy with investment component (identified by 'E')",
          "House Policy": "Property insurance policy (identified by 'H')",
          "Motor Policy": "Automobile insurance policy (identified by 'M')",
          "Policy Number": "Unique identifier for an insurance policy",
          "Customer Number": "Unique identifier for a customer"
        },
        "program_context": {
          "program_name": "LGAPVS01",
          "includes": [
            "LGCMAREA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "CICS": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "LINKAGE SECTION",
            "Hierarchical data structures with 01, 03, 05 level numbers",
            "Picture clauses (PIC) for data type definition",
            "REDEFINES clause for data structure redefinition",
            "COMP (computational) storage representations",
            "Fixed-format source code layout",
            "DFHCOMMAREA suggests CICS transaction processing"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Policy Management"
      }
    },
    "LGWEBST5": {
      "name": "LGWEBST5",
      "calls": [
        "SSST"
      ],
      "called_by": [],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [],
      "data_structures": {},
      "community": "Community 16",
      "program_language": "COBOL",
      "understanding": {
        "comments": "The program collects and monitors transaction statistics for a GENAPP system, providing performance metrics by tracking transaction rates and counts.",
        "title": "GENAPP Statistics Collection and Monitoring System",
        "purpose": {
          "business_goal": [
            "Collect and track transaction statistics for a GENAPP system",
            "Monitor performance metrics for system health evaluation"
          ],
          "implementation": "The program queries various counters in a GENA pool, calculates transaction rates, and stores the values in temporary storage queues for continuous monitoring purposes"
        },
        "program_type": {
          "category": "technical",
          "function": "Performance monitoring and statistics collection"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Counter Query Operations",
                "description": "Retrieves performance counter values from GENA pool",
                "shortName": "CounterQuery",
                "codeBlocks": "MAINLINE section, multiple EXEC CICS Query Counter statements"
              },
              {
                "name": "Temporary Storage Queue Operations",
                "description": "Manages temporary storage queues for storing statistics data",
                "shortName": "TSQOps",
                "codeBlocks": "Tran-Rate-Counts section, EXEC CICS ReadQ/WriteQ/DeleteQ TS operations"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "75%",
            "evidence": [
              "EXEC CICS Query Counter(GENAcount) Pool(GENApool) Value(CountVal)",
              "EXEC CICS ReadQ TS Queue(WS-TSQname) Into(WS-TSQdata)",
              "EXEC CICS WriteQ TS Queue(WS-TSQname) FROM(WS-TSQdata)",
              "EXEC CICS DeleteQ TS Queue(WS-TSQname)"
            ],
            "architectural_layer_semantic_keywords": [
              "query",
              "read",
              "write",
              "delete",
              "storage"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Transaction Rate Calculator",
                "description": "Calculates transaction rates and time intervals between executions",
                "shortName": "TranRateCalc",
                "codeBlocks": "Tran-Rate-Interval section, Compute statements for time calculations"
              },
              {
                "name": "Statistics Aggregator",
                "description": "Aggregates transaction statistics from various counters",
                "shortName": "StatsAggregator",
                "codeBlocks": "MAINLINE section, Compute statements for counter aggregation"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "25%",
            "evidence": [
              "Compute CountSuccess = CountSuccess + CountVal",
              "Compute CountErrors = CountErrors + CountVal",
              "Compute NCountVal = (HHVal * 3600) + (MMVal * 60) + SSVal",
              "Compute ICountVal = NCountVal - OCountVal",
              "Compute DRateVal = NRateVal - ORateVal"
            ],
            "architectural_layer_semantic_keywords": [
              "calculate",
              "compute",
              "process",
              "transform"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Transaction Statistics",
            "sources": [
              {
                "type": "queue",
                "source_name": "Temporary Storage Queues",
                "reference": "WS-TSQname"
              },
              {
                "type": "variable",
                "source_name": "GENA Pool Counters",
                "reference": "GENApool"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read",
              "update",
              "delete"
            ],
            "attributes": [
              "CountVal",
              "CountSuccess",
              "CountErrors",
              "CountInq",
              "CountAdd",
              "CountUpd",
              "CountDel"
            ],
            "business_context": "Tracks transaction statistics for monitoring system performance"
          },
          {
            "name": "Transaction Rate",
            "sources": [
              {
                "type": "queue",
                "source_name": "Temporary Storage Queues",
                "reference": "WS-TSQname"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read",
              "update",
              "delete"
            ],
            "attributes": [
              "NRateVal",
              "ORateVal",
              "DRateVal",
              "ICountVal"
            ],
            "business_context": "Calculates transaction rates between executions for performance monitoring"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CountSuccess",
            "semantic_type": "TRANSACTION_SUCCESS_COUNT",
            "source": "Accumulation of successful transaction counts from various counters",
            "related_entities": [
              "Transaction Statistics"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CountErrors",
            "semantic_type": "TRANSACTION_ERROR_COUNT",
            "source": "Accumulation of error transaction counts from various counters",
            "related_entities": [
              "Transaction Statistics"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CountInq",
            "semantic_type": "INQUIRY_TRANSACTION_COUNT",
            "source": "Accumulation of inquiry transaction counts",
            "related_entities": [
              "Transaction Statistics"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CountAdd",
            "semantic_type": "ADD_TRANSACTION_COUNT",
            "source": "Accumulation of add transaction counts",
            "related_entities": [
              "Transaction Statistics"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CountUpd",
            "semantic_type": "UPDATE_TRANSACTION_COUNT",
            "source": "Accumulation of update transaction counts",
            "related_entities": [
              "Transaction Statistics"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CountDel",
            "semantic_type": "DELETE_TRANSACTION_COUNT",
            "source": "Accumulation of delete transaction counts",
            "related_entities": [
              "Transaction Statistics"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ICountVal",
            "semantic_type": "TIME_INTERVAL",
            "source": "Calculation of time elapsed since last execution in seconds",
            "related_entities": [
              "Transaction Rate"
            ],
            "confidence": "high"
          },
          {
            "parameter": "WS-TSQname",
            "semantic_type": "QUEUE_IDENTIFIER",
            "source": "Used to identify temporary storage queues for statistics data",
            "related_entities": [
              "Transaction Statistics",
              "Transaction Rate"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Statistics collection occurs at regular intervals",
            "implementation": "Program schedules itself to run every minute using EXEC CICS START command"
          },
          {
            "rule": "Transaction rates are calculated by comparing current and previous counter values",
            "implementation": "Compute DRateVal = NRateVal - ORateVal where NRateVal is current value and ORateVal is previous value"
          },
          {
            "rule": "Time intervals between executions are calculated in seconds",
            "implementation": "Compute ICountVal = NCountVal - OCountVal where values are converted to seconds"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "db",
              "target": "GENA pool",
              "data": "transaction counters"
            },
            {
              "type": "messaging",
              "target": "CICS temporary storage queues",
              "data": "statistics data"
            }
          ],
          "data_sources": [
            "GENA pool counters",
            "CICS time services"
          ],
          "data_destinations": [
            "Temporary storage queues"
          ]
        },
        "features": [
          {
            "feature": "Transaction Statistics Collection",
            "rules": [
              {
                "rule": "Collect transaction statistics from GENA pool counters",
                "scenario": "Monitoring system performance",
                "steps": [
                  {
                    "step": "Query counter values from GENA pool",
                    "external": true,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "GENApool",
                        "object_type": "pool",
                        "when": "For each counter"
                      }
                    ],
                    "when": "During program execution",
                    "exceptions": "Counter not found"
                  },
                  {
                    "step": "Aggregate statistics by transaction type",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "After retrieving counter values",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Transaction Rate Calculation",
            "rules": [
              {
                "rule": "Calculate transaction rates between executions",
                "scenario": "Performance monitoring",
                "steps": [
                  {
                    "step": "Read previous counter value from temporary storage",
                    "external": true,
                    "step_type": "read",
                    "objects": [
                      {
                        "name": "WS-TSQname",
                        "object_type": "queue",
                        "when": "For each counter"
                      }
                    ],
                    "when": "During Tran-Rate-Counts execution",
                    "exceptions": "Queue not found"
                  },
                  {
                    "step": "Calculate difference between current and previous values",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "After reading previous value",
                    "exceptions": "None"
                  },
                  {
                    "step": "Store current and calculated values in temporary storage",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "WS-TSQname",
                        "object_type": "queue",
                        "when": "After calculation"
                      }
                    ],
                    "when": "After calculation",
                    "exceptions": "Queue write error"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Scheduled Execution",
            "rules": [
              {
                "rule": "Schedule next execution of statistics collection",
                "scenario": "Continuous monitoring",
                "steps": [
                  {
                    "step": "Calculate time interval since last execution",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "During Tran-Rate-Interval execution",
                    "exceptions": "None"
                  },
                  {
                    "step": "Schedule next execution of SSST transaction",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "SSST",
                        "object_type": "program",
                        "when": "After calculating interval"
                      }
                    ],
                    "when": "After calculating interval",
                    "exceptions": "Scheduling error"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "GENA": "Application system being monitored",
          "GENApool": "Pool containing transaction counters",
          "Transaction Rate": "Difference in counter values between executions",
          "Time Interval": "Seconds elapsed between program executions"
        },
        "program_context": {
          "program_name": "LGWEBST5",
          "includes": [],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Procedural",
            "Imperative"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.9,
            "HTML": 0.1
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business-Oriented"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PIC (Picture) clause for data definition",
            "Hierarchical data structure with 01, 03 level numbers",
            "Verbose syntax with English-like keywords",
            "Computational (COMP) numeric storage",
            "Fixed-format source code layout",
            "Strong typing with explicit data type declarations"
          ]
        }
      }
    },
    "LGDPVS01": {
      "name": "LGDPVS01",
      "calls": [
        "LGSTSQ"
      ],
      "called_by": [
        "LGDPDB01"
      ],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [
        "LGCMAREA"
      ],
      "data_structures": {},
      "community": "Community 11",
      "program_language": "COBOL",
      "understanding": {
        "comments": "The program deletes policy records from the KSDSPOLY file based on provided policy information, with error logging capabilities",
        "title": "Policy Record Deletion Program",
        "purpose": {
          "business_goal": [
            "Delete policy records from the KSDSPOLY file based on provided policy information"
          ],
          "implementation": "The program receives policy information via COMMAREA, constructs a key, and issues a CICS DELETE FILE command to remove the policy record from KSDSPOLY file"
        },
        "program_type": {
          "category": "business",
          "function": "Data maintenance"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Policy Record Deletion",
                "description": "Deletes policy records from the KSDSPOLY file using CICS DELETE command",
                "shortName": "PolicyDelete",
                "codeBlocks": "MAINLINE section, CICS DELETE operation"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "70%",
            "evidence": [
              "EXEC CICS Delete File('KSDSPOLY') Ridfld(WF-Policy-Key) KeyLength(21) RESP(WS-RESP) End-Exec.",
              "Move CA-Request-ID(4:1) To WF-Request-ID",
              "Move CA-Policy-Num To WF-Policy-Num",
              "Move CA-Customer-Num To WF-Customer-Num"
            ],
            "architectural_layer_semantic_keywords": [
              "delete",
              "file",
              "key"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Messaging"
            ],
            "elements": [
              {
                "name": "Error Logging",
                "description": "Logs error messages to transient data and temporary storage queues via LGSTSQ",
                "shortName": "ErrorLog",
                "codeBlocks": "WRITE-ERROR-MESSAGE section, LGSTSQ calls"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "30%",
            "evidence": [
              "EXEC CICS LINK PROGRAM('LGSTSQ') COMMAREA(ERROR-MSG) LENGTH(LENGTH OF ERROR-MSG) END-EXEC.",
              "EXEC CICS LINK PROGRAM('LGSTSQ') COMMAREA(CA-ERROR-MSG) LENGTH(Length Of CA-ERROR-MSG) END-EXEC"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "error",
              "message"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Insurance Policy",
            "sources": [
              {
                "type": "file",
                "source_name": "KSDSPOLY",
                "reference": "Policy record storage file"
              },
              {
                "type": "record",
                "source_name": "WF-Policy-Key",
                "reference": "Key structure used to identify policy records"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "delete"
            ],
            "attributes": [
              "WF-Request-ID",
              "WF-Customer-Num",
              "WF-Policy-Num"
            ],
            "business_context": "Insurance policies are the primary business entity being managed. This program specifically handles the deletion of policy records from the system.",
            "original_name": "Policy"
          },
          {
            "name": "Customer",
            "sources": [
              {
                "type": "variable",
                "source_name": "CA-CUSTOMER-NUM",
                "reference": "Customer identifier in COMMAREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [],
            "attributes": [
              "CA-CUSTOMER-NUM"
            ],
            "business_context": "Customers are associated with policies. The customer number is used as part of the policy key and for error reporting."
          },
          {
            "name": "Error Log",
            "sources": [
              {
                "type": "integration",
                "source_name": "LGSTSQ",
                "reference": "External program for logging errors"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "EM-DATE",
              "EM-TIME",
              "EM-POLNUM",
              "EM-CUSNUM",
              "EM-RESPRC",
              "EM-RESP2RC"
            ],
            "business_context": "Error logging is used to track issues with policy deletion operations for auditing and troubleshooting purposes."
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_IDENTIFIER",
            "source": "Used as part of the key for deletion operation",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_IDENTIFIER",
            "source": "Used as part of the key for deletion and in error messages",
            "related_entities": [
              "Customer",
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "OPERATION_CODE",
            "source": "Used to identify the type of request being processed",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "medium"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Set to '81' when an error occurs during deletion",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "WF-Request-ID",
            "semantic_type": "OPERATION_TYPE",
            "source": "Extracted from CA-Request-ID and used in policy key",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "medium"
          }
        ],
        "business_rules": [
          {
            "rule": "Policy deletion requires a valid policy key consisting of request ID, customer number, and policy number",
            "implementation": "The program constructs WF-Policy-Key from CA-Request-ID, CA-Customer-Num, and CA-Policy-Num before attempting deletion"
          },
          {
            "rule": "Failed policy deletion operations must be logged for audit purposes",
            "implementation": "When deletion fails, the program sets return code '81' and logs detailed error information via LGSTSQ"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "file_access",
              "target": "KSDSPOLY",
              "data": "Policy records"
            },
            {
              "type": "messaging",
              "target": "LGSTSQ",
              "data": "Error messages"
            }
          ],
          "data_sources": [
            "DFHCOMMAREA (input parameters)"
          ],
          "data_destinations": [
            "LGSTSQ (error logging)"
          ]
        },
        "features": [
          {
            "feature": "Policy Record Deletion",
            "rules": [
              {
                "rule": "Delete policy records from the system",
                "scenario": "Remove a policy record from the KSDSPOLY file",
                "steps": [
                  {
                    "step": "Extract policy key information from COMMAREA",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "WF-Policy-Key",
                        "object_type": "record",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Delete policy record from KSDSPOLY file",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "KSDSPOLY",
                        "object_type": "file",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "CICS response code not normal"
                  },
                  {
                    "step": "Log error details if deletion fails",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "When deletion fails"
                      }
                    ],
                    "when": "WS-RESP Not = DFHRESP(NORMAL)",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Policy": "Insurance contract identified by policy number",
          "Customer": "Individual or entity that holds insurance policies",
          "KSDSPOLY": "File storing policy records",
          "Request ID": "Code indicating the type of operation to perform"
        },
        "program_context": {
          "program_name": "LGDPVS01",
          "includes": [
            "LGCMAREA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "Embedded Comments": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "LINKAGE SECTION",
            "PIC (Picture) clauses for data definition",
            "Hierarchical data structures",
            "REDEFINES clause",
            "Mainframe/IBM z/OS style record definitions",
            "Fixed-length record formats",
            "Explicit decimal and computational fields",
            "COMP (Computational) storage representations"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Policy Management"
      }
    },
    "LGUCVS01": {
      "name": "LGUCVS01",
      "calls": [
        "LGSTSQ"
      ],
      "called_by": [
        "LGUCDB01"
      ],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [
        "LGCMAREA"
      ],
      "data_structures": {},
      "community": "Community 8",
      "program_language": "COBOL",
      "understanding": {
        "comments": "This program updates customer records in the KSDSCUST file with data received from a calling program",
        "title": "Customer Record Update Program",
        "purpose": {
          "business_goal": [
            "Update customer records in the KSDSCUST file"
          ],
          "implementation": "Reads a customer record with update intent, then rewrites it with data from the COMMAREA"
        },
        "program_type": {
          "category": "business",
          "function": "Data maintenance"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Customer Record Access",
                "description": "Reads and updates customer records in the KSDSCUST file",
                "shortName": "KSDSCUST",
                "codeBlocks": "MAINLINE section file operations"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "Exec CICS Read File('KSDSCUST')",
              "Exec CICS ReWrite File('KSDSCUST')",
              "Into(WS-Customer-Area)",
              "From(CA-Customer-Num)",
              "Ridfld(CA-Customer-Num)"
            ],
            "architectural_layer_semantic_keywords": [
              "read",
              "rewrite",
              "file",
              "update"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Messaging"
            ],
            "elements": [
              {
                "name": "Error Logging",
                "description": "Logs error messages to a queue via LGSTSQ program",
                "shortName": "LGSTSQ",
                "codeBlocks": "WRITE-ERROR-MESSAGE section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "40%",
            "evidence": [
              "EXEC CICS LINK PROGRAM('LGSTSQ')",
              "COMMAREA(ERROR-MSG)",
              "COMMAREA(CA-ERROR-MSG)"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "error",
              "message"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Customer",
            "sources": [
              {
                "type": "file",
                "source_name": "KSDSCUST",
                "reference": "Customer record file"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read",
              "update"
            ],
            "attributes": [
              "CA-CUSTOMER-NUM",
              "CA-FIRST-NAME",
              "CA-LAST-NAME",
              "CA-DOB",
              "CA-HOUSE-NAME",
              "CA-HOUSE-NUM",
              "CA-POSTCODE",
              "CA-NUM-POLICIES",
              "CA-PHONE-MOBILE",
              "CA-PHONE-HOME",
              "CA-EMAIL-ADDRESS"
            ],
            "business_context": "Core entity representing customer information for insurance services"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as key to read and update customer records in KSDSCUST file",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Set to error codes (81 or 82) when operations fail",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "WS-RESP",
            "semantic_type": "TECHNICAL_ERROR_CODE",
            "source": "Stores CICS response codes from file operations",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ERROR-MSG",
            "semantic_type": "ERROR_MESSAGE",
            "source": "Formatted error message passed to LGSTSQ logging program",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Customer record must exist before it can be updated",
            "implementation": "Program reads the customer record first with update intent, and only proceeds with rewrite if read is successful"
          },
          {
            "rule": "System must log detailed error information when customer operations fail",
            "implementation": "WRITE-ERROR-MESSAGE section captures date, time, customer number, and response codes when errors occur"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "file_access",
              "target": "KSDSCUST",
              "data": "Customer record"
            },
            {
              "type": "messaging",
              "target": "LGSTSQ",
              "data": "Error messages"
            }
          ],
          "data_sources": [
            "COMMAREA (input from calling program)",
            "KSDSCUST file"
          ],
          "data_destinations": [
            "KSDSCUST file (updated customer record)",
            "Error log via LGSTSQ"
          ]
        },
        "features": [
          {
            "feature": "Customer record update",
            "rules": [
              {
                "rule": "Update existing customer information",
                "scenario": "Modify customer data in the system",
                "steps": [
                  {
                    "step": "Read customer record with update intent",
                    "external": true,
                    "step_type": "read",
                    "objects": [
                      {
                        "name": "KSDSCUST",
                        "object_type": "file",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Record not found or other CICS errors"
                  },
                  {
                    "step": "Log error if read fails",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "Read operation fails"
                      }
                    ],
                    "when": "WS-RESP Not = DFHRESP(NORMAL)",
                    "exceptions": "None"
                  },
                  {
                    "step": "Rewrite customer record with updated data",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "KSDSCUST",
                        "object_type": "file",
                        "when": "Read operation succeeds"
                      }
                    ],
                    "when": "After successful read",
                    "exceptions": "CICS rewrite errors"
                  },
                  {
                    "step": "Log error if rewrite fails",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "Rewrite operation fails"
                      }
                    ],
                    "when": "WS-RESP Not = DFHRESP(NORMAL)",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Customer": "Person who has insurance policies with the company",
          "KSDSCUST": "Customer master file",
          "LGSTSQ": "Error logging service"
        },
        "program_context": {
          "program_name": "LGUCVS01",
          "includes": [
            "LGCMAREA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 100
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.95,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "LINKAGE SECTION",
            "PIC (Picture) clauses for data definition",
            "Hierarchical data structures with 01, 03, 05 level numbers",
            "REDEFINES clause for data redefinition",
            "COMP (Computational) storage representation",
            "Fixed-format source code layout",
            "Verbose division-based program structure",
            "Strong emphasis on record and data management"
          ]
        },
        "business_domain": "Party Reference",
        "service_domain": "Party Reference Data Directory"
      }
    },
    "LGAPBR01": {
      "name": "LGAPBR01",
      "calls": [
        "HBRDISC",
        "HBRCONN",
        "LGSTSQ",
        "HBRRULE"
      ],
      "called_by": [
        "LGAPOL01"
      ],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [
        "LGCMARER",
        "LGCMAREA",
        "HBRWS",
        "HBRC"
      ],
      "data_structures": {},
      "community": "Community 9",
      "program_language": "COBOL",
      "understanding": {
        "comments": "Program processes endowment policy data through IBM ODM business rules engine to determine appropriate fund allocation",
        "title": "LGAPBR01: Business Rules Processing for Endowment Policy Fund Selection",
        "purpose": {
          "business_goal": [
            "Process policy data through business rules engine to determine appropriate fund allocation",
            "Update policy fund information based on rule execution results"
          ],
          "implementation": "Calls IBM ODM (Operational Decision Manager) through HBRCONN, HBRRULE, and HBRDISC interfaces to evaluate policy data against business rules"
        },
        "program_type": {
          "category": "business",
          "function": "Policy data processing"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              },
              {
                "architecture": "Business Architecture",
                "layer": "Business Processes"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Business Rules Processing",
                "description": "Processes policy data through IBM ODM business rules engine",
                "shortName": "RulesEngine",
                "codeBlocks": "MAINLINE section, ODM Interface calls"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "Program calls IBM ODM (HBRCONN, HBRRULE, HBRDISC) to process business rules",
              "Prepares policy data (FUND-NAME, TERM, SUM-ASSURED) for rules processing",
              "Updates policy fund information (CA-E-FUND-NAME) based on rule execution results",
              "Transforms data between COMMAREA and REQUEST structure for business rules processing"
            ],
            "architectural_layer_semantic_keywords": [
              "process",
              "rules",
              "business rules",
              "policy data"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "API-Driven"
            ],
            "elements": [
              {
                "name": "ODM Interface",
                "description": "Interfaces with IBM ODM for business rules execution",
                "shortName": "ODMIntf",
                "codeBlocks": "HBRCONN, HBRRULE, HBRDISC calls"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "30%",
            "evidence": [
              "CALL 'HBRCONN' USING HBRA-CONN-AREA to establish connection",
              "CALL 'HBRRULE' USING HBRA-CONN-AREA to execute business rules",
              "CALL 'HBRDISC' USING HBRA-CONN-AREA to disconnect",
              "Sets up ODM parameters and connection path '/GenAppDemoApp/GenAppDemo'"
            ],
            "architectural_layer_semantic_keywords": [
              "interface",
              "call",
              "connect",
              "external system"
            ]
          },
          {
            "traditionalLayer": "Data Entities",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Entities"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Hierarchical Data Model"
            ],
            "elements": [
              {
                "name": "Policy Data Structures",
                "description": "Data structures representing policy information",
                "shortName": "PolicyData",
                "codeBlocks": "REQUEST, RESPONSE, DFHCOMMAREA structures"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "10%",
            "evidence": [
              "REQUEST structure with policy fields (REQUEST-ID, FUND-NAME, TERM, SUM-ASSURED)",
              "RESPONSE structure to capture rule execution results",
              "DFHCOMMAREA with policy-specific data (CA-E-FUND-NAME, CA-E-TERM, CA-E-SUM-ASSURED)"
            ],
            "architectural_layer_semantic_keywords": [
              "data structure",
              "policy",
              "fields",
              "records"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Endowment Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-ENDOWMENT",
                "reference": "Policy-specific data for endowment policies"
              },
              {
                "type": "variable",
                "source_name": "REQUEST",
                "reference": "Data structure for business rules processing"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read",
              "update"
            ],
            "attributes": [
              "FUND-NAME",
              "TERM",
              "SUM-ASSURED"
            ],
            "business_context": "Represents an endowment insurance policy that is processed through business rules to determine appropriate fund allocation"
          },
          {
            "name": "Business Rules",
            "sources": [
              {
                "type": "integration",
                "source_name": "IBM ODM",
                "reference": "External business rules engine accessed via HBRCONN, HBRRULE, HBRDISC"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "HBRA-CONN-AREA",
              "HBRA-RA-PARMETERS"
            ],
            "business_context": "External business rules that determine policy processing outcomes, particularly fund selection"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-E-FUND-NAME",
            "semantic_type": "INVESTMENT_FUND_NAME",
            "source": "Field usage in policy processing and ODM interface",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-E-TERM",
            "semantic_type": "POLICY_DURATION",
            "source": "Field usage in policy data preparation",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-E-SUM-ASSURED",
            "semantic_type": "POLICY_PAYOUT_AMOUNT",
            "source": "Field usage in policy data preparation",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "TRANSACTION_IDENTIFIER",
            "source": "Used to identify the type of request being processed",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "medium"
          }
        ],
        "business_rules": [
          {
            "rule": "Endowment policy fund selection based on policy attributes",
            "implementation": "Policy data (FUND-NAME, TERM, SUM-ASSURED) is sent to IBM ODM for evaluation, and the resulting FUND-NAME is updated in the policy record"
          },
          {
            "rule": "Business rules processing requires valid connection to ODM",
            "implementation": "Program establishes connection via HBRCONN before rule execution and disconnects via HBRDISC afterward"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "api",
              "target": "IBM ODM (Operational Decision Manager)",
              "data": "Policy data for rules processing"
            }
          ],
          "data_sources": [
            "DFHCOMMAREA (input policy data)"
          ],
          "data_destinations": [
            "DFHCOMMAREA (updated policy data)"
          ]
        },
        "features": [
          {
            "feature": "Policy Fund Evaluation",
            "rules": [
              {
                "rule": "Evaluate policy attributes against business rules to determine appropriate fund",
                "scenario": "Process endowment policy through business rules engine",
                "steps": [
                  {
                    "step": "Prepare policy data for rules processing",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "DFHCOMMAREA",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Establish connection to ODM",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "HBRCONN",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Connection failure"
                  },
                  {
                    "step": "Execute business rules",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "HBRRULE",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Rule execution failure"
                  },
                  {
                    "step": "Disconnect from ODM",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "HBRDISC",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Disconnect failure"
                  },
                  {
                    "step": "Update policy with rule results",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "DFHCOMMAREA",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Endowment Policy": "An insurance policy that pays a lump sum on a specified date or death",
          "Fund Name": "Investment fund associated with an endowment policy",
          "Term": "Duration of the endowment policy in years",
          "Sum Assured": "The guaranteed amount paid out by an endowment policy",
          "ODM": "Operational Decision Manager - IBM's business rules management system"
        },
        "program_context": {
          "program_name": "LGAPBR01",
          "includes": [
            "LGCMARER",
            "LGCMAREA",
            "HBRWS",
            "HBRC"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 98,
            "Unstructured Data": 2
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.95,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "LINKAGE SECTION",
            "PIC X/9 data type declarations",
            "REDEFINES clause",
            "COMP computational fields",
            "Hierarchical data structure with 01/03/05 level numbers",
            "Fixed-format source code layout",
            "Transaction processing indicators",
            "DFHCOMMAREA typical of CICS mainframe programming"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Policy Management"
      }
    },
    "OLDACDB2": {
      "name": "OLDACDB2",
      "calls": [
        "LGSTSQ"
      ],
      "called_by": [],
      "uses_tables": [
        {
          "name": "CUSTOMER_SECURE",
          "persistent_perations": [
            "create"
          ]
        }
      ],
      "uses_screens": [],
      "includes": [
        "LGPOLICY",
        "LGCMAREA",
        "SQLCA"
      ],
      "data_structures": {},
      "community": "Community 8",
      "program_language": "COBOL",
      "understanding": {
        "comments": "The program manages customer security information by storing passwords and related security data in the CUSTOMER_SECURE database table",
        "title": "Customer Security Database Management Program",
        "purpose": {
          "business_goal": [
            "Store customer password/security information in the CUSTOMER_SECURE database table"
          ],
          "implementation": "Receives customer security data via COMMAREA and inserts it into the CUSTOMER_SECURE DB2 table"
        },
        "program_type": {
          "category": "business",
          "function": "Database management"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Relational Databases"
            ],
            "elements": [
              {
                "name": "INSERT-CUSTOMER-PASSWORD",
                "description": "Database operation that inserts customer security information into the CUSTOMER_SECURE database table",
                "shortName": "InsertPass",
                "codeBlocks": "INSERT-CUSTOMER-PASSWORD section (lines 420-439)"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "EXEC SQL INSERT INTO CUSTOMER_SECURE (customerNumber, customerPass, state_indicator, pass_changes) VALUES (:DB2-CUSTOMERNUM-INT, :CA-CUSTSECR-PASS, :CA-CUSTSECR-STATE, :DB2-CUSTOMERCNT-INT)",
              "MOVE ' INSERT SECURITY' TO EM-SQLREQ",
              "SQL operation handling with SQLCODE checking"
            ],
            "architectural_layer_semantic_keywords": [
              "insert",
              "database",
              "SQL",
              "CUSTOMER_SECURE"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "MAINLINE",
                "description": "Main control flow that validates input and routes to appropriate function based on request type",
                "shortName": "Main",
                "codeBlocks": "MAINLINE section (lines 390-416)"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "25%",
            "evidence": [
              "Evaluate CA-REQUEST-ID",
              "When '02ACUS' Move CA-CUSTOMER-NUM To DB2-CUSTOMERNUM-INT",
              "Move CA-CUSTSECR-COUNT To DB2-CUSTOMERCNT-INT",
              "Perform INSERT-CUSTOMER-PASSWORD"
            ],
            "architectural_layer_semantic_keywords": [
              "evaluate",
              "request",
              "validate",
              "process"
            ]
          },
          {
            "traditionalLayer": "Data Entities",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Entities"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Relational Data Model"
            ],
            "elements": [
              {
                "name": "CUSTOMER_SECURE",
                "description": "Database table that stores customer security information",
                "shortName": "CustSec",
                "codeBlocks": "DB2 table referenced in INSERT-CUSTOMER-PASSWORD"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "15%",
            "evidence": [
              "CUSTOMER_SECURE table with columns: customerNumber, customerPass, state_indicator, pass_changes",
              "CA-CUSTSECR-REQUEST structure in DFHCOMMAREA"
            ],
            "architectural_layer_semantic_keywords": [
              "table",
              "column",
              "security",
              "password"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Customer Security",
            "sources": [
              {
                "type": "table",
                "source_name": "CUSTOMER_SECURE",
                "reference": "Database table storing customer security information"
              },
              {
                "type": "record",
                "source_name": "CA-CUSTSECR-REQUEST",
                "reference": "Communication area structure for security data"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "customerNumber",
              "customerPass",
              "state_indicator",
              "pass_changes"
            ],
            "business_context": "Stores customer authentication credentials and security state information for system access"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "ACTION_CODE",
            "source": "Used in MAINLINE to determine processing path",
            "related_entities": [
              "Customer Security"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as primary key for database operations",
            "related_entities": [
              "Customer Security"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTSECR-PASS",
            "semantic_type": "PASSWORD",
            "source": "Stored in CUSTOMER_SECURE table as authentication credential",
            "related_entities": [
              "Customer Security"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTSECR-STATE",
            "semantic_type": "STATUS_INDICATOR",
            "source": "Stored in CUSTOMER_SECURE table as state_indicator",
            "related_entities": [
              "Customer Security"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTSECR-COUNT",
            "semantic_type": "COUNTER",
            "source": "Stored in CUSTOMER_SECURE table as pass_changes",
            "related_entities": [
              "Customer Security"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Set based on operation success/failure",
            "related_entities": [
              "Customer Security"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Customer security information must be stored in the database",
            "implementation": "Program inserts customer password, state indicator, and counter into CUSTOMER_SECURE table"
          },
          {
            "rule": "Only valid request types are processed",
            "implementation": "Program evaluates CA-REQUEST-ID and only processes '02ACUS' requests for customer security operations"
          },
          {
            "rule": "Database errors must be reported",
            "implementation": "Program checks SQLCODE after database operations and sets error return code if not successful"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "db",
              "target": "CUSTOMER_SECURE",
              "data": "customer security information"
            }
          ],
          "data_sources": [
            "DFHCOMMAREA"
          ],
          "data_destinations": [
            "CUSTOMER_SECURE database table",
            "Error log via LGSTSQ program"
          ]
        },
        "features": [
          {
            "feature": "Customer Password Management",
            "rules": [
              {
                "rule": "Store customer security credentials",
                "scenario": "When a new customer password needs to be stored",
                "steps": [
                  {
                    "step": "Validate request type",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "Invalid request type results in error code 99"
                  },
                  {
                    "step": "Insert customer security data",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "CUSTOMER_SECURE",
                        "object_type": "table",
                        "when": "When request type is '02ACUS'"
                      }
                    ],
                    "when": "When request type is '02ACUS'",
                    "exceptions": "SQL error results in error code 98"
                  },
                  {
                    "step": "Log errors if they occur",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "When SQL error occurs"
                      }
                    ],
                    "when": "When SQL error occurs",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Customer Security": "Authentication and access control information for customers",
          "Password": "Authentication credential stored in CUSTOMER_SECURE table",
          "State Indicator": "Flag indicating password status (active, expired, etc.)",
          "Pass Changes": "Counter tracking number of password changes or attempts"
        },
        "program_context": {
          "program_name": "OLDACDB2",
          "includes": [
            "LGPOLICY",
            "LGCMAREA",
            "SQLCA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Structured Programming",
            "Database-oriented"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "SQL": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "Hierarchical data structures with 01, 03 level numbers",
            "PIC (Picture) clauses for data type definition",
            "COMP (Computational) storage optimizations",
            "Fixed-format source code layout",
            "Verbose declarative programming style",
            "Record-based data structures",
            "Embedded DB2 database interaction hints"
          ]
        },
        "business_domain": "Party Reference",
        "service_domain": "Party Security Management"
      }
    },
    "LGIPOL01": {
      "name": "LGIPOL01",
      "calls": [
        "LGSTSQ",
        "LGIPDB01"
      ],
      "called_by": [
        "LGTESTP4",
        "LGTESTP3",
        "LGTESTP1",
        "LGTESTP2"
      ],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [
        "LGPOLICY",
        "LGCMAREA"
      ],
      "data_structures": {},
      "community": "Community 4",
      "program_language": "COBOL",
      "understanding": {
        "comments": "The program serves as an interface layer between calling programs and the database access module for retrieving insurance policy information.",
        "title": "Insurance Policy Information Retrieval Interface",
        "purpose": {
          "business_goal": [
            "Retrieve insurance policy information from a database",
            "Act as an interface between calling programs and the database access module"
          ],
          "implementation": "The program receives a request via COMMAREA, validates it, and calls LGIPDB01 to perform the actual database operations, then returns the results to the caller"
        },
        "program_type": {
          "category": "business",
          "function": "data retrieval"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Insurance Policy Interface",
                "description": "Acts as an interface between calling programs and the database access module",
                "shortName": "LGIPOL01",
                "codeBlocks": "MAINLINE section"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "30%",
            "evidence": [
              "Program validates COMMAREA data before passing to database module",
              "Sets default return code to '00' (success)",
              "Handles error conditions and formats error messages",
              "Calls LGIPDB01 to perform actual database operations"
            ],
            "architectural_layer_semantic_keywords": [
              "interface",
              "validate",
              "process"
            ]
          },
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Database Interface",
                "description": "Delegates database operations to LGIPDB01",
                "shortName": "DB-Interface",
                "codeBlocks": "EXEC CICS LINK Program(LGIPDB01)"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "10%",
            "evidence": [
              "EXEC CICS LINK Program(LGIPDB01) Commarea(DFHCOMMAREA) Length(32000)",
              "Program doesn't directly access data but delegates to LGIPDB01"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "delegate"
            ]
          },
          {
            "traditionalLayer": "Data Entities",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Entities"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Hierarchical Data Model"
            ],
            "elements": [
              {
                "name": "Insurance Policy Data Structures",
                "description": "Defines data structures for various insurance policy types",
                "shortName": "PolicyData",
                "codeBlocks": "LINKAGE SECTION, WORKING-STORAGE SECTION"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "Defines structures for Endowment, House, Motor, Commercial, and Claim policies",
              "Contains customer information structures",
              "Defines COMMAREA structure for data exchange"
            ],
            "architectural_layer_semantic_keywords": [
              "data structure",
              "policy",
              "customer"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Insurance Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-POLICY-REQUEST",
                "reference": "DFHCOMMAREA redefinition"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CA-POLICY-NUM",
              "CA-ISSUE-DATE",
              "CA-EXPIRY-DATE",
              "CA-LASTCHANGED",
              "CA-BROKERID",
              "CA-BROKERSREF",
              "CA-PAYMENT"
            ],
            "business_context": "Core entity representing insurance contracts between customers and the insurance company"
          },
          {
            "name": "Customer",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-CUSTOMER-REQUEST",
                "reference": "DFHCOMMAREA redefinition"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CA-CUSTOMER-NUM",
              "CA-FIRST-NAME",
              "CA-LAST-NAME",
              "CA-DOB",
              "CA-HOUSE-NAME",
              "CA-HOUSE-NUM",
              "CA-POSTCODE",
              "CA-NUM-POLICIES",
              "CA-PHONE-MOBILE",
              "CA-PHONE-HOME",
              "CA-EMAIL-ADDRESS"
            ],
            "business_context": "Represents policyholders who own insurance policies"
          },
          {
            "name": "Endowment Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-ENDOWMENT",
                "reference": "CA-POLICY-SPECIFIC redefinition"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CA-E-WITH-PROFITS",
              "CA-E-EQUITIES",
              "CA-E-MANAGED-FUND",
              "CA-E-FUND-NAME",
              "CA-E-TERM",
              "CA-E-SUM-ASSURED",
              "CA-E-LIFE-ASSURED"
            ],
            "business_context": "Type of life insurance policy that pays a lump sum on a specified date or death"
          },
          {
            "name": "House Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-HOUSE",
                "reference": "CA-POLICY-SPECIFIC redefinition"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CA-H-PROPERTY-TYPE",
              "CA-H-BEDROOMS",
              "CA-H-VALUE",
              "CA-H-HOUSE-NAME",
              "CA-H-HOUSE-NUMBER",
              "CA-H-POSTCODE"
            ],
            "business_context": "Home insurance policy covering residential properties"
          },
          {
            "name": "Motor Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-MOTOR",
                "reference": "CA-POLICY-SPECIFIC redefinition"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CA-M-MAKE",
              "CA-M-MODEL",
              "CA-M-VALUE",
              "CA-M-REGNUMBER",
              "CA-M-COLOUR",
              "CA-M-CC",
              "CA-M-MANUFACTURED",
              "CA-M-PREMIUM",
              "CA-M-ACCIDENTS"
            ],
            "business_context": "Vehicle insurance policy covering automobiles"
          },
          {
            "name": "Commercial Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-COMMERCIAL",
                "reference": "CA-POLICY-SPECIFIC redefinition"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CA-B-Address",
              "CA-B-Postcode",
              "CA-B-PropType",
              "CA-B-FirePeril",
              "CA-B-FirePremium",
              "CA-B-CrimePeril",
              "CA-B-CrimePremium",
              "CA-B-FloodPeril",
              "CA-B-FloodPremium",
              "CA-B-WeatherPeril",
              "CA-B-WeatherPremium",
              "CA-B-Status"
            ],
            "business_context": "Business insurance policy covering commercial properties with multiple peril types"
          },
          {
            "name": "Claim",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-CLAIM",
                "reference": "CA-POLICY-SPECIFIC redefinition"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CA-C-Num",
              "CA-C-Date",
              "CA-C-Paid",
              "CA-C-Value",
              "CA-C-Cause",
              "CA-C-Observations"
            ],
            "business_context": "Represents insurance claims filed against policies"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "OPERATION_CODE",
            "source": "Used to identify the type of request being made to the database program",
            "related_entities": [
              "Insurance Policy",
              "Customer",
              "Claim"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Set to '00' for success, may be modified by LGIPDB01 to indicate errors",
            "related_entities": [
              "Insurance Policy",
              "Customer",
              "Claim"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as a unique identifier for customers in database queries",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_ID",
            "source": "Used as a unique identifier for policies in database queries",
            "related_entities": [
              "Insurance Policy",
              "Endowment Policy",
              "House Policy",
              "Motor Policy",
              "Commercial Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-M-CC",
            "semantic_type": "ENGINE_CAPACITY",
            "source": "Field in motor policy record representing engine cubic capacity",
            "related_entities": [
              "Motor Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-E-SUM-ASSURED",
            "semantic_type": "INSURANCE_COVERAGE_AMOUNT",
            "source": "Field in endowment policy representing the coverage amount",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-C-Value",
            "semantic_type": "CLAIM_AMOUNT",
            "source": "Field in claim record representing the claim value",
            "related_entities": [
              "Claim"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "A COMMAREA must be provided when calling the program",
            "implementation": "Program checks EIBCALEN and abends with code 'LGCA' if no COMMAREA is received"
          },
          {
            "rule": "Successful operations return a '00' status code",
            "implementation": "Program sets CA-RETURN-CODE to '00' by default, which may be modified by LGIPDB01"
          },
          {
            "rule": "Error conditions must be logged",
            "implementation": "WRITE-ERROR-MESSAGE section formats and logs error messages via LGSTSQ program"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "api",
              "target": "LGIPDB01",
              "data": "COMMAREA containing request parameters and response data"
            },
            {
              "type": "api",
              "target": "LGSTSQ",
              "data": "Error messages for logging"
            }
          ],
          "data_sources": [
            "LGIPDB01 (database access program)"
          ],
          "data_destinations": [
            "Calling program",
            "LGSTSQ (error logging)"
          ]
        },
        "features": [
          {
            "feature": "Insurance Policy Information Retrieval",
            "rules": [
              {
                "rule": "Retrieve policy information based on policy number or customer number",
                "scenario": "User or system requests policy details",
                "steps": [
                  {
                    "step": "Initialize header information",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Validate COMMAREA was received",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "EIBCALEN is equal to zero"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Abend with code 'LGCA' if no COMMAREA received"
                  },
                  {
                    "step": "Set default return code to success",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Call database program to retrieve policy information",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGIPDB01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Return control to calling program",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Endowment": "Life insurance policy that pays a lump sum on maturity or death",
          "House": "Home insurance policy for residential properties",
          "Motor": "Vehicle insurance policy for automobiles",
          "Commercial": "Business insurance policy covering multiple perils",
          "Claim": "Request for compensation under an insurance policy",
          "Broker": "Intermediary who arranges insurance policies"
        },
        "program_context": {
          "program_name": "LGIPOL01",
          "includes": [
            "LGPOLICY",
            "LGCMAREA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "SQL": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL 85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PIC X/9 data type declarations",
            "COMP storage modifier",
            "Hierarchical data structure with 01/03/05 level numbers",
            "Fixed-format source code layout",
            "Embedded DB2 database record structures",
            "Verbose record and variable declarations"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Policy Management"
      }
    },
    "LGACDB01": {
      "name": "LGACDB01",
      "calls": [
        "LGACVS01",
        "LGSTSQ",
        "LGACDB02"
      ],
      "called_by": [
        "LGACUS01"
      ],
      "uses_tables": [
        {
          "name": "CUSTOMER",
          "persistent_perations": [
            "create"
          ]
        }
      ],
      "uses_screens": [],
      "includes": [
        "LGPOLICY",
        "LGCMAREA",
        "SQLCA"
      ],
      "data_structures": {},
      "community": "Community 5",
      "program_language": "COBOL",
      "understanding": {
        "comments": "The program creates new customer records in a database system with associated security information, serving as the primary customer onboarding component.",
        "title": "Customer Registration Service - Database and Security Record Creation",
        "purpose": {
          "business_goal": [
            "Create new customer records in the database",
            "Generate customer security records"
          ],
          "implementation": "The program inserts customer information into the CUSTOMER database table, obtains a unique customer number, and creates associated security records by linking to other programs"
        },
        "program_type": {
          "category": "business",
          "function": "Data persistence"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Relational Databases"
            ],
            "elements": [
              {
                "name": "INSERT-CUSTOMER",
                "description": "Inserts customer data into the CUSTOMER database table using SQL",
                "shortName": "INSERT-CUST",
                "codeBlocks": "INSERT-CUSTOMER paragraph (lines 450-520)"
              },
              {
                "name": "Obtain-CUSTOMER-Number",
                "description": "Gets a unique customer number from a counter in the GENA pool",
                "shortName": "GET-CUST-NUM",
                "codeBlocks": "Obtain-CUSTOMER-Number paragraph (lines 430-445)"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "SQL INSERT statements to CUSTOMER table",
              "EXEC SQL SET :DB2-CUSTOMERNUM-INT = IDENTITY_VAL_LOCAL()",
              "EXEC CICS GET COUNTER operation to obtain unique customer number",
              "Database error handling with SQLCODE checks"
            ],
            "architectural_layer_semantic_keywords": [
              "insert",
              "database",
              "SQL",
              "counter",
              "CUSTOMER table"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "API-Driven"
            ],
            "elements": [
              {
                "name": "LGACVS01 Integration",
                "description": "Links to LGACVS01 program to persist customer data to a file",
                "shortName": "VS01-LINK",
                "codeBlocks": "EXEC CICS LINK to LGACVS01 in MAINLINE section"
              },
              {
                "name": "LGACDB02 Integration",
                "description": "Links to LGACDB02 to create customer security record",
                "shortName": "DB02-LINK",
                "codeBlocks": "EXEC CICS LINK to LGACDB02 in MAINLINE section"
              },
              {
                "name": "LGSTSQ Integration",
                "description": "Links to LGSTSQ program for error logging",
                "shortName": "LGSTSQ-LINK",
                "codeBlocks": "EXEC CICS LINK to LGSTSQ in WRITE-ERROR-MESSAGE section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "25%",
            "evidence": [
              "EXEC CICS LINK Program(LGACVS01) statements",
              "EXEC CICS LINK Program(LGACDB02) statements",
              "EXEC CICS LINK Program('LGSTSQ') statements",
              "Data preparation for linked programs"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "program",
              "integration",
              "external system"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "MAINLINE",
                "description": "Main program flow that validates the COMMAREA, obtains customer number, inserts customer data, and links to other programs",
                "shortName": "MAIN",
                "codeBlocks": "MAINLINE section (lines 380-425)"
              },
              {
                "name": "WRITE-ERROR-MESSAGE",
                "description": "Formats and logs error messages when database operations fail",
                "shortName": "ERR-MSG",
                "codeBlocks": "WRITE-ERROR-MESSAGE paragraph (lines 525-555)"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "15%",
            "evidence": [
              "Validation of COMMAREA parameters (EIBCALEN checks)",
              "Business flow orchestration in MAINLINE section",
              "Error handling and formatting logic",
              "Coordination between data access and integration components"
            ],
            "architectural_layer_semantic_keywords": [
              "validate",
              "process",
              "orchestrate",
              "error handling"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Customer",
            "sources": [
              {
                "type": "table",
                "source_name": "CUSTOMER",
                "reference": "SQL INSERT operation in INSERT-CUSTOMER paragraph"
              },
              {
                "type": "record",
                "source_name": "CA-CUSTOMER-REQUEST",
                "reference": "COMMAREA structure used for input data"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "CUSTOMERNUMBER",
              "FIRSTNAME",
              "LASTNAME",
              "DATEOFBIRTH",
              "HOUSENAME",
              "HOUSENUMBER",
              "POSTCODE",
              "PHONEMOBILE",
              "PHONEHOME",
              "EMAILADDRESS"
            ],
            "business_context": "Core entity representing a customer in the system, with personal and contact information"
          },
          {
            "name": "CustomerSecurity",
            "sources": [
              {
                "type": "integration",
                "source_name": "LGACDB02",
                "reference": "EXEC CICS LINK to LGACDB02 with security data"
              },
              {
                "type": "record",
                "source_name": "CDB2AREA",
                "reference": "Data structure containing security information"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "CUSTOMER-NUM",
              "CUSTSECR-PASS",
              "CUSTSECR-COUNT",
              "CUSTSECR-STATE"
            ],
            "business_context": "Security information associated with a customer account, likely for authentication purposes"
          },
          {
            "name": "CustomerFile",
            "sources": [
              {
                "type": "integration",
                "source_name": "LGACVS01",
                "reference": "EXEC CICS LINK to LGACVS01"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "Customer data from COMMAREA"
            ],
            "business_context": "File-based persistence of customer information, possibly for backup or integration purposes"
          },
          {
            "name": "CustomerCounter",
            "sources": [
              {
                "type": "other",
                "source_name": "GENACUSTNUM",
                "reference": "EXEC CICS GET COUNTER in Obtain-CUSTOMER-Number paragraph"
              }
            ],
            "importance": "tertiary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "Counter value"
            ],
            "business_context": "Sequence generator for customer numbers to ensure uniqueness"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as primary key in CUSTOMER table and passed to integration programs",
            "related_entities": [
              "Customer",
              "CustomerSecurity"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-FIRST-NAME",
            "semantic_type": "PERSON_FIRST_NAME",
            "source": "Used in INSERT operation to CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-LAST-NAME",
            "semantic_type": "PERSON_LAST_NAME",
            "source": "Used in INSERT operation to CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-DOB",
            "semantic_type": "PERSON_DATE_OF_BIRTH",
            "source": "Used in INSERT operation to CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-HOUSE-NAME",
            "semantic_type": "ADDRESS_HOUSE_NAME",
            "source": "Used in INSERT operation to CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-HOUSE-NUM",
            "semantic_type": "ADDRESS_HOUSE_NUMBER",
            "source": "Used in INSERT operation to CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POSTCODE",
            "semantic_type": "ADDRESS_POSTAL_CODE",
            "source": "Used in INSERT operation to CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-MOBILE",
            "semantic_type": "CONTACT_MOBILE_PHONE",
            "source": "Used in INSERT operation to CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-HOME",
            "semantic_type": "CONTACT_HOME_PHONE",
            "source": "Used in INSERT operation to CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-EMAIL-ADDRESS",
            "semantic_type": "CONTACT_EMAIL",
            "source": "Used in INSERT operation to CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "D2-CUSTSECR-PASS",
            "semantic_type": "SECURITY_PASSWORD_HASH",
            "source": "Passed to LGACDB02 program for security record creation",
            "related_entities": [
              "CustomerSecurity"
            ],
            "confidence": "high"
          },
          {
            "parameter": "D2-CUSTSECR-STATE",
            "semantic_type": "SECURITY_ACCOUNT_STATE",
            "source": "Passed to LGACDB02 program for security record creation",
            "related_entities": [
              "CustomerSecurity"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Customer numbers must be unique",
            "implementation": "Uses a CICS counter (GENACUSTNUM) or database auto-increment to generate unique customer IDs"
          },
          {
            "rule": "Customer records require complete personal information",
            "implementation": "SQL INSERT statement includes fields for name, DOB, address, and contact information"
          },
          {
            "rule": "Customer security records must be created with each customer",
            "implementation": "Links to LGACDB02 program to create security records after customer creation"
          },
          {
            "rule": "Customer data must be persisted in multiple systems",
            "implementation": "Creates database record and links to LGACVS01 for file-based persistence"
          },
          {
            "rule": "New customer security accounts start in inactive state",
            "implementation": "Sets D2-CUSTSECR-STATE to 'N' before linking to security creation program"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "db",
              "target": "CUSTOMER table",
              "data": "Customer personal and contact information"
            },
            {
              "type": "api",
              "target": "LGACVS01",
              "data": "Customer data for file persistence"
            },
            {
              "type": "api",
              "target": "LGACDB02",
              "data": "Customer security information"
            },
            {
              "type": "api",
              "target": "LGSTSQ",
              "data": "Error logging information"
            }
          ],
          "data_sources": [
            "COMMAREA input",
            "GENACUSTNUM counter"
          ],
          "data_destinations": [
            "CUSTOMER database table",
            "Customer file via LGACVS01",
            "Security records via LGACDB02"
          ]
        },
        "features": [
          {
            "feature": "Customer Registration",
            "rules": [
              {
                "rule": "Create new customer record with unique ID",
                "scenario": "New customer onboarding",
                "steps": [
                  {
                    "step": "Validate COMMAREA length",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "COMMAREA too short (return code 98)"
                  },
                  {
                    "step": "Obtain unique customer number",
                    "external": true,
                    "step_type": "read",
                    "objects": [
                      {
                        "name": "GENACUSTNUM",
                        "object_type": "counter",
                        "when": "LGAC-NCS = 'ON'"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Counter access failure"
                  },
                  {
                    "step": "Insert customer record",
                    "external": true,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "CUSTOMER",
                        "object_type": "table",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "SQL error (return code 90)"
                  },
                  {
                    "step": "Persist customer to file",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGACVS01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None handled explicitly"
                  },
                  {
                    "step": "Create customer security record",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGACDB02",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None handled explicitly"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "CUSTOMER": "Primary entity representing a person with personal and contact information",
          "CUSTOMERNUMBER": "Unique identifier for a customer",
          "CUSTSECR": "Customer security record for authentication",
          "GENACUSTNUM": "Generator for unique customer identifiers"
        },
        "program_context": {
          "program_name": "LGACDB01",
          "includes": [
            "LGPOLICY",
            "LGCMAREA",
            "SQLCA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Structured"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "SQL": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "Enterprise COBOL",
            "IBM COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "Hierarchical data structures with 01, 03 level indicators",
            "PIC (Picture) clauses for data type definition",
            "COMP (Computational) numeric storage",
            "Fixed-format source code layout",
            "Explicit length and type declarations",
            "DB2 integration hints",
            "Enterprise mainframe data processing patterns"
          ]
        },
        "business_domain": "Party Reference",
        "service_domain": "Party Reference Data Directory"
      }
    },
    "LGAPOL01": {
      "name": "LGAPOL01",
      "calls": [
        "LGAPBR01",
        "LGAPDB01",
        "LGSTSQ"
      ],
      "called_by": [
        "LGTESTP4",
        "LGTESTP3",
        "LGTESTP1",
        "LGTESTP2"
      ],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [
        "LGCMAREA"
      ],
      "data_structures": {},
      "community": "Community 4",
      "program_language": "COBOL",
      "understanding": {
        "comments": "The program processes various insurance policy requests, conditionally applies business rules for endowment policies, and stores policy data in a database.",
        "title": "Insurance Policy Processing and Database Integration",
        "purpose": {
          "business_goal": [
            "Process insurance policy requests",
            "Integrate with business rules for endowment policies",
            "Store policy data in database"
          ],
          "implementation": "Routes policy requests to appropriate processing modules based on request type, with special handling for endowment policies that can use business rules processing"
        },
        "program_type": {
          "category": "business",
          "function": "Policy data processing"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              },
              {
                "architecture": "Business Architecture",
                "layer": "Business Processes"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Policy Request Router",
                "description": "Routes policy requests to appropriate processing modules based on request type",
                "shortName": "MAINLINE",
                "codeBlocks": "MAINLINE SECTION"
              },
              {
                "name": "Business Rules Integration",
                "description": "Conditionally routes endowment policy requests to business rules processing",
                "shortName": "RULES-ROUTER",
                "codeBlocks": "If IN-RULES-MODE And CA-REQUEST-ID = '01AEND'"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "MAINLINE section contains the core business logic for routing policy requests",
              "Conditional logic for routing endowment policies to business rules processing",
              "Business rules flag (IN-RULES-MODE) controls processing flow",
              "Policy type identification and routing based on CA-REQUEST-ID",
              "Policy-specific data structures for different insurance products (endowment, house, motor, commercial, claim)"
            ],
            "architectural_layer_semantic_keywords": [
              "process",
              "validate",
              "route",
              "business rules"
            ]
          },
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Database Operations",
                "description": "Links to database program to store policy information",
                "shortName": "DB-OPS",
                "codeBlocks": "EXEC CICS Link Program(LGAPDB01)"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "10%",
            "evidence": [
              "EXEC CICS Link to LGAPDB01 for database operations",
              "Passing of policy data to database module",
              "Return code handling from database operations"
            ],
            "architectural_layer_semantic_keywords": [
              "database",
              "store"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "API-Driven"
            ],
            "elements": [
              {
                "name": "Business Rules Engine Integration",
                "description": "Integration with external business rules engine for endowment policies",
                "shortName": "BR-INT",
                "codeBlocks": "EXEC CICS Link Program(LGAPBR01)"
              },
              {
                "name": "Error Logging",
                "description": "Formats and logs error messages to external logging service",
                "shortName": "ERR-LOG",
                "codeBlocks": "WRITE-ERROR-MESSAGE"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "30%",
            "evidence": [
              "EXEC CICS Link to LGAPBR01 for business rules processing",
              "EXEC CICS Link to LGSTSQ for error logging",
              "Formatting of error messages for external logging",
              "Integration with external time services via EXEC CICS ASKTIME and FORMATTIME"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "external",
              "integration"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Insurance Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-POLICY-REQUEST",
                "reference": "Policy data structure in DFHCOMMAREA"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create",
              "read",
              "update"
            ],
            "attributes": [
              "CA-POLICY-NUM",
              "CA-ISSUE-DATE",
              "CA-EXPIRY-DATE",
              "CA-LASTCHANGED",
              "CA-BROKERID",
              "CA-BROKERSREF",
              "CA-PAYMENT"
            ],
            "business_context": "Core business entity representing insurance contracts between customers and the insurance company"
          },
          {
            "name": "Endowment Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-ENDOWMENT",
                "reference": "Endowment policy data in CA-POLICY-SPECIFIC"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create",
              "read",
              "update"
            ],
            "attributes": [
              "CA-E-WITH-PROFITS",
              "CA-E-EQUITIES",
              "CA-E-MANAGED-FUND",
              "CA-E-FUND-NAME",
              "CA-E-TERM",
              "CA-E-SUM-ASSURED",
              "CA-E-LIFE-ASSURED"
            ],
            "business_context": "Specialized insurance policy type that requires business rules processing"
          },
          {
            "name": "House Insurance Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-HOUSE",
                "reference": "House insurance data in CA-POLICY-SPECIFIC"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create",
              "read",
              "update"
            ],
            "attributes": [
              "CA-H-PROPERTY-TYPE",
              "CA-H-BEDROOMS",
              "CA-H-VALUE",
              "CA-H-HOUSE-NAME",
              "CA-H-HOUSE-NUMBER",
              "CA-H-POSTCODE"
            ],
            "business_context": "Insurance policy type covering residential properties"
          },
          {
            "name": "Motor Insurance Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-MOTOR",
                "reference": "Motor insurance data in CA-POLICY-SPECIFIC"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create",
              "read",
              "update"
            ],
            "attributes": [
              "CA-M-MAKE",
              "CA-M-MODEL",
              "CA-M-VALUE",
              "CA-M-REGNUMBER",
              "CA-M-COLOUR",
              "CA-M-CC",
              "CA-M-MANUFACTURED",
              "CA-M-PREMIUM",
              "CA-M-ACCIDENTS"
            ],
            "business_context": "Insurance policy type covering motor vehicles"
          },
          {
            "name": "Commercial Insurance Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-COMMERCIAL",
                "reference": "Commercial insurance data in CA-POLICY-SPECIFIC"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create",
              "read",
              "update"
            ],
            "attributes": [
              "CA-B-Address",
              "CA-B-Postcode",
              "CA-B-PropType",
              "CA-B-FirePeril",
              "CA-B-CrimePeril",
              "CA-B-FloodPeril",
              "CA-B-WeatherPeril",
              "CA-B-Status"
            ],
            "business_context": "Insurance policy type covering commercial properties with multiple peril types"
          },
          {
            "name": "Insurance Claim",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-CLAIM",
                "reference": "Claim data in CA-POLICY-SPECIFIC"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create",
              "read",
              "update"
            ],
            "attributes": [
              "CA-C-Num",
              "CA-C-Date",
              "CA-C-Paid",
              "CA-C-Value",
              "CA-C-Cause",
              "CA-C-Observations"
            ],
            "business_context": "Represents customer claims against their insurance policies"
          },
          {
            "name": "Customer",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-CUSTOMER-REQUEST",
                "reference": "Customer data in CA-REQUEST-SPECIFIC"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CA-CUSTOMER-NUM",
              "CA-FIRST-NAME",
              "CA-LAST-NAME",
              "CA-DOB",
              "CA-HOUSE-NAME",
              "CA-HOUSE-NUM",
              "CA-POSTCODE",
              "CA-NUM-POLICIES",
              "CA-PHONE-MOBILE",
              "CA-PHONE-HOME",
              "CA-EMAIL-ADDRESS"
            ],
            "business_context": "Entity representing the policyholder who owns one or more insurance policies"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "TRANSACTION_CODE",
            "source": "Used to determine processing path in MAINLINE section",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used to identify customer in error messages and passed to database operations",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_ID",
            "source": "Uniquely identifies an insurance policy",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-E-WITH-PROFITS",
            "semantic_type": "POLICY_FEATURE_INDICATOR",
            "source": "Indicates if endowment policy has with-profits feature",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-M-CC",
            "semantic_type": "ENGINE_CAPACITY",
            "source": "Represents cubic capacity of motor vehicle engine",
            "related_entities": [
              "Motor Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-FirePeril",
            "semantic_type": "RISK_FACTOR",
            "source": "Risk assessment for fire peril in commercial insurance",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-C-Num",
            "semantic_type": "CLAIM_ID",
            "source": "Uniquely identifies an insurance claim",
            "related_entities": [
              "Insurance Claim"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Endowment policies can be processed through business rules engine",
            "implementation": "If IN-RULES-MODE And CA-REQUEST-ID = '01AEND' then link to LGAPBR01 for business rules processing"
          },
          {
            "rule": "All policy types must be stored in the database",
            "implementation": "Program links to LGAPDB01 for database operations regardless of policy type"
          },
          {
            "rule": "Non-zero return codes terminate processing",
            "implementation": "If CA-RETURN-CODE > 0 then EXEC CICS RETURN"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "api",
              "target": "LGAPBR01",
              "data": "Endowment policy data for business rules processing"
            },
            {
              "type": "api",
              "target": "LGAPDB01",
              "data": "Policy data for database operations"
            },
            {
              "type": "api",
              "target": "LGSTSQ",
              "data": "Error messages for logging"
            }
          ],
          "data_sources": [
            "DFHCOMMAREA (input policy request data)"
          ],
          "data_destinations": [
            "LGAPDB01 (database storage)",
            "LGAPBR01 (business rules processing)",
            "LGSTSQ (error logging)"
          ]
        },
        "features": [
          {
            "feature": "Policy Request Processing",
            "rules": [
              {
                "rule": "Route policy requests based on type",
                "scenario": "Process different types of insurance policies",
                "steps": [
                  {
                    "step": "Validate COMMAREA received",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "EIBCALEN IS EQUAL TO ZERO",
                    "exceptions": "ABEND with code 'LGCA'"
                  },
                  {
                    "step": "Process endowment policy with business rules",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGAPBR01",
                        "object_type": "program",
                        "when": "IN-RULES-MODE And CA-REQUEST-ID = '01AEND'"
                      }
                    ],
                    "when": "IN-RULES-MODE And CA-REQUEST-ID = '01AEND'",
                    "exceptions": "None specified"
                  },
                  {
                    "step": "Store policy data in database",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGAPDB01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Non-zero return code"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Error Handling and Logging",
            "rules": [
              {
                "rule": "Log errors with timestamp",
                "scenario": "Record error conditions for troubleshooting",
                "steps": [
                  {
                    "step": "Get current time",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "CICS ASKTIME",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None specified"
                  },
                  {
                    "step": "Format time for error message",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "CICS FORMATTIME",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None specified"
                  },
                  {
                    "step": "Write error message to log",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None specified"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Endowment": "Life insurance policy that pays out a lump sum after a specified term or on death",
          "With-Profits": "Investment feature where policyholder receives bonuses based on profits",
          "Equities": "Investment in stocks as part of an endowment policy",
          "Managed-Fund": "Investment fund managed by professionals as part of an endowment policy",
          "Sum-Assured": "Amount guaranteed to be paid out on an insurance policy",
          "Peril": "Specific risk covered by an insurance policy (fire, crime, flood, weather)",
          "Premium": "Amount paid by policyholder for insurance coverage"
        },
        "program_context": {
          "program_name": "LGAPOL01",
          "includes": [
            "LGCMAREA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "SQL": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "LINKAGE SECTION",
            "PIC (Picture) clauses for data definition",
            "88-level conditional variables",
            "REDEFINES clause for data structure manipulation",
            "COMP (Computational) storage optimizations",
            "Hierarchical data structure with 01, 03, 05 level numbers",
            "Fixed-format source code layout",
            "Explicit division and section structure"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Policy Management"
      }
    },
    "LGUPDB01": {
      "name": "LGUPDB01",
      "calls": [
        "LGUPVS01",
        "LGSTSQ"
      ],
      "called_by": [],
      "uses_tables": [
        {
          "name": "HOUSE",
          "persistent_perations": [
            "update"
          ]
        },
        {
          "name": "POLICY",
          "persistent_perations": [
            "update",
            "read"
          ]
        },
        {
          "name": "ENDOWMENT",
          "persistent_perations": [
            "update"
          ]
        },
        {
          "name": "ISSUEDATE",
          "persistent_perations": [
            "update"
          ]
        },
        {
          "name": "MOTOR",
          "persistent_perations": [
            "update"
          ]
        }
      ],
      "uses_screens": [],
      "includes": [
        "LGPOLICY",
        "LGCMAREA",
        "SQLCA"
      ],
      "data_structures": {},
      "community": "Community 6",
      "program_language": "COBOL",
      "understanding": {
        "comments": "This program updates insurance policy records in a database, supporting multiple insurance product types (Endowment, House, Motor) with specialized data fields for each type.",
        "title": "Insurance Policy Database Update Program",
        "purpose": {
          "business_goal": [
            "Update insurance policy records in a database",
            "Support multiple insurance product types (Endowment, House, Motor)"
          ],
          "implementation": "Uses SQL to update policy information in various database tables based on the policy type received in the COMMAREA"
        },
        "program_type": {
          "category": "business",
          "function": "database_update"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Relational Databases"
            ],
            "elements": [
              {
                "name": "Policy Database Operations",
                "description": "Handles SQL operations for policy data in the database",
                "shortName": "PolicyDB",
                "codeBlocks": "UPDATE-POLICY-DB2-INFO, UPDATE-ENDOW-DB2-INFO, UPDATE-HOUSE-DB2-INFO, UPDATE-MOTOR-DB2-INFO, FETCH-DB2-POLICY-ROW"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "70%",
            "evidence": [
              "EXEC SQL UPDATE POLICY SET ISSUEDATE = :CA-ISSUE-DATE...",
              "EXEC SQL UPDATE ENDOWMENT SET WITHPROFITS = :CA-E-WITH-PROFITS...",
              "EXEC SQL UPDATE HOUSE SET PROPERTYTYPE = :CA-H-PROPERTY-TYPE...",
              "EXEC SQL UPDATE MOTOR SET MAKE = :CA-M-MAKE...",
              "EXEC SQL OPEN POLICY_CURSOR",
              "EXEC SQL FETCH POLICY_CURSOR INTO :DB2-ISSUEDATE...",
              "EXEC SQL CLOSE POLICY_CURSOR"
            ],
            "architectural_layer_semantic_keywords": [
              "update",
              "select",
              "fetch",
              "cursor",
              "SQL",
              "database"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              },
              {
                "architecture": "Business Architecture",
                "layer": "Business Processes"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Insurance Policy Processing",
                "description": "Handles business rules for updating different types of insurance policies",
                "shortName": "PolicyProc",
                "codeBlocks": "MAINLINE, UPDATE-POLICY-DB2-INFO"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "EVALUATE CA-REQUEST-ID WHEN '01UEND' PERFORM UPDATE-ENDOW-DB2-INFO...",
              "IF CA-LASTCHANGED EQUAL TO DB2-LASTCHANGED...",
              "MOVE CA-CUSTOMER-NUM TO DB2-CUSTOMERNUM-INT",
              "MOVE CA-E-TERM TO DB2-E-TERM-SINT",
              "MOVE CA-H-BEDROOMS TO DB2-H-BEDROOMS-SINT",
              "MOVE CA-M-CC TO DB2-M-CC-SINT"
            ],
            "architectural_layer_semantic_keywords": [
              "evaluate",
              "process",
              "validate",
              "transform"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Messaging"
            ],
            "elements": [
              {
                "name": "Error Handling and Logging",
                "description": "Handles error messages and logs them to a transient data queue",
                "shortName": "ErrorLog",
                "codeBlocks": "WRITE-ERROR-MESSAGE"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "10%",
            "evidence": [
              "EXEC CICS LINK PROGRAM('LGSTSQ') COMMAREA(ERROR-MSG)...",
              "MOVE SQLCODE TO EM-SQLRC",
              "EXEC CICS ASKTIME ABSTIME(WS-ABSTIME)",
              "EXEC CICS FORMATTIME ABSTIME(WS-ABSTIME) MMDDYYYY(WS-DATE) TIME(WS-TIME)"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "message",
              "error",
              "log"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Insurance Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "POLICY",
                "reference": "Main policy information table"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read",
              "update"
            ],
            "attributes": [
              "POLICYNUMBER",
              "ISSUEDATE",
              "EXPIRYDATE",
              "LASTCHANGED",
              "BROKERID",
              "BROKERSREFERENCE"
            ],
            "business_context": "Core entity representing insurance contracts with common policy information across all policy types"
          },
          {
            "name": "Endowment Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "ENDOWMENT",
                "reference": "Endowment-specific policy information"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "update"
            ],
            "attributes": [
              "WITHPROFITS",
              "EQUITIES",
              "MANAGEDFUND",
              "FUNDNAME",
              "TERM",
              "SUMASSURED",
              "LIFEASSURED"
            ],
            "business_context": "Specialized insurance policy type for life insurance with investment components"
          },
          {
            "name": "House Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "HOUSE",
                "reference": "House-specific policy information"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "update"
            ],
            "attributes": [
              "PROPERTYTYPE",
              "BEDROOMS",
              "VALUE",
              "HOUSENAME",
              "HOUSENUMBER",
              "POSTCODE"
            ],
            "business_context": "Specialized insurance policy type for residential property coverage"
          },
          {
            "name": "Motor Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "MOTOR",
                "reference": "Motor-specific policy information"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "update"
            ],
            "attributes": [
              "MAKE",
              "MODEL",
              "VALUE",
              "REGNUMBER",
              "COLOUR",
              "CC",
              "YEAROFMANUFACTURE",
              "PREMIUM",
              "ACCIDENTS"
            ],
            "business_context": "Specialized insurance policy type for motor vehicle coverage"
          },
          {
            "name": "Customer",
            "sources": [
              {
                "type": "variable",
                "source_name": "CA-CUSTOMER-NUM",
                "reference": "Customer identifier in COMMAREA"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CUSTOMERNUMBER"
            ],
            "business_context": "Entity representing the policyholder who owns one or more insurance policies"
          },
          {
            "name": "Error Log",
            "sources": [
              {
                "type": "queue",
                "source_name": "LGSTSQ",
                "reference": "Transient data queue for error logging"
              }
            ],
            "importance": "tertiary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "DATE",
              "TIME",
              "SQLCODE",
              "CUSTOMER_NUMBER",
              "POLICY_NUMBER"
            ],
            "business_context": "Support entity for recording errors during policy update operations"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "TRANSACTION_CODE",
            "source": "Used to determine which type of policy to update",
            "related_entities": [
              "Insurance Policy",
              "Endowment Policy",
              "House Policy",
              "Motor Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as a key in database queries",
            "related_entities": [
              "Customer",
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_ID",
            "source": "Used as a key in database queries",
            "related_entities": [
              "Insurance Policy",
              "Endowment Policy",
              "House Policy",
              "Motor Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-LASTCHANGED",
            "semantic_type": "TIMESTAMP",
            "source": "Used for optimistic locking in database updates",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Used to indicate success or failure of operations",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-M-CC",
            "semantic_type": "ENGINE_CAPACITY",
            "source": "Field in Motor policy specific to engine size in cubic centimeters",
            "related_entities": [
              "Motor Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-E-SUM-ASSURED",
            "semantic_type": "MONETARY_AMOUNT",
            "source": "Field in Endowment policy representing insurance coverage amount",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-H-VALUE",
            "semantic_type": "PROPERTY_VALUE",
            "source": "Field in House policy representing property value",
            "related_entities": [
              "House Policy"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Policy updates require optimistic locking via timestamp comparison",
            "implementation": "IF CA-LASTCHANGED EQUAL TO DB2-LASTCHANGED - Only allows update if the policy hasn't been modified since it was retrieved"
          },
          {
            "rule": "Policy updates must be committed or rolled back as a single transaction",
            "implementation": "EXEC CICS SYNCPOINT ROLLBACK END-EXEC - Ensures data integrity by rolling back failed transactions"
          },
          {
            "rule": "Policy type determines which specialized update routine is executed",
            "implementation": "EVALUATE CA-REQUEST-ID WHEN '01UEND' PERFORM UPDATE-ENDOW-DB2-INFO... - Routes to appropriate policy-specific update routine based on request ID"
          },
          {
            "rule": "All policy updates must update the timestamp to current time",
            "implementation": "SET LASTCHANGED = CURRENT TIMESTAMP - Ensures the last modification time is always recorded"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "db",
              "target": "DB2 database",
              "data": "Insurance policy data"
            },
            {
              "type": "api",
              "target": "LGUPVS01",
              "data": "Policy data for additional processing"
            },
            {
              "type": "messaging",
              "target": "LGSTSQ",
              "data": "Error messages"
            }
          ],
          "data_sources": [
            "COMMAREA input from calling program"
          ],
          "data_destinations": [
            "POLICY table",
            "ENDOWMENT table",
            "HOUSE table",
            "MOTOR table",
            "Error log queue"
          ]
        },
        "features": [
          {
            "feature": "Update Insurance Policy Information",
            "rules": [
              {
                "rule": "Update common policy information and policy-specific details",
                "scenario": "User submits updated policy information",
                "steps": [
                  {
                    "step": "Validate input parameters",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "Missing COMMAREA"
                  },
                  {
                    "step": "Retrieve current policy information",
                    "external": false,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "POLICY",
                        "object_type": "table",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Policy not found, SQL error"
                  },
                  {
                    "step": "Check optimistic lock",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "Timestamp mismatch"
                  },
                  {
                    "step": "Update policy-specific information",
                    "external": false,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "ENDOWMENT",
                        "object_type": "table",
                        "when": "CA-REQUEST-ID = '01UEND'"
                      },
                      {
                        "name": "HOUSE",
                        "object_type": "table",
                        "when": "CA-REQUEST-ID = '01UHOU'"
                      },
                      {
                        "name": "MOTOR",
                        "object_type": "table",
                        "when": "CA-REQUEST-ID = '01UMOT'"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "SQL error"
                  },
                  {
                    "step": "Update common policy information",
                    "external": false,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "POLICY",
                        "object_type": "table",
                        "when": "Always"
                      }
                    ],
                    "when": "Policy-specific update successful",
                    "exceptions": "SQL error"
                  },
                  {
                    "step": "Additional policy processing",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGUPVS01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Program error"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Endowment": "Life insurance policy with investment component",
          "House": "Property insurance policy for residential buildings",
          "Motor": "Vehicle insurance policy",
          "Broker": "Insurance intermediary who sells policies",
          "Premium": "Amount paid for insurance coverage",
          "Sum Assured": "Amount of coverage provided by an insurance policy",
          "Policy": "Insurance contract between insurer and policyholder"
        },
        "program_context": {
          "program_name": "LGUPDB01",
          "includes": [
            "LGPOLICY",
            "LGCMAREA",
            "SQLCA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Structured Programming",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 95,
            "SQL": 5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PIC (Picture) clauses for data definition",
            "Explicit length and type declarations",
            "EXEC SQL inclusion",
            "Hierarchical data structure with 01, 03, 05 level numbers",
            "COMP (Computational) storage usage",
            "Fixed-format source code layout",
            "Verbose division-based program structure"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Policy Management"
      }
    },
    "LGUCDB01": {
      "name": "LGUCDB01",
      "calls": [
        "LGSTSQ",
        "LGUCVS01"
      ],
      "called_by": [
        "LGUCUS01"
      ],
      "uses_tables": [
        {
          "name": "CUSTOMER",
          "persistent_perations": [
            "update"
          ]
        }
      ],
      "uses_screens": [],
      "includes": [
        "LGPOLICY",
        "LGCMAREA",
        "SQLCA"
      ],
      "data_structures": {},
      "community": "Community 8",
      "program_language": "COBOL",
      "understanding": {
        "comments": "Customer database update program that modifies customer profile information in the CUSTOMER table and performs additional validation",
        "title": "Customer Profile Update Service",
        "purpose": {
          "business_goal": [
            "Update customer information in the database",
            "Maintain customer records with proper validation"
          ],
          "implementation": "Uses SQL UPDATE statement to modify customer records in the CUSTOMER table based on data received in the COMMAREA, then links to LGUCVS01 for additional validation"
        },
        "program_type": {
          "category": "business",
          "function": "data maintenance"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Relational Databases"
            ],
            "elements": [
              {
                "name": "UPDATE-CUSTOMER-INFO",
                "description": "Updates customer information in the database using SQL",
                "shortName": "CUST-UPDATE",
                "codeBlocks": "UPDATE-CUSTOMER-INFO section"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "EXEC SQL UPDATE CUSTOMER SET FIRSTNAME = :CA-FIRST-NAME, LASTNAME = :CA-LAST-NAME...",
              "WHERE CUSTOMERNUMBER = :DB2-CUSTOMERNUM-INT",
              "SQL operations to modify customer data in database"
            ],
            "architectural_layer_semantic_keywords": [
              "update",
              "database",
              "SQL",
              "customer"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "MAINLINE",
                "description": "Main program control flow - initializes variables, validates COMMAREA, and calls the update function",
                "shortName": "MAIN",
                "codeBlocks": "MAINLINE section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "MOVE CA-CUSTOMER-NUM TO DB2-CUSTOMERNUM-INT",
              "PERFORM UPDATE-CUSTOMER-INFO",
              "EXEC CICS LINK Program(LGUCVS01) Commarea(DFHCOMMAREA) LENGTH(225)",
              "Validation of COMMAREA presence"
            ],
            "architectural_layer_semantic_keywords": [
              "validate",
              "process",
              "control flow"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Messaging"
            ],
            "elements": [
              {
                "name": "WRITE-ERROR-MESSAGE",
                "description": "Formats and logs error messages using the LGSTSQ program",
                "shortName": "ERR-LOG",
                "codeBlocks": "WRITE-ERROR-MESSAGE section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "EXEC CICS LINK PROGRAM('LGSTSQ') COMMAREA(ERROR-MSG) LENGTH(LENGTH OF ERROR-MSG)",
              "MOVE SQLCODE TO EM-SQLRC",
              "Formatting error messages and linking to external error logging program"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "error",
              "message",
              "log"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Customer",
            "sources": [
              {
                "type": "table",
                "source_name": "CUSTOMER",
                "reference": "SQL UPDATE operation in UPDATE-CUSTOMER-INFO section"
              },
              {
                "type": "record",
                "source_name": "CA-CUSTOMER-REQUEST",
                "reference": "COMMAREA structure used for customer data"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "update"
            ],
            "attributes": [
              "CUSTOMERNUMBER",
              "FIRSTNAME",
              "LASTNAME",
              "DATEOFBIRTH",
              "HOUSENAME",
              "HOUSENUMBER",
              "POSTCODE",
              "PHONEMOBILE",
              "PHONEHOME",
              "EMAILADDRESS"
            ],
            "business_context": "Core entity representing customer information in the insurance/financial services system"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as primary key in SQL UPDATE statement",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-FIRST-NAME",
            "semantic_type": "PERSON_FIRST_NAME",
            "source": "Used to update FIRSTNAME column in CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-LAST-NAME",
            "semantic_type": "PERSON_LAST_NAME",
            "source": "Used to update LASTNAME column in CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-DOB",
            "semantic_type": "PERSON_DATE_OF_BIRTH",
            "source": "Used to update DATEOFBIRTH column in CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-HOUSE-NAME",
            "semantic_type": "ADDRESS_HOUSE_NAME",
            "source": "Used to update HOUSENAME column in CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-HOUSE-NUM",
            "semantic_type": "ADDRESS_HOUSE_NUMBER",
            "source": "Used to update HOUSENUMBER column in CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POSTCODE",
            "semantic_type": "ADDRESS_POSTAL_CODE",
            "source": "Used to update POSTCODE column in CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-MOBILE",
            "semantic_type": "CONTACT_MOBILE_PHONE",
            "source": "Used to update PHONEMOBILE column in CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-HOME",
            "semantic_type": "CONTACT_HOME_PHONE",
            "source": "Used to update PHONEHOME column in CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-EMAIL-ADDRESS",
            "semantic_type": "CONTACT_EMAIL",
            "source": "Used to update EMAILADDRESS column in CUSTOMER table",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Used to indicate success (00), record not found (01), or error (90)",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Customer record must exist for update",
            "implementation": "SQLCODE 100 (record not found) sets CA-RETURN-CODE to '01'"
          },
          {
            "rule": "Database errors must be logged",
            "implementation": "SQLCODE not equal to 0 or 100 sets CA-RETURN-CODE to '90' and calls WRITE-ERROR-MESSAGE"
          },
          {
            "rule": "Customer updates require additional validation",
            "implementation": "After database update, program links to LGUCVS01 for additional validation"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "db",
              "target": "CUSTOMER table",
              "data": "customer profile information"
            },
            {
              "type": "messaging",
              "target": "LGUCVS01",
              "data": "customer data for validation"
            },
            {
              "type": "messaging",
              "target": "LGSTSQ",
              "data": "error logging"
            }
          ],
          "data_sources": [
            "COMMAREA input parameters"
          ],
          "data_destinations": [
            "CUSTOMER database table",
            "LGUCVS01 validation service",
            "LGSTSQ error logging service"
          ]
        },
        "features": [
          {
            "feature": "Customer Profile Update",
            "rules": [
              {
                "rule": "Update customer information in database",
                "scenario": "User submits updated customer information",
                "steps": [
                  {
                    "step": "Validate COMMAREA presence",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "EIBCALEN IS EQUAL TO ZERO",
                    "exceptions": "ABEND with code 'LGCA'"
                  },
                  {
                    "step": "Update customer information in database",
                    "external": false,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "CUSTOMER",
                        "object_type": "table",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "SQLCODE not equal to 0"
                  },
                  {
                    "step": "Log error if database update fails",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "SQLCODE not equal to 0 and not equal to 100"
                      }
                    ],
                    "when": "SQLCODE not equal to 0 and not equal to 100",
                    "exceptions": "None"
                  },
                  {
                    "step": "Perform additional validation",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGUCVS01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "CUSTOMER": "Core entity representing a client in the insurance/financial system",
          "CUSTOMERNUMBER": "Unique identifier for a customer",
          "RETURN-CODE": "Status code indicating success or failure of an operation"
        },
        "program_context": {
          "program_name": "LGUCDB01",
          "includes": [
            "LGPOLICY",
            "LGCMAREA",
            "SQLCA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Structured Programming"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 95,
            "SQL": 5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PIC (Picture) clauses for data definition",
            "COMP (Computational) storage types",
            "Embedded SQL with EXEC SQL statement",
            "Fixed-format source code layout",
            "Hierarchical data structure definitions",
            "Verbose, self-documenting syntax",
            "Strong typing with explicit length declarations"
          ]
        },
        "business_domain": "Party Reference",
        "service_domain": "Party Reference Data Directory"
      }
    },
    "LGICUS01": {
      "name": "LGICUS01",
      "calls": [
        "LGICDB01",
        "AAAAAAAA",
        "LGSTSQ"
      ],
      "called_by": [
        "LGTESTC1"
      ],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [
        "LGPOLICY",
        "LGCMAREA"
      ],
      "data_structures": {},
      "community": "Community 7",
      "program_language": "COBOL",
      "understanding": {
        "comments": "Program serves as a middleware component for customer information retrieval with configurable backend access paths",
        "title": "Customer Information Retrieval Service",
        "purpose": {
          "business_goal": [
            "Retrieve customer information",
            "Support customer data lookup operations"
          ],
          "implementation": "Acts as a middleware component that calls a database access module (LGICDB01) to retrieve customer information based on a customer number provided in the COMMAREA"
        },
        "program_type": {
          "category": "business",
          "function": "Customer data retrieval"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Customer Information Orchestration",
                "description": "Orchestrates the customer information retrieval process by validating input and delegating to data access components",
                "shortName": "CustomerOrchestrator",
                "codeBlocks": "MAINLINE, GET-CUSTOMER-INFO"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "MAINLINE section validates COMMAREA parameters before processing",
              "GET-CUSTOMER-INFO determines which data access program to call based on MQ queue status",
              "Program validates customer number and required COMMAREA length",
              "Sets return codes based on processing results (00=success, 98=invalid COMMAREA length)"
            ],
            "architectural_layer_semantic_keywords": [
              "validate",
              "process",
              "orchestrate",
              "control flow"
            ]
          },
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Database Access Delegation",
                "description": "Delegates database access to specialized components based on system state",
                "shortName": "DBAccessDelegator",
                "codeBlocks": "GET-CUSTOMER-INFO"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "25%",
            "evidence": [
              "EXEC CICS LINK to LGICDB01 for normal database access path",
              "EXEC CICS LINK to 'AAAAAAAA' for alternate database access path",
              "Checks temporary storage queue to determine which program to call",
              "No direct database access in this program - delegates to specialized components"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "database",
              "retrieve"
            ]
          },
          {
            "traditionalLayer": "Platform",
            "togaf": [
              {
                "architecture": "Technology Architecture",
                "layer": "Technology Components"
              }
            ],
            "modernLayer": "Infrastructure",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Error Handling and Logging",
                "description": "Formats and logs error messages to system logs",
                "shortName": "ErrorLogger",
                "codeBlocks": "WRITE-ERROR-MESSAGE"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "15%",
            "evidence": [
              "WRITE-ERROR-MESSAGE formats error messages with timestamps",
              "EXEC CICS LINK to 'LGSTSQ' for error logging",
              "EXEC CICS ASKTIME and FORMATTIME for timestamp generation",
              "Error handling for missing or invalid COMMAREA"
            ],
            "architectural_layer_semantic_keywords": [
              "error",
              "log",
              "format",
              "timestamp"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Customer",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-CUSTOMER-REQUEST",
                "reference": "Customer information structure in COMMAREA"
              },
              {
                "type": "record",
                "source_name": "DB2-CUSTOMER",
                "reference": "Database customer record structure"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CA-CUSTOMER-NUM",
              "CA-FIRST-NAME",
              "CA-LAST-NAME",
              "CA-DOB",
              "CA-HOUSE-NAME",
              "CA-HOUSE-NUM",
              "CA-POSTCODE",
              "CA-PHONE-MOBILE",
              "CA-PHONE-HOME",
              "CA-EMAIL-ADDRESS"
            ],
            "business_context": "Core entity representing customer demographic and contact information"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as the key identifier to retrieve customer information",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Set to indicate success (00) or error (98) conditions",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "MQ-Control",
            "semantic_type": "CONFIGURATION_QUEUE",
            "source": "Used to determine which database access program to call",
            "related_entities": [
              "Customer"
            ],
            "confidence": "medium"
          }
        ],
        "business_rules": [
          {
            "rule": "COMMAREA must be present to process a customer information request",
            "implementation": "Program checks EIBCALEN and abends with code 'LGCA' if no COMMAREA is received"
          },
          {
            "rule": "COMMAREA must be of sufficient length to hold customer information",
            "implementation": "Program validates that EIBCALEN is at least the size of WS-REQUIRED-CA-LEN (customer length plus header/trailer) and returns code '98' if insufficient"
          },
          {
            "rule": "Customer information retrieval can be routed to different backend systems",
            "implementation": "Program checks MQ-Control queue to determine whether to call the standard database program (LGICDB01) or an alternate program (AAAAAAAA)"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "inquiry",
          "integration_approaches": [
            {
              "type": "db",
              "target": "LGICDB01",
              "data": "Customer information"
            },
            {
              "type": "db",
              "target": "AAAAAAAA",
              "data": "Customer information (alternate path)"
            },
            {
              "type": "messaging",
              "target": "MQ-Control",
              "data": "Configuration data"
            }
          ],
          "data_sources": [
            "LGICDB01 or AAAAAAAA (database access programs)",
            "MQ-Control (temporary storage queue)"
          ],
          "data_destinations": [
            "Calling program (via COMMAREA)",
            "LGSTSQ (error logging)"
          ]
        },
        "features": [
          {
            "feature": "Customer Information Retrieval",
            "rules": [
              {
                "rule": "Retrieve customer information based on customer number",
                "scenario": "Lookup customer details",
                "steps": [
                  {
                    "step": "Validate COMMAREA length",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "Return code 98 if COMMAREA too small"
                  },
                  {
                    "step": "Check MQ-Control queue to determine processing path",
                    "external": false,
                    "step_type": "read",
                    "objects": [
                      {
                        "name": "MQ-Control",
                        "object_type": "queue",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Call database access program",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGICDB01",
                        "object_type": "program",
                        "when": "MQ-Hit = 0"
                      },
                      {
                        "name": "AAAAAAAA",
                        "object_type": "program",
                        "when": "MQ-Hit = 1"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Error Handling and Logging",
            "rules": [
              {
                "rule": "Log errors with timestamp information",
                "scenario": "Error condition detected",
                "steps": [
                  {
                    "step": "Format timestamp",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Error condition",
                    "exceptions": "None"
                  },
                  {
                    "step": "Write error message to log",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Error condition",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Customer": "Person who has an account with the organization",
          "COMMAREA": "Communication area for passing data between programs",
          "MQ-Control": "Configuration queue that determines processing path"
        },
        "program_context": {
          "program_name": "LGICUS01",
          "includes": [
            "LGPOLICY",
            "LGCMAREA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Structured Programming"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "SQL": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PIC (Picture) clauses for data definition",
            "Hierarchical data structure with 01, 03, 05 level numbers",
            "COMP (Computational) data storage",
            "Fixed-format source code layout",
            "Verbose declarative programming style",
            "Enterprise database interaction hints (DB2 references)",
            "Mainframe/CICS transaction processing indicators"
          ]
        },
        "business_domain": "Party Reference",
        "service_domain": "Party Reference Data Directory"
      }
    },
    "OLDACDB1": {
      "name": "OLDACDB1",
      "calls": [
        "LGACVS01",
        "LGSTSQ",
        "LGACDB02"
      ],
      "called_by": [],
      "uses_tables": [
        {
          "name": "CUSTOMER",
          "persistent_perations": [
            "create"
          ]
        }
      ],
      "uses_screens": [],
      "includes": [
        "LGPOLICY",
        "LGCMAREA",
        "SQLCA"
      ],
      "data_structures": {},
      "community": "Community 5",
      "program_language": "COBOL",
      "understanding": {
        "comments": "Program creates customer records in database and establishes security credentials",
        "title": "Customer Registration and Security Setup Service",
        "purpose": {
          "business_goal": [
            "Create new customer records in database",
            "Set up customer security information"
          ],
          "implementation": "The program inserts customer data into the CUSTOMER table, obtains a unique customer number, persists customer records to a file system via LGACVS01, and establishes security credentials via LGACDB02"
        },
        "program_type": {
          "category": "business",
          "function": "Data persistence"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Relational Databases"
            ],
            "elements": [
              {
                "name": "INSERT-CUSTOMER",
                "description": "Inserts customer data into the CUSTOMER database table",
                "shortName": "InsertCust",
                "codeBlocks": "INSERT-CUSTOMER procedure (lines 445-520)"
              },
              {
                "name": "Obtain-CUSTOMER-Number",
                "description": "Gets a unique customer number from a counter in the GENA pool",
                "shortName": "GetCustNum",
                "codeBlocks": "Obtain-CUSTOMER-Number procedure (lines 425-440)"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "SQL INSERT statements into CUSTOMER table",
              "EXEC SQL SET :DB2-CUSTOMERNUM-INT = IDENTITY_VAL_LOCAL()",
              "EXEC CICS Get Counter(GENAcount) Pool(GENApool) Value(LastCustNum)",
              "Database field mappings in DB2-CUSTOMER structure"
            ],
            "architectural_layer_semantic_keywords": [
              "insert",
              "database",
              "SQL",
              "counter",
              "customer table"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "API-Driven"
            ],
            "elements": [
              {
                "name": "External Program Integration",
                "description": "Links to external programs for file system persistence and security setup",
                "shortName": "ExtLinks",
                "codeBlocks": "MAINLINE procedure (lines 380-420)"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "EXEC CICS LINK Program(LGACVS01) Commarea(DFHCOMMAREA)",
              "EXEC CICS LINK Program(LGACDB02) Commarea(DFHCOMMAREA)",
              "EXEC CICS LINK PROGRAM('LGSTSQ') COMMAREA(ERROR-MSG)"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "program",
              "commarea"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "MAINLINE",
                "description": "Main control flow that validates the COMMAREA, obtains a customer number, inserts customer data, and calls supporting programs",
                "shortName": "MainProc",
                "codeBlocks": "MAINLINE section (lines 380-420)"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "Validation of COMMAREA length and existence",
              "Orchestration of database operations and external program calls",
              "Business entity (customer) creation workflow",
              "Setting up security credentials for customer"
            ],
            "architectural_layer_semantic_keywords": [
              "validate",
              "process",
              "control flow",
              "security"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Customer",
            "sources": [
              {
                "type": "table",
                "source_name": "CUSTOMER",
                "reference": "INSERT INTO CUSTOMER"
              },
              {
                "type": "record",
                "source_name": "CA-CUSTOMER-REQUEST",
                "reference": "CA-CUSTOMER-REQUEST REDEFINES CA-REQUEST-SPECIFIC"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "CUSTOMERNUMBER",
              "FIRSTNAME",
              "LASTNAME",
              "DATEOFBIRTH",
              "HOUSENAME",
              "HOUSENUMBER",
              "POSTCODE",
              "PHONEMOBILE",
              "PHONEHOME",
              "EMAILADDRESS"
            ],
            "business_context": "Core entity representing customer information for insurance and financial services"
          },
          {
            "name": "CustomerSecurity",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-CUSTSECR-REQUEST",
                "reference": "CA-CUSTSECR-REQUEST REDEFINES CA-REQUEST-SPECIFIC"
              },
              {
                "type": "integration",
                "source_name": "LGACDB02",
                "reference": "EXEC CICS LINK Program(LGACDB02)"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "CA-CUSTSECR-PASS",
              "CA-CUSTSECR-COUNT",
              "CA-CUSTSECR-STATE"
            ],
            "business_context": "Security credentials and state for customer authentication"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Generated from database or counter service and used as primary identifier",
            "related_entities": [
              "Customer",
              "CustomerSecurity"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-FIRST-NAME",
            "semantic_type": "PERSON_FIRST_NAME",
            "source": "Used in customer database insert",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-LAST-NAME",
            "semantic_type": "PERSON_LAST_NAME",
            "source": "Used in customer database insert",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-DOB",
            "semantic_type": "PERSON_DATE_OF_BIRTH",
            "source": "Used in customer database insert",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-HOUSE-NAME",
            "semantic_type": "ADDRESS_HOUSE_NAME",
            "source": "Used in customer database insert",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-HOUSE-NUM",
            "semantic_type": "ADDRESS_HOUSE_NUMBER",
            "source": "Used in customer database insert",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POSTCODE",
            "semantic_type": "ADDRESS_POSTAL_CODE",
            "source": "Used in customer database insert",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-MOBILE",
            "semantic_type": "CONTACT_MOBILE_PHONE",
            "source": "Used in customer database insert",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-HOME",
            "semantic_type": "CONTACT_HOME_PHONE",
            "source": "Used in customer database insert",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-EMAIL-ADDRESS",
            "semantic_type": "CONTACT_EMAIL",
            "source": "Used in customer database insert",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTSECR-PASS",
            "semantic_type": "SECURITY_PASSWORD_HASH",
            "source": "Used in security record creation",
            "related_entities": [
              "CustomerSecurity"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Customer records require a unique identifier",
            "implementation": "Program obtains a unique customer number either from a counter service (GENA) or through database auto-increment (IDENTITY_VAL_LOCAL)"
          },
          {
            "rule": "Customer creation requires complete personal information",
            "implementation": "Program validates that the COMMAREA contains sufficient length for customer data before processing"
          },
          {
            "rule": "New customers must have security credentials established",
            "implementation": "After customer creation, program links to LGACDB02 to set up security with predefined password hash"
          },
          {
            "rule": "Customer data must be stored in both database and file system",
            "implementation": "Program links to LGACVS01 to persist customer data to a file system after database insertion"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "db",
              "target": "CUSTOMER table",
              "data": "customer personal information"
            },
            {
              "type": "api",
              "target": "LGACVS01",
              "data": "customer data for file system storage"
            },
            {
              "type": "api",
              "target": "LGACDB02",
              "data": "customer security information"
            }
          ],
          "data_sources": [
            "COMMAREA input parameters",
            "GENA counter service"
          ],
          "data_destinations": [
            "CUSTOMER database table",
            "KSDSCUST file via LGACVS01",
            "CUSTOMER_SECURE table via LGACDB02"
          ]
        },
        "features": [
          {
            "feature": "Customer Registration",
            "rules": [
              {
                "rule": "Create new customer record with unique identifier",
                "scenario": "New customer onboarding",
                "steps": [
                  {
                    "step": "Validate COMMAREA length",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "COMMAREA too short (return code 98)"
                  },
                  {
                    "step": "Obtain unique customer number",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "GENA counter service",
                        "object_type": "service",
                        "when": "LGAC-NCS = 'ON'"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Counter service unavailable"
                  },
                  {
                    "step": "Insert customer record into database",
                    "external": false,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "CUSTOMER",
                        "object_type": "table",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "SQL error (return code 90)"
                  },
                  {
                    "step": "Store customer data in file system",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGACVS01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "After successful database insert",
                    "exceptions": "None specified"
                  },
                  {
                    "step": "Create customer security record",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGACDB02",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "After file system storage",
                    "exceptions": "Non-zero return code"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Customer": "Individual who is registered in the system with personal information",
          "Customer Number": "Unique identifier for a customer record",
          "Security Record": "Authentication credentials associated with a customer account"
        },
        "program_context": {
          "program_name": "OLDACDB1",
          "includes": [
            "LGPOLICY",
            "LGCMAREA",
            "SQLCA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Structured Programming",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "SQL": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business-Oriented Language"
          ],
          "language_version_hints": [
            "Enterprise COBOL",
            "IBM COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PIC X/9 data type declarations",
            "Hierarchical data structure with 01/03/05 level numbers",
            "COMP (computational) storage modifiers",
            "Fixed-format source code layout",
            "Embedded DB2 database record structures",
            "Enterprise mainframe programming style"
          ]
        },
        "business_domain": "Party Reference",
        "service_domain": "Party Reference Data Directory"
      }
    },
    "LGDPDB01": {
      "name": "LGDPDB01",
      "calls": [
        "LGSTSQ",
        "LGDPVS01"
      ],
      "called_by": [
        "LGDPOL01"
      ],
      "uses_tables": [
        {
          "name": "POLICY",
          "persistent_perations": [
            "delete"
          ]
        }
      ],
      "uses_screens": [],
      "includes": [
        "LGCMAREA",
        "SQLCA"
      ],
      "data_structures": {},
      "community": "Community 11",
      "program_language": "COBOL",
      "understanding": {
        "comments": "The program deletes insurance policy records from multiple storage systems based on policy type, customer number, and policy number",
        "title": "Insurance Policy Deletion Service",
        "purpose": {
          "business_goal": [
            "Delete insurance policy records from the database",
            "Support multiple policy types (Endowment, House, Motor, Commercial)"
          ],
          "implementation": "The program deletes policy records from the DB2 POLICY table based on customer number and policy number, then calls LGDPVS01 to delete the corresponding VSAM file record"
        },
        "program_type": {
          "category": "business",
          "function": "Data maintenance"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Relational Databases"
            ],
            "elements": [
              {
                "name": "DELETE-POLICY-DB2-INFO",
                "description": "Deletes policy records from the DB2 POLICY table",
                "shortName": "DB2Delete",
                "codeBlocks": "DELETE-POLICY-DB2-INFO section"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "40%",
            "evidence": [
              "EXEC SQL DELETE FROM POLICY WHERE ( CUSTOMERNUMBER = :DB2-CUSTOMERNUM-INT AND POLICYNUMBER = :DB2-POLICYNUM-INT )",
              "DB2 error handling with SQLCODE checks",
              "DB2-IN-INTEGERS variables for database operations"
            ],
            "architectural_layer_semantic_keywords": [
              "delete",
              "SQL",
              "DB2",
              "POLICY table"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              },
              {
                "architecture": "Business Architecture",
                "layer": "Business Processes"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "MAINLINE",
                "description": "Main program flow that validates input parameters and orchestrates the policy deletion process",
                "shortName": "MainFlow",
                "codeBlocks": "MAINLINE section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "35%",
            "evidence": [
              "Validation of policy types (01DEND, 01DHOU, 01DCOM, 01DMOT)",
              "Business entity handling (policy records, customer numbers)",
              "Orchestration of deletion process across multiple systems",
              "Business-specific return codes (00=success, 90=DB2 error, etc.)"
            ],
            "architectural_layer_semantic_keywords": [
              "validate",
              "process",
              "policy",
              "customer"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Messaging"
            ],
            "elements": [
              {
                "name": "WRITE-ERROR-MESSAGE",
                "description": "Error handling routine that logs error messages using the LGSTSQ utility",
                "shortName": "ErrorLog",
                "codeBlocks": "WRITE-ERROR-MESSAGE section"
              },
              {
                "name": "VSAM Integration",
                "description": "Integration with VSAM file system via LGDPVS01 program",
                "shortName": "VSAMInt",
                "codeBlocks": "EXEC CICS LINK PROGRAM(LGDPVS01)"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "25%",
            "evidence": [
              "EXEC CICS LINK PROGRAM('LGSTSQ') for error logging",
              "EXEC CICS LINK PROGRAM(LGDPVS01) for VSAM file deletion",
              "Integration with external systems for complete policy deletion"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "program",
              "LGSTSQ",
              "LGDPVS01"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Insurance Policy",
            "sources": [
              {
                "type": "table",
                "source_name": "POLICY",
                "reference": "DELETE FROM POLICY WHERE..."
              },
              {
                "type": "file",
                "source_name": "VSAM file",
                "reference": "EXEC CICS LINK PROGRAM(LGDPVS01)"
              },
              {
                "type": "record",
                "source_name": "CA-POLICY-REQUEST",
                "reference": "CA-POLICY-REQUEST REDEFINES CA-REQUEST-SPECIFIC"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "delete"
            ],
            "attributes": [
              "CA-POLICY-NUM",
              "CA-CUSTOMER-NUM",
              "Policy Type (Endowment, House, Motor, Commercial)"
            ],
            "business_context": "Core insurance product sold to customers that needs to be removed from systems when terminated",
            "original_name": "Policy"
          },
          {
            "name": "Customer",
            "sources": [
              {
                "type": "variable",
                "source_name": "CA-CUSTOMER-NUM",
                "reference": "Used as key in policy deletion"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CA-CUSTOMER-NUM"
            ],
            "business_context": "Policy owner whose identifier is required for policy deletion"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "TRANSACTION_CODE",
            "source": "Validation logic in MAINLINE section",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as primary key in DB2 deletion",
            "related_entities": [
              "Customer",
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_ID",
            "source": "Used as primary key in DB2 deletion",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Set to different values based on processing outcomes",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Policy deletion requires both customer number and policy number",
            "implementation": "Both fields are used in the SQL DELETE statement as a composite key"
          },
          {
            "rule": "Only specific policy types can be deleted (Endowment, House, Commercial, Motor)",
            "implementation": "Validation of CA-REQUEST-ID against '01DEND', '01DHOU', '01DCOM', '01DMOT'"
          },
          {
            "rule": "Policy must be deleted from both DB2 and VSAM storage",
            "implementation": "Sequential deletion from DB2 followed by VSAM deletion via LGDPVS01 program"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "db",
              "target": "POLICY table",
              "data": "Policy record"
            },
            {
              "type": "file_access",
              "target": "VSAM file via LGDPVS01",
              "data": "Policy record"
            },
            {
              "type": "messaging",
              "target": "LGSTSQ",
              "data": "Error messages"
            }
          ],
          "data_sources": [
            "DFHCOMMAREA input parameters"
          ],
          "data_destinations": [
            "DB2 POLICY table",
            "VSAM file",
            "Error log"
          ]
        },
        "features": [
          {
            "feature": "Insurance Policy Deletion",
            "rules": [
              {
                "rule": "Delete policy records from multiple storage systems",
                "scenario": "User requests to delete an insurance policy",
                "steps": [
                  {
                    "step": "Validate request ID for supported policy types",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "Invalid request ID sets CA-RETURN-CODE to '99'"
                  },
                  {
                    "step": "Delete policy record from DB2 database",
                    "external": false,
                    "step_type": "query",
                    "objects": [
                      {
                        "name": "POLICY",
                        "object_type": "table",
                        "when": "Valid request ID"
                      }
                    ],
                    "when": "Valid request ID",
                    "exceptions": "DB2 error sets CA-RETURN-CODE to '90'"
                  },
                  {
                    "step": "Delete policy record from VSAM file",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGDPVS01",
                        "object_type": "program",
                        "when": "After successful DB2 deletion"
                      }
                    ],
                    "when": "After successful DB2 deletion",
                    "exceptions": "Any errors from VSAM deletion"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "01DEND": "Endowment policy deletion transaction code",
          "01DHOU": "House policy deletion transaction code",
          "01DCOM": "Commercial policy deletion transaction code",
          "01DMOT": "Motor policy deletion transaction code",
          "POLICY": "Insurance contract database table",
          "CUSTOMERNUMBER": "Customer identifier in database",
          "POLICYNUMBER": "Policy identifier in database"
        },
        "program_context": {
          "program_name": "LGDPDB01",
          "includes": [
            "LGCMAREA",
            "SQLCA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Structured Programming"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 95,
            "SQL": 5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.95,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business-Oriented Programming"
          ],
          "language_version_hints": [
            "COBOL Enterprise",
            "IBM Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "LINKAGE SECTION",
            "EXEC SQL embedded statements",
            "Hierarchical data structure with 01, 03 level indicators",
            "PICTURE clause for data type definition",
            "COMP (computational) numeric storage",
            "REDEFINES clause for data structure remapping",
            "Fixed-format source code layout",
            "Enterprise transaction processing indicators"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Policy Management"
      }
    },
    "LGACUS01": {
      "name": "LGACUS01",
      "calls": [
        "LGSTSQ",
        "LGACDB01"
      ],
      "called_by": [
        "LGTESTC1"
      ],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [
        "LGPOLICY",
        "LGCMAREA"
      ],
      "data_structures": {},
      "community": "Community 15",
      "program_language": "COBOL",
      "understanding": {
        "comments": "This program handles customer registration by validating input data and coordinating with database services for persistence",
        "title": "Customer Registration Service - Frontend Handler",
        "purpose": {
          "business_goal": [
            "Process customer registration requests",
            "Coordinate customer data persistence"
          ],
          "implementation": "Acts as a frontend handler that validates the COMMAREA input and delegates the actual customer creation to LGACDB01"
        },
        "program_type": {
          "category": "business",
          "function": "Customer management"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Customer Registration Handler",
                "description": "Validates customer registration data and coordinates with data services",
                "shortName": "LGACUS01",
                "codeBlocks": "MAINLINE section, INSERT-CUSTOMER section"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "40%",
            "evidence": [
              "MAINLINE section validates COMMAREA input before processing",
              "Program coordinates customer data persistence by delegating to LGACDB01",
              "Validates required COMMAREA length with business rules",
              "Handles business process flow for customer registration"
            ],
            "architectural_layer_semantic_keywords": [
              "validate",
              "process",
              "coordinate"
            ]
          },
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Customer Database Interface",
                "description": "Handles actual database operations for customer data",
                "shortName": "LGACDB01",
                "codeBlocks": "INSERT-CUSTOMER section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "10%",
            "evidence": [
              "Program links to LGACDB01 to handle the actual customer insertion",
              "LGACDB01 is called with the customer data in the COMMAREA",
              "Database operations are delegated rather than performed directly"
            ],
            "architectural_layer_semantic_keywords": [
              "insert",
              "database"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Messaging"
            ],
            "elements": [
              {
                "name": "Error Logging Service",
                "description": "Formats and logs error messages",
                "shortName": "LGSTSQ",
                "codeBlocks": "WRITE-ERROR-MESSAGE section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "WRITE-ERROR-MESSAGE section formats error messages",
              "Links to LGSTSQ to handle the actual logging",
              "Formats timestamps and error details before sending to logging service"
            ],
            "architectural_layer_semantic_keywords": [
              "log",
              "message",
              "error"
            ]
          },
          {
            "traditionalLayer": "Data Entities",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Entities"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Hierarchical Data Model"
            ],
            "elements": [
              {
                "name": "Customer Data Structure",
                "description": "Data structure representing customer information",
                "shortName": "CA-CUSTOMER-REQUEST",
                "codeBlocks": "DFHCOMMAREA definition"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "30%",
            "evidence": [
              "DFHCOMMAREA contains structured customer data (CA-CUSTOMER-REQUEST)",
              "Customer entity includes personal information fields like name, address, contact info",
              "Data structures defined for customer registration processing"
            ],
            "architectural_layer_semantic_keywords": [
              "customer",
              "data",
              "structure"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Customer",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-CUSTOMER-REQUEST",
                "reference": "Customer registration data structure in DFHCOMMAREA"
              },
              {
                "type": "integration",
                "source_name": "LGACDB01",
                "reference": "Database program that handles customer persistence"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create"
            ],
            "attributes": [
              "CA-CUSTOMER-NUM",
              "CA-FIRST-NAME",
              "CA-LAST-NAME",
              "CA-DOB",
              "CA-HOUSE-NAME",
              "CA-HOUSE-NUM",
              "CA-POSTCODE",
              "CA-PHONE-MOBILE",
              "CA-PHONE-HOME",
              "CA-EMAIL-ADDRESS"
            ],
            "business_context": "Core entity representing customer information for registration process"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "OPERATION_CODE",
            "source": "Used in MAINLINE validation to identify request type",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Set to indicate success/failure of operations",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Unique identifier for customer records",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-FIRST-NAME",
            "semantic_type": "PERSON_FIRST_NAME",
            "source": "Part of customer personal information",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-LAST-NAME",
            "semantic_type": "PERSON_LAST_NAME",
            "source": "Part of customer personal information",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-DOB",
            "semantic_type": "PERSON_DATE_OF_BIRTH",
            "source": "Part of customer personal information",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POSTCODE",
            "semantic_type": "ADDRESS_POSTAL_CODE",
            "source": "Part of customer address information",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-MOBILE",
            "semantic_type": "CONTACT_MOBILE_PHONE",
            "source": "Part of customer contact information",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-HOME",
            "semantic_type": "CONTACT_HOME_PHONE",
            "source": "Part of customer contact information",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-EMAIL-ADDRESS",
            "semantic_type": "CONTACT_EMAIL",
            "source": "Part of customer contact information",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Customer registration requires minimum data fields",
            "implementation": "Program validates COMMAREA length to ensure required customer data is present"
          },
          {
            "rule": "Customer registration must include personal information",
            "implementation": "COMMAREA structure includes fields for name, address, contact information"
          },
          {
            "rule": "System must validate input before processing",
            "implementation": "MAINLINE section validates COMMAREA input before delegating to database operations"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "db",
              "target": "LGACDB01",
              "data": "Customer registration data"
            },
            {
              "type": "messaging",
              "target": "LGSTSQ",
              "data": "Error messages"
            }
          ],
          "data_sources": [
            "DFHCOMMAREA (input from caller)"
          ],
          "data_destinations": [
            "Customer database via LGACDB01",
            "Error log via LGSTSQ"
          ]
        },
        "features": [
          {
            "feature": "Customer Registration",
            "rules": [
              {
                "rule": "Process customer registration requests",
                "scenario": "New customer registration",
                "steps": [
                  {
                    "step": "Validate COMMAREA input",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "COMMAREA too small (return code 98)"
                  },
                  {
                    "step": "Insert customer record",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGACDB01",
                        "object_type": "program",
                        "when": "After validation passes"
                      }
                    ],
                    "when": "After validation passes",
                    "exceptions": "Database errors reflected in return code"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Error Logging",
            "rules": [
              {
                "rule": "Log system errors",
                "scenario": "Error condition detected",
                "steps": [
                  {
                    "step": "Format error message with timestamp",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Error condition detected",
                    "exceptions": "None"
                  },
                  {
                    "step": "Send error message to logging service",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "After formatting error message"
                      }
                    ],
                    "when": "After formatting error message",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Customer": "Person registering for services",
          "COMMAREA": "Communication area containing customer registration data",
          "Return Code": "Status indicator for operation success/failure"
        },
        "program_context": {
          "program_name": "LGACUS01",
          "includes": [
            "LGPOLICY",
            "LGCMAREA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Structured Programming"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "SQL": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PIC (Picture) clauses for data definition",
            "Hierarchical data structure with 01, 03, 05 level numbers",
            "COMP (Computational) data storage",
            "Fixed-format source code layout",
            "Verbose division and section structure",
            "Explicit length and type declarations",
            "DB2 record structures",
            "Enterprise mainframe database interaction indicators"
          ]
        },
        "business_domain": "Party Reference",
        "service_domain": "Party Reference Data Directory"
      }
    },
    "LGDPOL01": {
      "name": "LGDPOL01",
      "calls": [
        "LGSTSQ",
        "LGDPDB01"
      ],
      "called_by": [
        "LGTESTP4",
        "LGTESTP3",
        "LGTESTP1",
        "LGTESTP2"
      ],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [
        "LGCMAREA"
      ],
      "data_structures": {},
      "community": "Community 4",
      "program_language": "COBOL",
      "understanding": {
        "comments": "This program serves as a controller for deleting insurance policies from the system, validating deletion requests and delegating actual deletion operations to specialized database programs.",
        "title": "Insurance Policy Deletion Controller",
        "purpose": {
          "business_goal": [
            "Delete insurance policies from the system",
            "Support multiple policy types (Endowment, House, Motor, Commercial)"
          ],
          "implementation": "Acts as a controller that validates policy deletion requests and delegates the actual deletion to specialized programs (LGDPDB01 for DB2 database operations)"
        },
        "program_type": {
          "category": "business",
          "function": "Data maintenance"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Policy Deletion Controller",
                "description": "Validates policy deletion requests and orchestrates the deletion process",
                "shortName": "LGDPOL01",
                "codeBlocks": "MAINLINE section"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "Validates request ID against supported policy types (01DEND, 01DMOT, 01DHOU, 01DCOM)",
              "Sets appropriate return codes based on validation results",
              "Orchestrates the deletion process by calling the data access component"
            ],
            "architectural_layer_semantic_keywords": [
              "validate",
              "process",
              "controller",
              "orchestrate"
            ]
          },
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Policy Database Operations",
                "description": "Delegates database operations to specialized program",
                "shortName": "DELETE-POLICY-DB2-INFO",
                "codeBlocks": "DELETE-POLICY-DB2-INFO section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "10%",
            "evidence": [
              "EXEC CICS LINK to LGDPDB01 program for database operations",
              "Passes policy and customer information for deletion"
            ],
            "architectural_layer_semantic_keywords": [
              "delete",
              "database",
              "DB2"
            ]
          },
          {
            "traditionalLayer": "Platform",
            "togaf": [
              {
                "architecture": "Technology Architecture",
                "layer": "Technology Components"
              }
            ],
            "modernLayer": "Infrastructure",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Error Handling",
                "description": "Logs error messages to system queue",
                "shortName": "WRITE-ERROR-MESSAGE",
                "codeBlocks": "WRITE-ERROR-MESSAGE section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "30%",
            "evidence": [
              "EXEC CICS LINK to LGSTSQ program for error logging",
              "Formats date and time information for error messages",
              "Captures and formats COMMAREA data for diagnostic purposes"
            ],
            "architectural_layer_semantic_keywords": [
              "error",
              "log",
              "message"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Insurance Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-POLICY-REQUEST",
                "reference": "Policy data structure in COMMAREA"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "delete"
            ],
            "attributes": [
              "CA-POLICY-NUM",
              "CA-CUSTOMER-NUM",
              "CA-ISSUE-DATE",
              "CA-EXPIRY-DATE"
            ],
            "business_context": "Core business entity representing different types of insurance contracts that can be deleted from the system"
          },
          {
            "name": "Endowment Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-ENDOWMENT",
                "reference": "Endowment policy data in COMMAREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "delete"
            ],
            "attributes": [
              "CA-E-WITH-PROFITS",
              "CA-E-EQUITIES",
              "CA-E-MANAGED-FUND",
              "CA-E-TERM",
              "CA-E-SUM-ASSURED"
            ],
            "business_context": "Specialized insurance policy type for investment and life coverage"
          },
          {
            "name": "Motor Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-MOTOR",
                "reference": "Motor policy data in COMMAREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "delete"
            ],
            "attributes": [
              "CA-M-MAKE",
              "CA-M-MODEL",
              "CA-M-VALUE",
              "CA-M-REGNUMBER"
            ],
            "business_context": "Specialized insurance policy type for motor vehicles"
          },
          {
            "name": "House Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-HOUSE",
                "reference": "House policy data in COMMAREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "delete"
            ],
            "attributes": [
              "CA-H-PROPERTY-TYPE",
              "CA-H-BEDROOMS",
              "CA-H-VALUE",
              "CA-H-POSTCODE"
            ],
            "business_context": "Specialized insurance policy type for residential properties"
          },
          {
            "name": "Commercial Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-COMMERCIAL",
                "reference": "Commercial policy data in COMMAREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "delete"
            ],
            "attributes": [
              "CA-B-PropType",
              "CA-B-FirePeril",
              "CA-B-CrimePeril",
              "CA-B-FloodPeril",
              "CA-B-WeatherPeril"
            ],
            "business_context": "Specialized insurance policy type for business properties with multiple peril coverages"
          },
          {
            "name": "Customer",
            "sources": [
              {
                "type": "variable",
                "source_name": "CA-CUSTOMER-NUM",
                "reference": "Customer identifier in COMMAREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [],
            "attributes": [
              "CA-CUSTOMER-NUM"
            ],
            "business_context": "Entity that owns insurance policies and is referenced during policy deletion"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "TRANSACTION_TYPE",
            "source": "Validation logic in MAINLINE section",
            "related_entities": [
              "Insurance Policy",
              "Endowment Policy",
              "Motor Policy",
              "House Policy",
              "Commercial Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used in policy deletion operation",
            "related_entities": [
              "Customer",
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_ID",
            "source": "Used in policy deletion operation",
            "related_entities": [
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Set to indicate success or failure of operations",
            "related_entities": [],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Policy deletion requests must specify a valid policy type",
            "implementation": "Validates CA-REQUEST-ID against allowed values (01DEND, 01DMOT, 01DHOU, 01DCOM)"
          },
          {
            "rule": "Policy deletion requires both customer number and policy number",
            "implementation": "Both CA-CUSTOMER-NUM and CA-POLICY-NUM are passed to the database program (LGDPDB01)"
          },
          {
            "rule": "Communication area must be of sufficient length for processing",
            "implementation": "Checks if EIBCALEN is less than WS-CA-HEADER-LEN and returns error code 98 if true"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "db",
              "target": "LGDPDB01",
              "data": "Policy deletion request"
            },
            {
              "type": "messaging",
              "target": "LGSTSQ",
              "data": "Error logging"
            }
          ],
          "data_sources": [
            "COMMAREA input from calling program"
          ],
          "data_destinations": [
            "LGDPDB01 for database operations",
            "LGSTSQ for error logging"
          ]
        },
        "features": [
          {
            "feature": "Insurance Policy Deletion",
            "rules": [
              {
                "rule": "Delete policy based on policy type",
                "scenario": "User requests deletion of an insurance policy",
                "steps": [
                  {
                    "step": "Validate request type",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "Invalid request type (CA-RETURN-CODE = 99)"
                  },
                  {
                    "step": "Delete policy from database",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGDPDB01",
                        "object_type": "program",
                        "when": "Valid request type"
                      }
                    ],
                    "when": "CA-REQUEST-ID is one of: 01DEND, 01DMOT, 01DHOU, 01DCOM",
                    "exceptions": "Database errors reported via CA-RETURN-CODE"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "01DEND": "Endowment policy deletion request",
          "01DMOT": "Motor policy deletion request",
          "01DHOU": "House policy deletion request",
          "01DCOM": "Commercial policy deletion request",
          "CA-RETURN-CODE": "Status code indicating success (00) or specific error conditions (98=short COMMAREA, 99=invalid request)"
        },
        "program_context": {
          "program_name": "LGDPOL01",
          "includes": [
            "LGCMAREA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Structured Programming"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "Embedded Comments": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "LINKAGE SECTION",
            "Hierarchical data structures with 01, 03, 05 levels",
            "REDEFINES clause for data structure overlays",
            "PIC (Picture) clauses for data type definition",
            "COMP (Computational) numeric storage",
            "Fixed-format source code layout",
            "Verbose division and section structure",
            "Large record/commarea structures typical of mainframe programming"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Policy Management"
      }
    },
    "LGUCUS01": {
      "name": "LGUCUS01",
      "calls": [
        "LGUCDB01",
        "LGSTSQ"
      ],
      "called_by": [
        "LGTESTC1"
      ],
      "uses_tables": [],
      "uses_screens": [],
      "includes": [
        "LGCMAREA"
      ],
      "data_structures": {},
      "community": "Community 8",
      "program_language": "COBOL",
      "understanding": {
        "comments": "This program serves as a controller for updating customer profile information in a financial services system",
        "title": "Customer Profile Update Service",
        "purpose": {
          "business_goal": [
            "Update customer profile information",
            "Validate customer data"
          ],
          "implementation": "Acts as a controller that receives customer update requests and delegates to a database service (LGUCDB01) to perform the actual update"
        },
        "program_type": {
          "category": "business",
          "function": "data maintenance"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Customer Update Controller",
                "description": "Orchestrates the customer update process by validating the request and delegating to the database service",
                "shortName": "LGUCUS01",
                "codeBlocks": "MAINLINE, UPDATE-CUSTOMER-INFO"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "MAINLINE section validates the COMMAREA and request ID '01UCUS'",
              "Program acts as a controller that delegates to LGUCDB01 for actual database operations",
              "Sets return codes based on validation results"
            ],
            "architectural_layer_semantic_keywords": [
              "validate",
              "controller",
              "delegate"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Database Service Integration",
                "description": "Links to external database service to perform customer updates",
                "shortName": "LGUCDB01-Link",
                "codeBlocks": "UPDATE-CUSTOMER-INFO"
              },
              {
                "name": "Error Logging Service",
                "description": "Links to external logging service to record errors",
                "shortName": "LGSTSQ-Link",
                "codeBlocks": "WRITE-ERROR-MESSAGE"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "40%",
            "evidence": [
              "EXEC CICS LINK Program(LGUCDB01) to perform database operations",
              "EXEC CICS LINK PROGRAM('LGSTSQ') to log error messages"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "external service",
              "integration"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Customer",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-CUSTOMER-REQUEST",
                "reference": "Customer profile data structure in COMMAREA"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "read",
              "update"
            ],
            "attributes": [
              "CA-CUSTOMER-NUM",
              "CA-FIRST-NAME",
              "CA-LAST-NAME",
              "CA-DOB",
              "CA-HOUSE-NAME",
              "CA-HOUSE-NUM",
              "CA-POSTCODE",
              "CA-NUM-POLICIES",
              "CA-PHONE-MOBILE",
              "CA-PHONE-HOME",
              "CA-EMAIL-ADDRESS"
            ],
            "business_context": "Core entity representing customer profile information that can be updated through this service"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "TRANSACTION_CODE",
            "source": "Validated in MAINLINE section to ensure it equals '01UCUS'",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "STATUS_CODE",
            "source": "Set to indicate success ('00') or failure ('99') of the operation",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used to identify which customer record to update",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-FIRST-NAME",
            "semantic_type": "PERSON_FIRST_NAME",
            "source": "Part of customer profile data structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-LAST-NAME",
            "semantic_type": "PERSON_LAST_NAME",
            "source": "Part of customer profile data structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-DOB",
            "semantic_type": "PERSON_DATE_OF_BIRTH",
            "source": "Part of customer profile data structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-HOUSE-NAME",
            "semantic_type": "ADDRESS_HOUSE_NAME",
            "source": "Part of customer profile data structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-HOUSE-NUM",
            "semantic_type": "ADDRESS_HOUSE_NUMBER",
            "source": "Part of customer profile data structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POSTCODE",
            "semantic_type": "ADDRESS_POSTAL_CODE",
            "source": "Part of customer profile data structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-NUM-POLICIES",
            "semantic_type": "POLICY_COUNT",
            "source": "Part of customer profile data structure",
            "related_entities": [
              "Customer",
              "Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-MOBILE",
            "semantic_type": "CONTACT_MOBILE_PHONE",
            "source": "Part of customer profile data structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-HOME",
            "semantic_type": "CONTACT_HOME_PHONE",
            "source": "Part of customer profile data structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-EMAIL-ADDRESS",
            "semantic_type": "CONTACT_EMAIL",
            "source": "Part of customer profile data structure",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Customer update requests must have a valid request ID",
            "implementation": "Program validates that CA-REQUEST-ID equals '01UCUS' before processing the update"
          },
          {
            "rule": "Customer updates require a valid customer number",
            "implementation": "CA-CUSTOMER-NUM is passed to the database service (LGUCDB01) to identify the customer record"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "api",
              "target": "LGUCDB01",
              "data": "Customer profile information"
            },
            {
              "type": "api",
              "target": "LGSTSQ",
              "data": "Error messages"
            }
          ],
          "data_sources": [
            "COMMAREA from calling program"
          ],
          "data_destinations": [
            "LGUCDB01 database service",
            "LGSTSQ error logging service"
          ]
        },
        "features": [
          {
            "feature": "Customer Profile Update",
            "rules": [
              {
                "rule": "Update customer information in the database",
                "scenario": "Update customer profile details",
                "steps": [
                  {
                    "step": "Validate COMMAREA and request ID",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "ABEND 'LGCA' if no COMMAREA received"
                  },
                  {
                    "step": "Call database service to update customer information",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGUCDB01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "CA-REQUEST-ID = '01UCUS'",
                    "exceptions": "Sets CA-RETURN-CODE = '99' if request ID is invalid"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Error Logging",
            "rules": [
              {
                "rule": "Log errors encountered during processing",
                "scenario": "Error handling",
                "steps": [
                  {
                    "step": "Format error message with timestamp",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Error condition detected",
                    "exceptions": "None"
                  },
                  {
                    "step": "Send error message to logging service",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGSTSQ",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Error condition detected",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Customer": "Entity whose profile information is being updated",
          "Request ID": "Identifier for the type of transaction (01UCUS for customer update)",
          "Return Code": "Status code indicating success or failure of the operation"
        },
        "program_context": {
          "program_name": "LGUCUS01",
          "includes": [
            "LGCMAREA"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Structured Programming"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "Mainframe Dialect": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "Enterprise COBOL",
            "IBM z/OS COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "LINKAGE SECTION",
            "PIC X/9 data type declarations",
            "COMP usage specifier",
            "REDEFINES clause",
            "Hierarchical data structure with 01/03/05/07 levels",
            "Fixed-format source code layout",
            "Mainframe/CICS transaction processing indicators"
          ]
        },
        "business_domain": "Party Reference",
        "service_domain": "Party Reference Data Directory"
      }
    },
    "LGTESTP4": {
      "name": "LGTESTP4",
      "calls": [
        "LGAPOL01",
        "LGIPOL01",
        "LGDPOL01"
      ],
      "called_by": [],
      "uses_tables": [],
      "uses_screens": [
        "SSMAPP4",
        "SSMAP"
      ],
      "includes": [
        "LGCMAREA",
        "SSMAP"
      ],
      "data_structures": {},
      "community": "Community 4",
      "program_language": "COBOL",
      "understanding": {
        "comments": "The program provides a user interface for managing commercial insurance policies through integration with core policy processing systems",
        "title": "Commercial Insurance Policy Management Interface",
        "purpose": {
          "business_goal": [
            "Manage commercial insurance policies",
            "Interface with policy processing systems"
          ],
          "implementation": "Provides a screen-based interface for viewing, adding, and deleting commercial insurance policies through integration with core policy processing programs"
        },
        "program_type": {
          "category": "business",
          "function": "Policy management"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "User Interface",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Interface"
              }
            ],
            "modernLayer": "Presentation",
            "classifications": [
              "Screen-based Interface"
            ],
            "elements": [
              {
                "name": "Screen Handling",
                "description": "Manages screen display and user input through CICS SEND/RECEIVE MAP operations",
                "shortName": "UI",
                "codeBlocks": "SSMAPP4I/O data structures, CICS SEND/RECEIVE operations"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "40%",
            "evidence": [
              "EXEC CICS SEND MAP ('SSMAPP4') MAPSET ('SSMAP') ERASE END-EXEC",
              "EXEC CICS RECEIVE MAP('SSMAPP4') INTO(SSMAPP4I) MAPSET('SSMAP') END-EXEC",
              "Multiple screen field definitions (ENP4xxxx fields)",
              "Error message display handling"
            ],
            "architectural_layer_semantic_keywords": [
              "display",
              "send",
              "receive",
              "map",
              "screen"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              },
              {
                "architecture": "Business Architecture",
                "layer": "Business Processes"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Policy Processing Logic",
                "description": "Handles the business rules for commercial policy operations",
                "shortName": "BL",
                "codeBlocks": "MAINLINE section, EVALUATE ENP4OPTO structure"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "EVALUATE ENP4OPTO - Main business logic decision structure",
              "Business validation checks for policy operations",
              "Setting business-specific request IDs ('01ICOM', '02ICOM', etc.)",
              "Processing of commercial policy data"
            ],
            "architectural_layer_semantic_keywords": [
              "process",
              "validate",
              "evaluate"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "API-Driven"
            ],
            "elements": [
              {
                "name": "Policy Service Integration",
                "description": "Interfaces with core policy processing programs",
                "shortName": "INT",
                "codeBlocks": "CICS LINK calls to LGIPOL01, LGAPOL01, LGDPOL01"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "30%",
            "evidence": [
              "EXEC CICS LINK PROGRAM('LGIPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC",
              "EXEC CICS LINK PROGRAM('LGAPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC",
              "EXEC CICS LINK PROGRAM('LGDPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "interface",
              "call"
            ]
          },
          {
            "traditionalLayer": "Data Entities",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Entities"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Hierarchical Data Model"
            ],
            "elements": [
              {
                "name": "Commercial Policy Data Structure",
                "description": "Represents commercial insurance policy data",
                "shortName": "DE",
                "codeBlocks": "COMM-AREA, CA-COMMERCIAL structure"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "10%",
            "evidence": [
              "CA-COMMERCIAL REDEFINES CA-POLICY-SPECIFIC",
              "CA-B-Address, CA-B-Postcode, CA-B-Latitude, CA-B-Longitude",
              "CA-B-Customer, CA-B-PropType, CA-B-FirePeril, CA-B-FirePremium",
              "Other commercial policy specific fields"
            ],
            "architectural_layer_semantic_keywords": [
              "data",
              "structure",
              "fields"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Commercial Insurance Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-COMMERCIAL",
                "reference": "REDEFINES CA-POLICY-SPECIFIC"
              },
              {
                "type": "integration",
                "source_name": "LGIPOL01",
                "reference": "Policy inquiry service"
              },
              {
                "type": "integration",
                "source_name": "LGAPOL01",
                "reference": "Policy addition service"
              },
              {
                "type": "integration",
                "source_name": "LGDPOL01",
                "reference": "Policy deletion service"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create",
              "read",
              "delete"
            ],
            "attributes": [
              "CA-POLICY-NUM",
              "CA-CUSTOMER-NUM",
              "CA-ISSUE-DATE",
              "CA-EXPIRY-DATE",
              "CA-B-Address",
              "CA-B-Postcode",
              "CA-B-Latitude",
              "CA-B-Longitude",
              "CA-B-Customer",
              "CA-B-PropType",
              "CA-B-FirePeril",
              "CA-B-FirePremium",
              "CA-B-CrimePeril",
              "CA-B-CrimePremium",
              "CA-B-FloodPeril",
              "CA-B-FloodPremium",
              "CA-B-WeatherPeril",
              "CA-B-WeatherPremium",
              "CA-B-Status",
              "CA-B-RejectReason"
            ],
            "business_context": "Core business entity representing commercial insurance policies that cover property-related risks including fire, crime, flood, and weather perils"
          },
          {
            "name": "Customer",
            "sources": [
              {
                "type": "variable",
                "source_name": "CA-CUSTOMER-NUM",
                "reference": "Customer identifier in COMM-AREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "CA-CUSTOMER-NUM"
            ],
            "business_context": "Entity that owns commercial insurance policies"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_IDENTIFIER",
            "source": "Used as unique identifier for policies in inquiry and deletion operations",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_IDENTIFIER",
            "source": "Used to identify customers who own policies",
            "related_entities": [
              "Customer",
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-Address",
            "semantic_type": "PROPERTY_ADDRESS",
            "source": "Represents the physical location of the insured commercial property",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-Postcode",
            "semantic_type": "POSTAL_CODE",
            "source": "Used for location identification and policy lookup",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-Latitude",
            "semantic_type": "GEOGRAPHIC_COORDINATE",
            "source": "Precise location data for risk assessment",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-Longitude",
            "semantic_type": "GEOGRAPHIC_COORDINATE",
            "source": "Precise location data for risk assessment",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-Customer",
            "semantic_type": "BUSINESS_NAME",
            "source": "Name of the business being insured",
            "related_entities": [
              "Commercial Insurance Policy",
              "Customer"
            ],
            "confidence": "medium"
          },
          {
            "parameter": "CA-B-PropType",
            "semantic_type": "PROPERTY_TYPE",
            "source": "Classification of commercial property for risk assessment",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-FirePeril",
            "semantic_type": "RISK_FACTOR",
            "source": "Fire risk rating for premium calculation",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-FirePremium",
            "semantic_type": "MONETARY_AMOUNT",
            "source": "Premium amount for fire coverage",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-CrimePeril",
            "semantic_type": "RISK_FACTOR",
            "source": "Crime risk rating for premium calculation",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-CrimePremium",
            "semantic_type": "MONETARY_AMOUNT",
            "source": "Premium amount for crime coverage",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-FloodPeril",
            "semantic_type": "RISK_FACTOR",
            "source": "Flood risk rating for premium calculation",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-FloodPremium",
            "semantic_type": "MONETARY_AMOUNT",
            "source": "Premium amount for flood coverage",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-WeatherPeril",
            "semantic_type": "RISK_FACTOR",
            "source": "Weather risk rating for premium calculation",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-WeatherPremium",
            "semantic_type": "MONETARY_AMOUNT",
            "source": "Premium amount for weather coverage",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-Status",
            "semantic_type": "STATUS_CODE",
            "source": "Indicates the current status of the policy",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-B-RejectReason",
            "semantic_type": "REJECTION_REASON",
            "source": "Explanation for policy rejection if applicable",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-ISSUE-DATE",
            "semantic_type": "DATE",
            "source": "Start date of policy coverage",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-EXPIRY-DATE",
            "semantic_type": "DATE",
            "source": "End date of policy coverage",
            "related_entities": [
              "Commercial Insurance Policy"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Commercial policy lookup can be performed by customer number and policy number",
            "implementation": "When option 1 is selected, the program checks if both customer number and policy number are provided, then sets request ID to '01ICOM'"
          },
          {
            "rule": "Commercial policy lookup can be performed by policy number only",
            "implementation": "When option 1 is selected with only policy number provided, the program sets request ID to '02ICOM'"
          },
          {
            "rule": "Commercial policy lookup can be performed by customer number only",
            "implementation": "When option 1 is selected with only customer number provided, the program sets request ID to '03ICOM'"
          },
          {
            "rule": "Commercial policy lookup can be performed by postcode",
            "implementation": "When option 1 is selected with postcode provided, the program sets request ID to '05ICOM'"
          },
          {
            "rule": "Customer must exist to add a commercial policy",
            "implementation": "When adding a policy (option 2), if return code is 70, displays 'Customer does not exist'"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "api",
              "target": "LGIPOL01",
              "data": "Policy inquiry request/response"
            },
            {
              "type": "api",
              "target": "LGAPOL01",
              "data": "Policy addition request/response"
            },
            {
              "type": "api",
              "target": "LGDPOL01",
              "data": "Policy deletion request/response"
            }
          ],
          "data_sources": [
            "External policy processing systems"
          ],
          "data_destinations": [
            "Screen display (SSMAPP4)"
          ]
        },
        "features": [
          {
            "feature": "Commercial Policy Inquiry",
            "rules": [
              {
                "rule": "Retrieve commercial policy details",
                "scenario": "User needs to view existing commercial policy information",
                "steps": [
                  {
                    "step": "Determine inquiry type based on provided fields",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Option 1 selected",
                    "exceptions": "No data found"
                  },
                  {
                    "step": "Call policy inquiry service",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGIPOL01",
                        "object_type": "program",
                        "when": "Valid inquiry parameters provided"
                      }
                    ],
                    "when": "After setting appropriate request ID",
                    "exceptions": "Return code > 0"
                  },
                  {
                    "step": "Display policy details",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP4O",
                        "object_type": "screen",
                        "when": "Successful inquiry"
                      }
                    ],
                    "when": "Policy data retrieved successfully",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Commercial Policy Addition",
            "rules": [
              {
                "rule": "Create new commercial policy",
                "scenario": "User needs to add a new commercial insurance policy",
                "steps": [
                  {
                    "step": "Prepare policy data from screen input",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Option 2 selected",
                    "exceptions": "None"
                  },
                  {
                    "step": "Call policy addition service",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGAPOL01",
                        "object_type": "program",
                        "when": "Valid policy data provided"
                      }
                    ],
                    "when": "After setting request ID to '01ACOM'",
                    "exceptions": "Return code > 0"
                  },
                  {
                    "step": "Display confirmation",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP4O",
                        "object_type": "screen",
                        "when": "Successful addition"
                      }
                    ],
                    "when": "Policy added successfully",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Commercial Policy Deletion",
            "rules": [
              {
                "rule": "Delete existing commercial policy",
                "scenario": "User needs to remove a commercial insurance policy",
                "steps": [
                  {
                    "step": "Prepare deletion request",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Option 3 selected",
                    "exceptions": "None"
                  },
                  {
                    "step": "Call policy deletion service",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGDPOL01",
                        "object_type": "program",
                        "when": "Valid policy and customer numbers provided"
                      }
                    ],
                    "when": "After setting request ID to '01DCOM'",
                    "exceptions": "Return code > 0"
                  },
                  {
                    "step": "Display confirmation",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP4O",
                        "object_type": "screen",
                        "when": "Successful deletion"
                      }
                    ],
                    "when": "Policy deleted successfully",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Commercial Policy": "Insurance coverage for business properties against multiple perils",
          "Fire Peril": "Risk rating for fire damage to commercial property",
          "Crime Peril": "Risk rating for criminal damage or theft",
          "Flood Peril": "Risk rating for water damage from flooding",
          "Weather Peril": "Risk rating for damage from storms and other weather events",
          "Premium": "Amount charged for insurance coverage"
        },
        "program_context": {
          "program_name": "LGTESTP4",
          "includes": [
            "LGCMAREA",
            "SSMAP"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Structured"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "Unspecified": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business-Oriented Programming"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PIC X(n) data type declarations",
            "COMP picture clause",
            "REDEFINES clause",
            "Hierarchical data structure with 01, 02, 03 levels",
            "Fixed-format source code layout",
            "Verbose division-based structure",
            "Strong typing with explicit length specifications"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Product Management"
      }
    },
    "LGTESTC1": {
      "name": "LGTESTC1",
      "calls": [
        "LGACUS01",
        "LGICUS01",
        "LGUCUS01"
      ],
      "called_by": [],
      "uses_tables": [],
      "uses_screens": [
        "SSMAP",
        "SSMAPC1"
      ],
      "includes": [
        "LGCMAREA",
        "SSMAP"
      ],
      "data_structures": {},
      "community": "Community 15",
      "program_language": "COBOL",
      "understanding": {
        "comments": "A CICS transaction program that provides a user interface for customer information management, supporting inquiry, registration, and update operations through specialized service modules.",
        "title": "Customer Information Management Interface",
        "purpose": {
          "business_goal": [
            "Provide a user interface for customer data management",
            "Support customer create, read, and update operations"
          ],
          "implementation": "Acts as a front-end interface that receives user input through screens and delegates processing to specialized customer service modules (LGACUS01, LGICUS01, LGUCUS01)"
        },
        "program_type": {
          "category": "business",
          "function": "customer management"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "User Interface",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Interface"
              }
            ],
            "modernLayer": "Presentation",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Screen Handling",
                "description": "Manages the display and input of customer information through CICS screens",
                "shortName": "UI",
                "codeBlocks": "SSMAPC1I, SSMAPC1O, EXEC CICS SEND MAP, EXEC CICS RECEIVE MAP"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "EXEC CICS SEND MAP ('SSMAPC1') FROM(SSMAPC1O) MAPSET ('SSMAP') ERASE END-EXEC",
              "EXEC CICS RECEIVE MAP('SSMAPC1') INTO(SSMAPC1I) ASIS MAPSET('SSMAP') END-EXEC",
              "EVALUATE ENT1OPTO - Evaluates user input option",
              "Move 'Please enter a valid option' To ERRFLDO - Error message display",
              "Move 'New Customer Inserted' To ERRFLDO - Success message display"
            ],
            "architectural_layer_semantic_keywords": [
              "display",
              "send",
              "receive",
              "map",
              "screen",
              "input",
              "output"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              },
              {
                "architecture": "Business Architecture",
                "layer": "Business Processes"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Customer Management",
                "description": "Orchestrates customer operations by delegating to specialized service modules",
                "shortName": "CustMgmt",
                "codeBlocks": "MAINLINE section, EVALUATE statement"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "EVALUATE ENT1OPTO - Routes requests based on user option",
              "Move '01ICUS' To CA-REQUEST-ID - Prepares request for customer inquiry",
              "Move '01ACUS' To CA-REQUEST-ID - Prepares request for customer addition",
              "Move '01UCUS' To CA-REQUEST-ID - Prepares request for customer update",
              "EXEC CICS LINK PROGRAM('LGICUS01') - Calls customer inquiry service",
              "EXEC CICS LINK PROGRAM('LGACUS01') - Calls customer addition service",
              "EXEC CICS LINK PROGRAM('LGUCUS01') - Calls customer update service"
            ],
            "architectural_layer_semantic_keywords": [
              "process",
              "validate",
              "transform",
              "business",
              "customer"
            ]
          },
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Mainframe Databases"
            ],
            "elements": [
              {
                "name": "Customer Number Management",
                "description": "Maintains customer number sequence in temporary storage queue",
                "shortName": "CustNumMgmt",
                "codeBlocks": "WRITE-GENACNTL section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "EXEC CICS ENQ Resource(STSQ-NAME) - Locks the temporary storage queue",
              "Exec CICS ReadQ TS Queue(STSQ-NAME) - Reads from temporary storage",
              "EXEC CICS WRITEQ TS QUEUE(STSQ-NAME) - Writes to temporary storage",
              "EXEC CICS DEQ Resource(STSQ-NAME) - Releases the lock on temporary storage queue",
              "Move CA-Customer-Num To Write-Msg-High - Updates customer number sequence"
            ],
            "architectural_layer_semantic_keywords": [
              "read",
              "write",
              "queue",
              "storage",
              "sequence"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Customer",
            "sources": [
              {
                "type": "record",
                "source_name": "COMM-AREA",
                "reference": "CA-CUSTOMER-REQUEST"
              },
              {
                "type": "queue",
                "source_name": "STSQ-NAME",
                "reference": "GENACNTL"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create",
              "read",
              "update"
            ],
            "attributes": [
              "CA-CUSTOMER-NUM",
              "CA-FIRST-NAME",
              "CA-LAST-NAME",
              "CA-DOB",
              "CA-HOUSE-NAME",
              "CA-HOUSE-NUM",
              "CA-POSTCODE",
              "CA-PHONE-HOME",
              "CA-PHONE-MOBILE",
              "CA-EMAIL-ADDRESS"
            ],
            "business_context": "Core entity representing customer information in the system"
          },
          {
            "name": "CustomerNumberSequence",
            "sources": [
              {
                "type": "queue",
                "source_name": "STSQ-NAME",
                "reference": "GENACNTL"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read",
              "update"
            ],
            "attributes": [
              "READ-CUST-HIGH",
              "WRITE-MSG-HIGH",
              "WRITE-MSG-LOW"
            ],
            "business_context": "Maintains sequence numbers for customer IDs to ensure uniqueness"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as primary identifier for customer operations",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-FIRST-NAME",
            "semantic_type": "PERSON_FIRST_NAME",
            "source": "Field name and usage in customer data",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-LAST-NAME",
            "semantic_type": "PERSON_LAST_NAME",
            "source": "Field name and usage in customer data",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-DOB",
            "semantic_type": "PERSON_DATE_OF_BIRTH",
            "source": "Field name abbreviation (Date of Birth) and usage",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-HOUSE-NAME",
            "semantic_type": "ADDRESS_HOUSE_NAME",
            "source": "Field name and usage in customer address data",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-HOUSE-NUM",
            "semantic_type": "ADDRESS_HOUSE_NUMBER",
            "source": "Field name and usage in customer address data",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-POSTCODE",
            "semantic_type": "ADDRESS_POSTAL_CODE",
            "source": "Field name and usage in customer address data",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-HOME",
            "semantic_type": "CONTACT_PHONE_HOME",
            "source": "Field name and usage in customer contact data",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-PHONE-MOBILE",
            "semantic_type": "CONTACT_PHONE_MOBILE",
            "source": "Field name and usage in customer contact data",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-EMAIL-ADDRESS",
            "semantic_type": "CONTACT_EMAIL",
            "source": "Field name and usage in customer contact data",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "OPERATION_CODE",
            "source": "Used to identify the type of operation being requested",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENT1OPTO",
            "semantic_type": "USER_SELECTION_CODE",
            "source": "Used to determine which operation to perform based on user input",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Customer postcode must be stored in uppercase",
            "implementation": "Move Function UPPER-CASE(CA-POSTCODE) TO CA-POSTCODE"
          },
          {
            "rule": "Customer number sequence must be maintained in a controlled manner",
            "implementation": "EXEC CICS ENQ Resource(STSQ-NAME) to lock the resource before updating"
          },
          {
            "rule": "Customer data must be validated before processing",
            "implementation": "Service modules (LGACUS01, LGUCUS01) return error codes that are checked before proceeding"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "api",
              "target": "LGICUS01",
              "data": "customer inquiry"
            },
            {
              "type": "api",
              "target": "LGACUS01",
              "data": "customer creation"
            },
            {
              "type": "api",
              "target": "LGUCUS01",
              "data": "customer update"
            },
            {
              "type": "queue",
              "target": "GENACNTL",
              "data": "customer number sequence"
            }
          ],
          "data_sources": [
            "Customer service modules",
            "Temporary storage queue"
          ],
          "data_destinations": [
            "Screen display",
            "Customer service modules",
            "Temporary storage queue"
          ]
        },
        "features": [
          {
            "feature": "Customer Inquiry",
            "rules": [
              {
                "rule": "Retrieve customer details by customer number",
                "scenario": "User enters customer number and selects inquiry option",
                "steps": [
                  {
                    "step": "Validate user input option",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "ENT1OPTO = '1'",
                    "exceptions": "Invalid option"
                  },
                  {
                    "step": "Call customer inquiry service",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGICUS01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "No customer found (CA-RETURN-CODE > 0)"
                  },
                  {
                    "step": "Display customer information",
                    "external": false,
                    "step_type": "write",
                    "objects": [],
                    "when": "CA-RETURN-CODE = 0",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Customer Registration",
            "rules": [
              {
                "rule": "Create new customer record",
                "scenario": "User enters customer details and selects add option",
                "steps": [
                  {
                    "step": "Validate user input option",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "ENT1OPTO = '2'",
                    "exceptions": "Invalid option"
                  },
                  {
                    "step": "Prepare customer data",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "Always",
                    "exceptions": "None"
                  },
                  {
                    "step": "Call customer add service",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGACUS01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Error adding customer (CA-RETURN-CODE > 0)"
                  },
                  {
                    "step": "Update customer number sequence",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "GENACNTL",
                        "object_type": "queue",
                        "when": "CA-RETURN-CODE = 0"
                      }
                    ],
                    "when": "CA-RETURN-CODE = 0",
                    "exceptions": "Queue access error"
                  },
                  {
                    "step": "Display confirmation message",
                    "external": false,
                    "step_type": "write",
                    "objects": [],
                    "when": "CA-RETURN-CODE = 0",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Customer Update",
            "rules": [
              {
                "rule": "Modify existing customer record",
                "scenario": "User enters customer number, retrieves data, modifies it, and selects update option",
                "steps": [
                  {
                    "step": "Validate user input option",
                    "external": false,
                    "step_type": "call",
                    "objects": [],
                    "when": "ENT1OPTO = '4'",
                    "exceptions": "Invalid option"
                  },
                  {
                    "step": "Retrieve current customer data",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGICUS01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "No customer found (CA-RETURN-CODE > 0)"
                  },
                  {
                    "step": "Display customer data for editing",
                    "external": false,
                    "step_type": "write",
                    "objects": [],
                    "when": "CA-RETURN-CODE = 0",
                    "exceptions": "None"
                  },
                  {
                    "step": "Receive updated customer data",
                    "external": false,
                    "step_type": "read",
                    "objects": [],
                    "when": "CA-RETURN-CODE = 0",
                    "exceptions": "None"
                  },
                  {
                    "step": "Call customer update service",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGUCUS01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Always",
                    "exceptions": "Error updating customer (CA-RETURN-CODE > 0)"
                  },
                  {
                    "step": "Display confirmation message",
                    "external": false,
                    "step_type": "write",
                    "objects": [],
                    "when": "CA-RETURN-CODE = 0",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Customer": "A person who has registered with the system",
          "Customer Number": "Unique identifier for a customer (CA-CUSTOMER-NUM)",
          "Postcode": "UK postal code format used for customer addresses",
          "GENACNTL": "Control record for maintaining customer number sequences"
        },
        "program_context": {
          "program_name": "LGTESTC1",
          "includes": [
            "LGCMAREA",
            "SSMAP"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Structured"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 99.5,
            "Preprocessor": 0.5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cob",
            ".cbl",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PIC (Picture) clause for data definition",
            "Hierarchical data structure with 01, 03 level numbers",
            "COMP (Computational) data type",
            "Verbose division-based structure",
            "Fixed-format source code layout",
            "Alphanumeric and numeric field definitions",
            "Record level redefines",
            "Explicit data type declarations"
          ]
        },
        "business_domain": "Party Reference",
        "service_domain": "Party Reference Data Directory"
      }
    },
    "LGTESTP3": {
      "name": "LGTESTP3",
      "calls": [
        "LGAPOL01",
        "LGIPOL01",
        "LGDPOL01",
        "LGUPOL01"
      ],
      "called_by": [],
      "uses_tables": [],
      "uses_screens": [
        "SSMAPP3",
        "SSMAP"
      ],
      "includes": [
        "LGCMAREA",
        "SSMAP"
      ],
      "data_structures": {},
      "community": "Community 4",
      "program_language": "COBOL",
      "understanding": {
        "comments": "A user interface program for managing house insurance policies through a terminal-based screen interface, providing CRUD operations by interfacing with specialized policy processing programs",
        "title": "House Insurance Policy Management Interface",
        "purpose": {
          "business_goal": [
            "Manage house insurance policies",
            "Perform CRUD operations on house policy records"
          ],
          "implementation": "The program provides a user interface for viewing, adding, updating, and deleting house insurance policies through a screen interface (SSMAPP3) and calls to specialized policy processing programs"
        },
        "program_type": {
          "category": "business",
          "function": "Insurance policy management"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "User Interface",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Interface"
              }
            ],
            "modernLayer": "Presentation",
            "classifications": [
              "Terminal-based Interface"
            ],
            "elements": [
              {
                "name": "Screen Interface Definition",
                "description": "Defines the screen layout for house policy data entry and display",
                "shortName": "SSMAPP3",
                "codeBlocks": "SSMAPP3I/SSMAPP3O map structures"
              },
              {
                "name": "Screen Handling Logic",
                "description": "Handles screen interactions, display and user input",
                "shortName": "UI Logic",
                "codeBlocks": "EXEC CICS SEND MAP, EXEC CICS RECEIVE MAP"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "EXEC CICS SEND MAP ('SSMAPP3') MAPSET ('SSMAP') ERASE END-EXEC",
              "EXEC CICS RECEIVE MAP('SSMAPP3') INTO(SSMAPP3I) MAPSET('SSMAP') END-EXEC",
              "MOVE 'New House Policy Inserted' TO ERP3FLDO",
              "MOVE 'Please enter a valid option' TO ERP3FLDO"
            ],
            "architectural_layer_semantic_keywords": [
              "display",
              "send",
              "receive",
              "map",
              "screen",
              "input",
              "output"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              },
              {
                "architecture": "Business Architecture",
                "layer": "Business Processes"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Policy Operation Handler",
                "description": "Orchestrates policy operations based on user selection",
                "shortName": "MAINLINE",
                "codeBlocks": "EVALUATE ENP3OPTO section"
              },
              {
                "name": "Policy Entity Processing",
                "description": "Manages house insurance policy business entities",
                "shortName": "Policy Logic",
                "codeBlocks": "CA-HOUSE structure, policy data preparation"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "EVALUATE ENP3OPTO",
              "Move ENP3TYPI To CA-H-PROPERTY-TYPE",
              "Move ENP3BEDI To CA-H-BEDROOMS",
              "Move ENP3VALI To CA-H-VALUE",
              "Move ENP3HNMI To CA-H-HOUSE-NAME"
            ],
            "architectural_layer_semantic_keywords": [
              "process",
              "evaluate",
              "validate",
              "policy",
              "house"
            ]
          },
          {
            "traditionalLayer": "Data Services",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Policy Service Integration",
                "description": "Integrates with specialized policy processing programs",
                "shortName": "Service Integration",
                "codeBlocks": "EXEC CICS LINK calls to policy programs"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "15%",
            "evidence": [
              "EXEC CICS LINK PROGRAM('LGIPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC",
              "EXEC CICS LINK PROGRAM('LGAPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC",
              "EXEC CICS LINK PROGRAM('LGDPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC",
              "EXEC CICS LINK PROGRAM('LGUPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "program",
              "commarea",
              "service"
            ]
          },
          {
            "traditionalLayer": "Data Entities",
            "togaf": [
              {
                "architecture": "Data Architecture",
                "layer": "Data Entities"
              }
            ],
            "modernLayer": "Data",
            "classifications": [
              "Hierarchical Data Model"
            ],
            "elements": [
              {
                "name": "Communication Area Structure",
                "description": "Defines the data structure for policy information",
                "shortName": "COMM-AREA",
                "codeBlocks": "COMM-AREA definition, CA-HOUSE structure"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "5%",
            "evidence": [
              "01 COMM-AREA",
              "03 CA-REQUEST-ID PIC X(6)",
              "03 CA-RETURN-CODE PIC 9(2)",
              "03 CA-CUSTOMER-NUM PIC 9(10)",
              "05 CA-H-PROPERTY-TYPE PIC X(15)",
              "05 CA-H-BEDROOMS PIC 9(3)",
              "05 CA-H-VALUE PIC 9(8)"
            ],
            "architectural_layer_semantic_keywords": [
              "structure",
              "data",
              "field",
              "record"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "House Insurance Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-HOUSE",
                "reference": "CA-POLICY-SPECIFIC redefines in COMM-AREA"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create",
              "read",
              "update",
              "delete"
            ],
            "attributes": [
              "Property Type",
              "Bedrooms",
              "Value",
              "House Name",
              "House Number",
              "Postcode",
              "Issue Date",
              "Expiry Date"
            ],
            "business_context": "Represents a house insurance policy that provides coverage for residential properties"
          },
          {
            "name": "Customer",
            "sources": [
              {
                "type": "variable",
                "source_name": "CA-CUSTOMER-NUM",
                "reference": "Field in COMM-AREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "Customer Number"
            ],
            "business_context": "The policyholder who owns the house insurance policy"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "ENP3CNOI/ENP3CNOO",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as customer identifier in policy operations",
            "related_entities": [
              "Customer",
              "House Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENP3PNOI/ENP3PNOO",
            "semantic_type": "POLICY_NUMBER",
            "source": "Used as policy identifier in all operations",
            "related_entities": [
              "House Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENP3IDAI/ENP3IDAO",
            "semantic_type": "POLICY_ISSUE_DATE",
            "source": "Mapped to CA-ISSUE-DATE in policy operations",
            "related_entities": [
              "House Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENP3EDAI/ENP3EDAO",
            "semantic_type": "POLICY_EXPIRY_DATE",
            "source": "Mapped to CA-EXPIRY-DATE in policy operations",
            "related_entities": [
              "House Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENP3TYPI/ENP3TYPO",
            "semantic_type": "PROPERTY_TYPE",
            "source": "Mapped to CA-H-PROPERTY-TYPE in policy operations",
            "related_entities": [
              "House Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENP3BEDI/ENP3BEDO",
            "semantic_type": "PROPERTY_BEDROOMS",
            "source": "Mapped to CA-H-BEDROOMS in policy operations",
            "related_entities": [
              "House Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENP3VALI/ENP3VALO",
            "semantic_type": "PROPERTY_VALUE",
            "source": "Mapped to CA-H-VALUE in policy operations",
            "related_entities": [
              "House Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENP3HNMI/ENP3HNMO",
            "semantic_type": "PROPERTY_HOUSE_NAME",
            "source": "Mapped to CA-H-HOUSE-NAME in policy operations",
            "related_entities": [
              "House Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENP3HNOI/ENP3HNOO",
            "semantic_type": "PROPERTY_HOUSE_NUMBER",
            "source": "Mapped to CA-H-HOUSE-NUMBER in policy operations",
            "related_entities": [
              "House Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENP3HPCI/ENP3HPCO",
            "semantic_type": "PROPERTY_POSTCODE",
            "source": "Mapped to CA-H-POSTCODE in policy operations",
            "related_entities": [
              "House Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENP3OPTI/ENP3OPTO",
            "semantic_type": "OPERATION_CODE",
            "source": "Used to determine which policy operation to perform",
            "related_entities": [
              "House Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "SERVICE_OPERATION_CODE",
            "source": "Set before calling policy processing programs",
            "related_entities": [
              "House Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "OPERATION_RESULT_CODE",
            "source": "Checked after each call to policy processing programs",
            "related_entities": [
              "House Insurance Policy"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Customer must exist to add a house policy",
            "implementation": "When adding a policy, if CA-RETURN-CODE is 70, display 'Customer does not exist'"
          },
          {
            "rule": "Policy operations require a valid customer number and policy number",
            "implementation": "All policy operations pass ENP3CNOO to CA-CUSTOMER-NUM and ENP3PNOO to CA-POLICY-NUM"
          },
          {
            "rule": "Policy operations must be committed or rolled back as a unit",
            "implementation": "EXEC CICS Syncpoint Rollback is executed when add or delete operations fail"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "api",
              "target": "LGIPOL01",
              "data": "House policy inquiry"
            },
            {
              "type": "api",
              "target": "LGAPOL01",
              "data": "House policy creation"
            },
            {
              "type": "api",
              "target": "LGDPOL01",
              "data": "House policy deletion"
            },
            {
              "type": "api",
              "target": "LGUPOL01",
              "data": "House policy update"
            }
          ],
          "data_sources": [
            "User input via SSMAPP3 screen"
          ],
          "data_destinations": [
            "SSMAPP3 screen display",
            "Policy processing programs"
          ]
        },
        "features": [
          {
            "feature": "View House Insurance Policy",
            "rules": [
              {
                "rule": "Retrieve and display house policy details",
                "scenario": "User wants to view existing house policy details",
                "steps": [
                  {
                    "step": "Set request ID for house policy inquiry",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "CA-REQUEST-ID",
                        "object_type": "variable",
                        "when": "ENP3OPTO = '1'"
                      }
                    ],
                    "when": "ENP3OPTO = '1'",
                    "exceptions": "None"
                  },
                  {
                    "step": "Call policy inquiry program",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGIPOL01",
                        "object_type": "program",
                        "when": "ENP3OPTO = '1'"
                      }
                    ],
                    "when": "ENP3OPTO = '1'",
                    "exceptions": "CA-RETURN-CODE > 0"
                  },
                  {
                    "step": "Display policy details on screen",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP3O",
                        "object_type": "screen",
                        "when": "CA-RETURN-CODE = 0"
                      }
                    ],
                    "when": "CA-RETURN-CODE = 0",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Add House Insurance Policy",
            "rules": [
              {
                "rule": "Create new house insurance policy",
                "scenario": "User wants to add a new house policy",
                "steps": [
                  {
                    "step": "Set request ID for house policy creation",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "CA-REQUEST-ID",
                        "object_type": "variable",
                        "when": "ENP3OPTO = '2'"
                      }
                    ],
                    "when": "ENP3OPTO = '2'",
                    "exceptions": "None"
                  },
                  {
                    "step": "Call policy creation program",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGAPOL01",
                        "object_type": "program",
                        "when": "ENP3OPTO = '2'"
                      }
                    ],
                    "when": "ENP3OPTO = '2'",
                    "exceptions": "CA-RETURN-CODE > 0"
                  },
                  {
                    "step": "Display confirmation message",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP3O",
                        "object_type": "screen",
                        "when": "CA-RETURN-CODE = 0"
                      }
                    ],
                    "when": "CA-RETURN-CODE = 0",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Delete House Insurance Policy",
            "rules": [
              {
                "rule": "Remove existing house insurance policy",
                "scenario": "User wants to delete an existing house policy",
                "steps": [
                  {
                    "step": "Set request ID for house policy deletion",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "CA-REQUEST-ID",
                        "object_type": "variable",
                        "when": "ENP3OPTO = '3'"
                      }
                    ],
                    "when": "ENP3OPTO = '3'",
                    "exceptions": "None"
                  },
                  {
                    "step": "Call policy deletion program",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGDPOL01",
                        "object_type": "program",
                        "when": "ENP3OPTO = '3'"
                      }
                    ],
                    "when": "ENP3OPTO = '3'",
                    "exceptions": "CA-RETURN-CODE > 0"
                  },
                  {
                    "step": "Display confirmation message",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP3O",
                        "object_type": "screen",
                        "when": "CA-RETURN-CODE = 0"
                      }
                    ],
                    "when": "CA-RETURN-CODE = 0",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Update House Insurance Policy",
            "rules": [
              {
                "rule": "Modify existing house insurance policy",
                "scenario": "User wants to update an existing house policy",
                "steps": [
                  {
                    "step": "Set request ID for house policy update",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "CA-REQUEST-ID",
                        "object_type": "variable",
                        "when": "ENP3OPTO = '4'"
                      }
                    ],
                    "when": "ENP3OPTO = '4'",
                    "exceptions": "None"
                  },
                  {
                    "step": "Call policy update program",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGUPOL01",
                        "object_type": "program",
                        "when": "ENP3OPTO = '4'"
                      }
                    ],
                    "when": "ENP3OPTO = '4'",
                    "exceptions": "CA-RETURN-CODE > 0"
                  },
                  {
                    "step": "Display confirmation message",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP3O",
                        "object_type": "screen",
                        "when": "CA-RETURN-CODE = 0"
                      }
                    ],
                    "when": "CA-RETURN-CODE = 0",
                    "exceptions": "None"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "House Policy": "Insurance policy covering residential property",
          "Property Type": "Classification of the insured residential building",
          "Bedrooms": "Number of bedrooms in the insured property",
          "Property Value": "Monetary value of the insured property",
          "House Name": "Name identifier of the insured property",
          "House Number": "Numeric identifier of the insured property",
          "Postcode": "Postal code for the insured property location",
          "Issue Date": "Date when the insurance policy was issued",
          "Expiry Date": "Date when the insurance policy coverage ends"
        },
        "program_context": {
          "program_name": "LGTESTP3",
          "includes": [
            "LGCMAREA",
            "SSMAP"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 95,
            "Other": 5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business-Oriented"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PIC X(n) data type definitions",
            "COMP picture clause",
            "Hierarchical record structures",
            "Explicit division and section organization",
            "Fixed-format source code layout",
            "Verbose declarative syntax",
            "Alphanumeric field definitions",
            "Signed numeric field handling"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Product Management"
      }
    },
    "LGTESTP1": {
      "name": "LGTESTP1",
      "calls": [
        "LGAPOL01",
        "LGIPOL01",
        "LGDPOL01",
        "LGUPOL01"
      ],
      "called_by": [],
      "uses_tables": [],
      "uses_screens": [
        "SSMAP",
        "SSMAPP1"
      ],
      "includes": [
        "LGCMAREA",
        "SSMAP"
      ],
      "data_structures": {},
      "community": "Community 4",
      "program_language": "COBOL",
      "understanding": {
        "comments": "A menu-driven CICS interface program for motor insurance policy management that allows users to perform CRUD operations on policies by calling specialized processing programs",
        "title": "Motor Insurance Policy Management Interface",
        "purpose": {
          "business_goal": [
            "Provide user interface for motor insurance policy operations",
            "Enable policy creation, retrieval, update and deletion through a single interface"
          ],
          "implementation": "Uses a CICS screen-based menu system to capture user input and route requests to specialized policy processing programs (LGIPOL01, LGAPOL01, LGDPOL01, LGUPOL01)"
        },
        "program_type": {
          "category": "business",
          "function": "Policy management interface"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "User Interface",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Interface"
              }
            ],
            "modernLayer": "Presentation",
            "classifications": [
              "Mainframe",
              "CICS Screen Handling"
            ],
            "elements": [
              {
                "name": "Screen Maps",
                "description": "CICS screen maps for user interaction",
                "shortName": "SSMAP",
                "codeBlocks": "SSMAPP1I, SSMAPP1O, SSMAPC1I, SSMAPC1O"
              },
              {
                "name": "Screen Handling",
                "description": "CICS commands for displaying and receiving screen data",
                "shortName": "CICS-UI",
                "codeBlocks": "EXEC CICS SEND MAP, EXEC CICS RECEIVE MAP"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "EXEC CICS SEND MAP ('SSMAPP1') MAPSET ('SSMAP') ERASE END-EXEC",
              "EXEC CICS RECEIVE MAP('SSMAPP1') INTO(SSMAPP1I) MAPSET('SSMAP') END-EXEC",
              "EXEC CICS SEND TEXT FROM(MSGEND) LENGTH(LENGTH OF MSGEND) ERASE FREEKB END-EXEC"
            ],
            "architectural_layer_semantic_keywords": [
              "display",
              "send",
              "receive",
              "map",
              "screen"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe",
              "Transaction Processing"
            ],
            "elements": [
              {
                "name": "Option Processing",
                "description": "Processes user-selected options and routes to appropriate functions",
                "shortName": "OptionProc",
                "codeBlocks": "EVALUATE ENP1OPTO section"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "10%",
            "evidence": [
              "EVALUATE ENP1OPTO",
              "WHEN '1' ... WHEN '2' ... WHEN '3' ... WHEN '4'",
              "Move 'Motor Policy Updated' To ERP1FLDO",
              "Move 'New Motor Policy Inserted' To ERP1FLDO",
              "Move 'Motor Policy Deleted' To ERP1FLDO"
            ],
            "architectural_layer_semantic_keywords": [
              "evaluate",
              "process",
              "option"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Mainframe",
              "Program Linking"
            ],
            "elements": [
              {
                "name": "Policy Service Integration",
                "description": "Calls to external policy processing programs",
                "shortName": "PolicySvc",
                "codeBlocks": "EXEC CICS LINK PROGRAM calls"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "30%",
            "evidence": [
              "EXEC CICS LINK PROGRAM('LGIPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC",
              "EXEC CICS LINK PROGRAM('LGAPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC",
              "EXEC CICS LINK PROGRAM('LGDPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC",
              "EXEC CICS LINK PROGRAM('LGUPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "program",
              "call"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Motor Insurance Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-MOTOR",
                "reference": "Motor policy data structure in COMM-AREA"
              },
              {
                "type": "variable",
                "source_name": "SSMAPP1I/SSMAPP1O",
                "reference": "Screen map for motor policy data entry/display"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create",
              "read",
              "update",
              "delete"
            ],
            "attributes": [
              "Policy Number",
              "Customer Number",
              "Issue Date",
              "Expiry Date",
              "Make",
              "Model",
              "Value",
              "Registration Number",
              "Color",
              "CC",
              "Manufacture Date",
              "Premium",
              "Accidents"
            ],
            "business_context": "Core entity representing motor insurance contracts that can be created, viewed, updated, and deleted through the user interface"
          },
          {
            "name": "Customer",
            "sources": [
              {
                "type": "variable",
                "source_name": "CA-CUSTOMER-NUM",
                "reference": "Customer identifier in COMM-AREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "Customer Number"
            ],
            "business_context": "Entity representing policy owners, referenced by customer number in policy operations"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_ID",
            "source": "Used as unique identifier for policies in all CRUD operations",
            "related_entities": [
              "Motor Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as unique identifier for customers in all policy operations",
            "related_entities": [
              "Customer",
              "Motor Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENP1PNOI/ENP1PNOO",
            "semantic_type": "POLICY_ID",
            "source": "Screen field for policy number input/output",
            "related_entities": [
              "Motor Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENP1CNOI/ENP1CNOO",
            "semantic_type": "CUSTOMER_ID",
            "source": "Screen field for customer number input/output",
            "related_entities": [
              "Customer"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENP1OPTO",
            "semantic_type": "OPERATION_CODE",
            "source": "Screen field for operation selection (1=Inquire, 2=Add, 3=Delete, 4=Update)",
            "related_entities": [
              "Motor Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-REQUEST-ID",
            "semantic_type": "OPERATION_REQUEST_CODE",
            "source": "Request identifier passed to called programs (e.g., 01IMOT, 01AMOT, 01DMOT, 01UMOT)",
            "related_entities": [
              "Motor Insurance Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-RETURN-CODE",
            "semantic_type": "OPERATION_RESULT_CODE",
            "source": "Return code from called programs indicating success/failure",
            "related_entities": [
              "Motor Insurance Policy"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Customer must exist to add a motor policy",
            "implementation": "Return code 70 check after LGAPOL01 call with error message 'Customer does not exist'"
          },
          {
            "rule": "Policy operations require both customer number and policy number",
            "implementation": "Both fields are passed to all policy processing programs (LGIPOL01, LGAPOL01, LGDPOL01, LGUPOL01)"
          },
          {
            "rule": "Transaction rollback on policy add failure",
            "implementation": "Exec CICS Syncpoint Rollback End-Exec after error in add operation"
          },
          {
            "rule": "Transaction rollback on policy delete failure",
            "implementation": "Exec CICS Syncpoint Rollback End-Exec after error in delete operation"
          },
          {
            "rule": "User must select a valid operation option (1-4)",
            "implementation": "EVALUATE ENP1OPTO with WHEN clauses for options 1-4 and error message for invalid options"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "api",
              "target": "LGIPOL01",
              "data": "Motor policy inquiry"
            },
            {
              "type": "api",
              "target": "LGAPOL01",
              "data": "Motor policy creation"
            },
            {
              "type": "api",
              "target": "LGDPOL01",
              "data": "Motor policy deletion"
            },
            {
              "type": "api",
              "target": "LGUPOL01",
              "data": "Motor policy update"
            }
          ],
          "data_sources": [
            "User input via CICS screens"
          ],
          "data_destinations": [
            "External policy processing programs",
            "CICS screen output"
          ]
        },
        "features": [
          {
            "feature": "Motor Policy Inquiry",
            "rules": [
              {
                "rule": "Retrieve motor policy details by policy number and customer number",
                "scenario": "User wants to view existing motor policy details",
                "steps": [
                  {
                    "step": "Set request identifier for motor policy inquiry",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "CA-REQUEST-ID",
                        "object_type": "variable",
                        "when": "Always"
                      }
                    ],
                    "when": "ENP1OPTO = '1'",
                    "exceptions": "None"
                  },
                  {
                    "step": "Call policy inquiry program",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGIPOL01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "ENP1OPTO = '1'",
                    "exceptions": "CA-RETURN-CODE > 0"
                  },
                  {
                    "step": "Display policy details on screen",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP1O",
                        "object_type": "screen",
                        "when": "CA-RETURN-CODE = 0"
                      }
                    ],
                    "when": "Successful inquiry",
                    "exceptions": "No data returned"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Motor Policy Creation",
            "rules": [
              {
                "rule": "Create new motor policy with customer and vehicle details",
                "scenario": "User wants to create a new motor insurance policy",
                "steps": [
                  {
                    "step": "Set request identifier for motor policy creation",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "CA-REQUEST-ID",
                        "object_type": "variable",
                        "when": "Always"
                      }
                    ],
                    "when": "ENP1OPTO = '2'",
                    "exceptions": "None"
                  },
                  {
                    "step": "Call policy creation program",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGAPOL01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "ENP1OPTO = '2'",
                    "exceptions": "CA-RETURN-CODE > 0"
                  },
                  {
                    "step": "Display confirmation and new policy details",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP1O",
                        "object_type": "screen",
                        "when": "CA-RETURN-CODE = 0"
                      }
                    ],
                    "when": "Successful creation",
                    "exceptions": "Customer does not exist (code 70) or other errors"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Motor Policy Deletion",
            "rules": [
              {
                "rule": "Delete existing motor policy by policy number and customer number",
                "scenario": "User wants to remove an existing motor insurance policy",
                "steps": [
                  {
                    "step": "Set request identifier for motor policy deletion",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "CA-REQUEST-ID",
                        "object_type": "variable",
                        "when": "Always"
                      }
                    ],
                    "when": "ENP1OPTO = '3'",
                    "exceptions": "None"
                  },
                  {
                    "step": "Call policy deletion program",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGDPOL01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "ENP1OPTO = '3'",
                    "exceptions": "CA-RETURN-CODE > 0"
                  },
                  {
                    "step": "Display deletion confirmation",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP1O",
                        "object_type": "screen",
                        "when": "CA-RETURN-CODE = 0"
                      }
                    ],
                    "when": "Successful deletion",
                    "exceptions": "Error deleting motor policy"
                  }
                ]
              }
            ]
          },
          {
            "feature": "Motor Policy Update",
            "rules": [
              {
                "rule": "Update existing motor policy details",
                "scenario": "User wants to modify an existing motor insurance policy",
                "steps": [
                  {
                    "step": "Set request identifier for motor policy update",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "CA-REQUEST-ID",
                        "object_type": "variable",
                        "when": "Always"
                      }
                    ],
                    "when": "ENP1OPTO = '4'",
                    "exceptions": "None"
                  },
                  {
                    "step": "Call policy update program",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGUPOL01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "ENP1OPTO = '4'",
                    "exceptions": "CA-RETURN-CODE > 0"
                  },
                  {
                    "step": "Display update confirmation",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP1O",
                        "object_type": "screen",
                        "when": "CA-RETURN-CODE = 0"
                      }
                    ],
                    "when": "Successful update",
                    "exceptions": "Error updating motor policy"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Motor Policy": "Insurance contract for motor vehicles",
          "Customer Number": "Unique identifier for policy owner",
          "Policy Number": "Unique identifier for insurance policy",
          "Issue Date": "Date when policy becomes effective",
          "Expiry Date": "Date when policy coverage ends",
          "Make": "Vehicle manufacturer",
          "Model": "Vehicle model name",
          "Registration Number": "Vehicle license plate number",
          "CC": "Engine capacity in cubic centimeters",
          "Premium": "Amount charged for insurance coverage",
          "Accidents": "Number of previous accidents associated with the vehicle"
        },
        "program_context": {
          "program_name": "LGTESTP1",
          "includes": [
            "LGCMAREA",
            "SSMAP"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Structured Programming",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 98,
            "Unknown": 2
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.95,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "PIC X/9 data type declarations",
            "COMP picture clause",
            "REDEFINES keyword",
            "Hierarchical data structure (01, 02, 03 levels)",
            "Fixed-format source code layout",
            "Verbose division-based program structure"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Product Management"
      }
    },
    "LGTESTP2": {
      "name": "LGTESTP2",
      "calls": [
        "LGAPOL01",
        "LGIPOL01",
        "LGDPOL01",
        "LGUPOL01"
      ],
      "called_by": [],
      "uses_tables": [],
      "uses_screens": [
        "SSMAPP2",
        "SSMAP"
      ],
      "includes": [
        "LGCMAREA",
        "SSMAP"
      ],
      "data_structures": {},
      "community": "Community 4",
      "program_language": "COBOL",
      "understanding": {
        "comments": "The program provides a user interface for managing life insurance endowment policies, supporting inquiry, creation, deletion, and update operations through specialized service programs.",
        "title": "Life Insurance Endowment Policy Management Interface",
        "purpose": {
          "business_goal": [
            "Provide a user interface for managing life insurance endowment policies",
            "Support CRUD operations for endowment policies"
          ],
          "implementation": "The program presents a screen interface (SSMAPP2) that allows users to inquire, add, delete, and update endowment insurance policies by calling specialized programs for each operation"
        },
        "program_type": {
          "category": "business",
          "function": "policy management"
        },
        "architectural_layer": [
          {
            "traditionalLayer": "User Interface",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Interface"
              }
            ],
            "modernLayer": "Presentation",
            "classifications": [
              "Mainframe Screen Interface"
            ],
            "elements": [
              {
                "name": "Screen Definition",
                "description": "Defines the screen layout for policy management interface",
                "shortName": "SSMAPP2",
                "codeBlocks": "SSMAPP2I, SSMAPP2O screen map definitions"
              },
              {
                "name": "Screen Operations",
                "description": "Handles screen display and user input processing",
                "shortName": "SCREEN-OPS",
                "codeBlocks": "EXEC CICS SEND MAP, EXEC CICS RECEIVE MAP statements"
              }
            ],
            "primary_layer": true,
            "percentage_layer_in_code": "60%",
            "evidence": [
              "EXEC CICS SEND MAP ('SSMAPP2') MAPSET ('SSMAP') ERASE END-EXEC",
              "EXEC CICS RECEIVE MAP('SSMAPP2') INTO(SSMAPP2I) MAPSET('SSMAP') END-EXEC",
              "Extensive screen map definitions (SSMAPP2I, SSMAPP2O)",
              "Error message display: Move 'Life Policy Deleted' To ERP2FLDO"
            ],
            "architectural_layer_semantic_keywords": [
              "display",
              "send",
              "receive",
              "map",
              "screen",
              "input",
              "output"
            ]
          },
          {
            "traditionalLayer": "Business Logic",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Application Services"
              },
              {
                "architecture": "Business Architecture",
                "layer": "Business Processes"
              }
            ],
            "modernLayer": "Application",
            "classifications": [
              "Mainframe"
            ],
            "elements": [
              {
                "name": "Policy Operation Handlers",
                "description": "Specialized sections for handling policy inquiries, additions, deletions, and updates",
                "shortName": "POL-OPS",
                "codeBlocks": "MAINLINE section, EVALUATE ENP2OPTO block"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "EVALUATE ENP2OPTO - Main business logic decision structure",
              "Move '01IEND' To CA-REQUEST-ID - Business operation codes",
              "Move ENP2CNOO To CA-CUSTOMER-NUM - Business entity mapping",
              "Move ENP2PNOO To CA-POLICY-NUM - Business entity mapping",
              "Business entities: policies, customers, endowment details"
            ],
            "architectural_layer_semantic_keywords": [
              "policy",
              "customer",
              "validate",
              "process",
              "business rules"
            ]
          },
          {
            "traditionalLayer": "Outbound",
            "togaf": [
              {
                "architecture": "Application Architecture",
                "layer": "Communication Services"
              }
            ],
            "modernLayer": "Integration",
            "classifications": [
              "Mainframe Service Calls"
            ],
            "elements": [
              {
                "name": "Service Program Calls",
                "description": "Calls to specialized programs for policy operations",
                "shortName": "SVC-CALLS",
                "codeBlocks": "EXEC CICS LINK statements"
              }
            ],
            "primary_layer": false,
            "percentage_layer_in_code": "20%",
            "evidence": [
              "EXEC CICS LINK PROGRAM('LGIPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC",
              "EXEC CICS LINK PROGRAM('LGAPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC",
              "EXEC CICS LINK PROGRAM('LGDPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC",
              "EXEC CICS LINK PROGRAM('LGUPOL01') COMMAREA(COMM-AREA) LENGTH(32500) END-EXEC"
            ],
            "architectural_layer_semantic_keywords": [
              "link",
              "call",
              "program",
              "service",
              "interface"
            ]
          }
        ],
        "business_entities": [
          {
            "name": "Endowment Policy",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-ENDOWMENT",
                "reference": "Endowment policy data structure in COMMAREA"
              },
              {
                "type": "screen",
                "source_name": "SSMAPP2",
                "reference": "Screen map for endowment policy management"
              }
            ],
            "importance": "primary",
            "persistent_operations": [
              "create",
              "read",
              "update",
              "delete"
            ],
            "attributes": [
              "Policy Number",
              "Customer Number",
              "Issue Date",
              "Expiry Date",
              "Fund Name",
              "Term",
              "Sum Assured",
              "Life Assured",
              "With Profits",
              "Equities",
              "Managed Fund"
            ],
            "business_context": "Core insurance product that provides life insurance coverage with an investment component"
          },
          {
            "name": "Customer",
            "sources": [
              {
                "type": "record",
                "source_name": "CA-CUSTOMER-NUM",
                "reference": "Customer number in COMMAREA"
              }
            ],
            "importance": "secondary",
            "persistent_operations": [
              "read"
            ],
            "attributes": [
              "Customer Number"
            ],
            "business_context": "Entity that owns insurance policies"
          }
        ],
        "parameter_semantics": [
          {
            "parameter": "CA-POLICY-NUM",
            "semantic_type": "POLICY_ID",
            "source": "Used as identifier for policy operations",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-CUSTOMER-NUM",
            "semantic_type": "CUSTOMER_ID",
            "source": "Used as identifier for customer",
            "related_entities": [
              "Customer",
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-E-FUND-NAME",
            "semantic_type": "INVESTMENT_FUND",
            "source": "Represents the investment fund for endowment policy",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-E-TERM",
            "semantic_type": "POLICY_TERM",
            "source": "Duration of the endowment policy",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-E-SUM-ASSURED",
            "semantic_type": "INSURANCE_AMOUNT",
            "source": "Amount of insurance coverage",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-E-LIFE-ASSURED",
            "semantic_type": "INSURED_PERSON",
            "source": "Person whose life is insured by the policy",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-E-WITH-PROFITS",
            "semantic_type": "INVESTMENT_TYPE",
            "source": "Indicates if policy includes profit sharing",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-E-EQUITIES",
            "semantic_type": "INVESTMENT_TYPE",
            "source": "Indicates if policy includes equity investments",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "CA-E-MANAGED-FUND",
            "semantic_type": "INVESTMENT_TYPE",
            "source": "Indicates if policy includes managed fund investments",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          },
          {
            "parameter": "ENP2OPTO",
            "semantic_type": "OPERATION_CODE",
            "source": "User interface control for operation selection",
            "related_entities": [
              "Endowment Policy"
            ],
            "confidence": "high"
          }
        ],
        "business_rules": [
          {
            "rule": "Policy operations require a valid customer number",
            "implementation": "Customer number is passed to all service programs and validated (error code 70 returned if customer doesn't exist)"
          },
          {
            "rule": "Policy operations require a valid policy number for inquire, update, and delete",
            "implementation": "Policy number is passed to service programs and validated before operation"
          },
          {
            "rule": "Users must select a valid operation (1=Inquire, 2=Add, 3=Delete, 4=Update)",
            "implementation": "EVALUATE ENP2OPTO statement validates operation selection"
          }
        ],
        "technical_implementation": {
          "transaction_pattern": "online",
          "integration_approaches": [
            {
              "type": "api",
              "target": "LGIPOL01",
              "data": "policy inquiry"
            },
            {
              "type": "api",
              "target": "LGAPOL01",
              "data": "policy creation"
            },
            {
              "type": "api",
              "target": "LGDPOL01",
              "data": "policy deletion"
            },
            {
              "type": "api",
              "target": "LGUPOL01",
              "data": "policy update"
            }
          ],
          "data_sources": [
            "CICS service programs"
          ],
          "data_destinations": [
            "Screen display"
          ]
        },
        "features": [
          {
            "feature": "Endowment Policy Management",
            "rules": [
              {
                "rule": "Policy Inquiry",
                "scenario": "User retrieves existing endowment policy details",
                "steps": [
                  {
                    "step": "Validate operation selection",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "ENP2OPTO",
                        "object_type": "field",
                        "when": "Value equals '1'"
                      }
                    ],
                    "when": "User selects option 1",
                    "exceptions": "Invalid option selection"
                  },
                  {
                    "step": "Call policy inquiry service",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGIPOL01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Valid customer and policy numbers provided",
                    "exceptions": "No data returned"
                  },
                  {
                    "step": "Display policy details",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP2",
                        "object_type": "screen",
                        "when": "Successful inquiry"
                      }
                    ],
                    "when": "Policy data retrieved successfully",
                    "exceptions": "No data was returned"
                  }
                ]
              },
              {
                "rule": "Policy Creation",
                "scenario": "User creates a new endowment policy",
                "steps": [
                  {
                    "step": "Validate operation selection",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "ENP2OPTO",
                        "object_type": "field",
                        "when": "Value equals '2'"
                      }
                    ],
                    "when": "User selects option 2",
                    "exceptions": "Invalid option selection"
                  },
                  {
                    "step": "Call policy creation service",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGAPOL01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Valid policy data provided",
                    "exceptions": "Customer does not exist, Error adding life policy"
                  },
                  {
                    "step": "Display confirmation",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP2",
                        "object_type": "screen",
                        "when": "Successful creation"
                      }
                    ],
                    "when": "Policy created successfully",
                    "exceptions": "Error adding policy"
                  }
                ]
              },
              {
                "rule": "Policy Deletion",
                "scenario": "User deletes an existing endowment policy",
                "steps": [
                  {
                    "step": "Validate operation selection",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "ENP2OPTO",
                        "object_type": "field",
                        "when": "Value equals '3'"
                      }
                    ],
                    "when": "User selects option 3",
                    "exceptions": "Invalid option selection"
                  },
                  {
                    "step": "Call policy deletion service",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGDPOL01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Valid customer and policy numbers provided",
                    "exceptions": "Error deleting life policy"
                  },
                  {
                    "step": "Display confirmation",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP2",
                        "object_type": "screen",
                        "when": "Successful deletion"
                      }
                    ],
                    "when": "Policy deleted successfully",
                    "exceptions": "Error deleting policy"
                  }
                ]
              },
              {
                "rule": "Policy Update",
                "scenario": "User updates an existing endowment policy",
                "steps": [
                  {
                    "step": "Validate operation selection",
                    "external": false,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "ENP2OPTO",
                        "object_type": "field",
                        "when": "Value equals '4'"
                      }
                    ],
                    "when": "User selects option 4",
                    "exceptions": "Invalid option selection"
                  },
                  {
                    "step": "Retrieve current policy data",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGIPOL01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "Valid customer and policy numbers provided",
                    "exceptions": "No data was returned"
                  },
                  {
                    "step": "Display current policy for editing",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP2",
                        "object_type": "screen",
                        "when": "Successful retrieval"
                      }
                    ],
                    "when": "Policy data retrieved successfully",
                    "exceptions": "No data was returned"
                  },
                  {
                    "step": "Call policy update service",
                    "external": true,
                    "step_type": "call",
                    "objects": [
                      {
                        "name": "LGUPOL01",
                        "object_type": "program",
                        "when": "Always"
                      }
                    ],
                    "when": "User submits updated policy data",
                    "exceptions": "Error updating life policy"
                  },
                  {
                    "step": "Display confirmation",
                    "external": false,
                    "step_type": "write",
                    "objects": [
                      {
                        "name": "SSMAPP2",
                        "object_type": "screen",
                        "when": "Successful update"
                      }
                    ],
                    "when": "Policy updated successfully",
                    "exceptions": "Error updating policy"
                  }
                ]
              }
            ]
          }
        ],
        "business_terminology": {
          "Endowment Policy": "A life insurance policy that pays out a lump sum after a specified term or on earlier death",
          "Fund Name": "The investment fund associated with an endowment policy",
          "Term": "The duration of the endowment policy in years",
          "Sum Assured": "The amount of insurance coverage provided by the policy",
          "Life Assured": "The person whose life is insured by the policy",
          "With Profits": "A type of endowment policy where profits are shared with policyholders",
          "Equities": "A type of investment in company shares",
          "Managed Fund": "A professionally managed investment portfolio"
        },
        "program_context": {
          "program_name": "LGTESTP2",
          "includes": [
            "LGCMAREA",
            "SSMAP"
          ],
          "language": "COBOL",
          "language_family": "Procedural",
          "paradigms": [
            "Imperative",
            "Procedural"
          ]
        },
        "language_analysis": {
          "language_breakdown": {
            "COBOL": 95,
            "Unstructured Text": 5
          },
          "dominant_language": "COBOL",
          "seems_valid": true,
          "confidence": 0.98,
          "language_family": "Procedural",
          "detected_paradigms": [
            "Structured Programming",
            "Business Data Processing"
          ],
          "language_version_hints": [
            "COBOL-85",
            "Enterprise COBOL"
          ],
          "file_type_compatibility": [
            ".cbl",
            ".cob",
            ".cobol"
          ],
          "significant_features": [
            "IDENTIFICATION DIVISION",
            "ENVIRONMENT DIVISION",
            "DATA DIVISION",
            "WORKING-STORAGE SECTION",
            "Picture clauses (PIC)",
            "Hierarchical data structure definitions",
            "COMP (Computational) data types",
            "Explicit record structure with 01, 02 level numbers",
            "REDEFINES clause for data redefinition",
            "Fixed-format source code layout",
            "Verbose division and section declarations"
          ]
        },
        "business_domain": "Policy Administration",
        "service_domain": "Product Management"
      }
    }
  },
  "clusters": {
    "0": {
      "cluster_id": 0,
      "cluster_type": "Master Data",
      "programs": [
        "LGAPDB01",
        "LGTESTP3",
        "LGAPVS01",
        "LGUPDB01",
        "LGAPBR01",
        "LGIPOL01",
        "LGUPVS01",
        "LGTESTP1",
        "LGDPVS01",
        "LGDPOL01",
        "LGTESTP4",
        "LGIPVS01",
        "LGTESTP2",
        "LGIPDB01",
        "LGAPOL01",
        "LGDPDB01"
      ],
      "boundary_context": {
        "external_calls": {
          "LGTESTP3": [
            {
              "target": "LGUPOL01"
            }
          ],
          "LGTESTP1": [
            {
              "target": "LGUPOL01"
            }
          ],
          "LGTESTP2": [
            {
              "target": "LGUPOL01"
            }
          ]
        },
        "external_called_by": {}
      },
      "primary_entities": [
        "Insurance Policy"
      ],
      "master_data_programs": [
        "LGAPDB01",
        "LGUPVS01",
        "LGAPVS01",
        "LGUPDB01",
        "LGDPVS01",
        "LGDPDB01"
      ],
      "data_access_paths": {
        "Claim": [
          {
            "program": "LGAPDB01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          },
          {
            "program": "LGAPOL01",
            "path_info": {
              "type": "orchestration",
              "weight": 2.0999999999999996,
              "via_program": "LGAPDB01",
              "path": {
                "type": "direct",
                "weight": 2.0
              }
            }
          }
        ],
        "Insurance Policy": [
          {
            "program": "LGAPDB01",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          },
          {
            "program": "LGTESTP3",
            "path_info": {
              "type": "indirect",
              "weight": 2.2049999999999996,
              "via_program": "LGAPOL01",
              "path": {
                "type": "orchestration",
                "weight": 3.1499999999999995,
                "via_program": "LGAPDB01",
                "path": {
                  "type": "direct",
                  "weight": 3.0
                }
              }
            }
          },
          {
            "program": "LGAPVS01",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          },
          {
            "program": "LGUPDB01",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          },
          {
            "program": "LGUPVS01",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          },
          {
            "program": "LGTESTP1",
            "path_info": {
              "type": "indirect",
              "weight": 2.2049999999999996,
              "via_program": "LGAPOL01",
              "path": {
                "type": "orchestration",
                "weight": 3.1499999999999995,
                "via_program": "LGAPDB01",
                "path": {
                  "type": "direct",
                  "weight": 3.0
                }
              }
            }
          },
          {
            "program": "LGDPVS01",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          },
          {
            "program": "LGDPOL01",
            "path_info": {
              "type": "indirect",
              "weight": 2.0999999999999996,
              "via_program": "LGDPDB01",
              "path": {
                "type": "direct",
                "weight": 3.0
              }
            }
          },
          {
            "program": "LGTESTP4",
            "path_info": {
              "type": "indirect",
              "weight": 2.2049999999999996,
              "via_program": "LGAPOL01",
              "path": {
                "type": "orchestration",
                "weight": 3.1499999999999995,
                "via_program": "LGAPDB01",
                "path": {
                  "type": "direct",
                  "weight": 3.0
                }
              }
            }
          },
          {
            "program": "LGTESTP2",
            "path_info": {
              "type": "indirect",
              "weight": 2.2049999999999996,
              "via_program": "LGAPOL01",
              "path": {
                "type": "orchestration",
                "weight": 3.1499999999999995,
                "via_program": "LGAPDB01",
                "path": {
                  "type": "direct",
                  "weight": 3.0
                }
              }
            }
          },
          {
            "program": "LGAPOL01",
            "path_info": {
              "type": "orchestration",
              "weight": 3.1499999999999995,
              "via_program": "LGAPDB01",
              "path": {
                "type": "direct",
                "weight": 3.0
              }
            }
          },
          {
            "program": "LGDPDB01",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          }
        ],
        "Endowment Policy": [
          {
            "program": "LGAPDB01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          },
          {
            "program": "LGUPDB01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          },
          {
            "program": "LGAPOL01",
            "path_info": {
              "type": "orchestration",
              "weight": 2.0999999999999996,
              "via_program": "LGAPDB01",
              "path": {
                "type": "direct",
                "weight": 2.0
              }
            }
          }
        ],
        "Commercial Policy": [
          {
            "program": "LGAPDB01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          },
          {
            "program": "LGAPOL01",
            "path_info": {
              "type": "orchestration",
              "weight": 2.0999999999999996,
              "via_program": "LGAPDB01",
              "path": {
                "type": "direct",
                "weight": 2.0
              }
            }
          }
        ],
        "House Policy": [
          {
            "program": "LGAPDB01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          },
          {
            "program": "LGUPDB01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          },
          {
            "program": "LGAPOL01",
            "path_info": {
              "type": "orchestration",
              "weight": 2.0999999999999996,
              "via_program": "LGAPDB01",
              "path": {
                "type": "direct",
                "weight": 2.0
              }
            }
          }
        ],
        "Motor Policy": [
          {
            "program": "LGAPDB01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          },
          {
            "program": "LGUPDB01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          },
          {
            "program": "LGAPOL01",
            "path_info": {
              "type": "orchestration",
              "weight": 2.0999999999999996,
              "via_program": "LGAPDB01",
              "path": {
                "type": "direct",
                "weight": 2.0
              }
            }
          }
        ],
        "Error Log": [
          {
            "program": "LGAPVS01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          },
          {
            "program": "LGUPDB01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          },
          {
            "program": "LGDPVS01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          }
        ],
        "Commercial Insurance Policy": [
          {
            "program": "LGTESTP4",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          }
        ]
      },
      "business_domains": [
        {
          "domain_id": "policy_administration",
          "domain_name": "Policy Administration",
          "framework_appropriate": false,
          "confidence": 70,
          "reasoning": "While the BIAN framework is designed for banking services, this cluster clearly represents insurance policy management functionality. The programs manage different types of insurance policies (Endowment, House, Motor, Commercial) through their lifecycle including creation, retrieval, update, and deletion. The cluster shows a cohesive set of programs that handle insurance policy data with specialized interfaces for different policy types. However, since BIAN is banking-focused, a more appropriate framework would be ACORD (Association for Cooperative Operations Research and Development), which is specifically designed for the insurance industry.",
          "programs": [
            "LGIPVS01",
            "LGAPDB01",
            "LGIPDB01",
            "LGUPVS01",
            "LGAPVS01",
            "LGDPVS01",
            "LGAPBR01",
            "LGIPOL01",
            "LGAPOL01",
            "LGUPDB01",
            "LGDPDB01",
            "LGDPOL01",
            "LGTESTP4",
            "LGTESTP3",
            "LGTESTP1",
            "LGTESTP2"
          ],
          "unclassified_reason": "The programs in this cluster belong to the insurance industry rather than banking, making BIAN an inappropriate framework for classification.",
          "other_business_framework": "ACORD",
          "other_business_framework_first_level": "Insurance Lines of Business",
          "other_business_framework_second_level": "Policy Administration",
          "other_business_framework_third_level": [
            {
              "id": "policy_management",
              "name": "Policy Management",
              "description": "Functions related to the creation, maintenance, and administration of insurance policies across different lines of business",
              "fourth_level": [
                {
                  "id": "policy_creation",
                  "name": "Policy Creation and Issuance"
                },
                {
                  "id": "policy_maintenance",
                  "name": "Policy Maintenance and Updates"
                },
                {
                  "id": "policy_inquiry",
                  "name": "Policy Inquiry and Information Retrieval"
                },
                {
                  "id": "policy_termination",
                  "name": "Policy Termination and Deletion"
                },
                {
                  "id": "business_rules",
                  "name": "Business Rules Processing"
                }
              ]
            },
            {
              "id": "product_management",
              "name": "Product Management",
              "description": "Functions related to the management of different insurance product types and their specific requirements",
              "fourth_level": [
                {
                  "id": "life_insurance",
                  "name": "Life and Endowment Insurance"
                },
                {
                  "id": "property_insurance",
                  "name": "Property Insurance"
                },
                {
                  "id": "motor_insurance",
                  "name": "Motor Insurance"
                },
                {
                  "id": "commercial_insurance",
                  "name": "Commercial Insurance"
                }
              ]
            }
          ],
          "domain_driven_design": [
            {
              "microservice_name": "Policy Core Service",
              "programs": [
                "LGAPOL01",
                "LGDPOL01",
                "LGIPOL01"
              ]
            },
            {
              "microservice_name": "Policy Database Service",
              "programs": [
                "LGAPDB01",
                "LGDPDB01",
                "LGIPDB01",
                "LGUPDB01"
              ]
            },
            {
              "microservice_name": "Policy File Storage Service",
              "programs": [
                "LGAPVS01",
                "LGDPVS01",
                "LGIPVS01",
                "LGUPVS01"
              ]
            },
            {
              "microservice_name": "Business Rules Service",
              "programs": [
                "LGAPBR01"
              ]
            },
            {
              "microservice_name": "Policy UI Services",
              "programs": [
                "LGTESTP1",
                "LGTESTP2",
                "LGTESTP3",
                "LGTESTP4"
              ]
            }
          ],
          "vertical_slices": [
            {
              "vertical_slice_name": "Endowment Policy Management",
              "programs": [
                "LGTESTP2",
                "LGAPOL01",
                "LGDPOL01",
                "LGIPOL01",
                "LGAPDB01",
                "LGDPDB01",
                "LGIPDB01",
                "LGUPDB01",
                "LGAPVS01",
                "LGDPVS01",
                "LGIPVS01",
                "LGUPVS01",
                "LGAPBR01"
              ]
            },
            {
              "vertical_slice_name": "Motor Policy Management",
              "programs": [
                "LGTESTP1",
                "LGAPOL01",
                "LGDPOL01",
                "LGIPOL01",
                "LGAPDB01",
                "LGDPDB01",
                "LGIPDB01",
                "LGUPDB01",
                "LGAPVS01",
                "LGDPVS01",
                "LGIPVS01",
                "LGUPVS01"
              ]
            },
            {
              "vertical_slice_name": "House Policy Management",
              "programs": [
                "LGTESTP3",
                "LGAPOL01",
                "LGDPOL01",
                "LGIPOL01",
                "LGAPDB01",
                "LGDPDB01",
                "LGIPDB01",
                "LGUPDB01",
                "LGAPVS01",
                "LGDPVS01",
                "LGIPVS01",
                "LGUPVS01"
              ]
            },
            {
              "vertical_slice_name": "Commercial Policy Management",
              "programs": [
                "LGTESTP4",
                "LGAPOL01",
                "LGDPOL01",
                "LGIPOL01",
                "LGAPDB01",
                "LGDPDB01",
                "LGIPDB01",
                "LGUPDB01",
                "LGAPVS01",
                "LGDPVS01",
                "LGIPVS01",
                "LGUPVS01"
              ]
            }
          ],
          "service_domains": [
            {
              "domain_id": "policy_management",
              "domain_name": "Policy Management",
              "confidence": 95,
              "reasoning": "The programs in this service domain form a clear CRUD architecture for insurance policies. They handle the core lifecycle operations of policies including creation (LGAPOL01, LGAPDB01, LGAPVS01), retrieval (LGIPOL01, LGIPDB01, LGIPVS01), update (LGUPDB01, LGUPVS01), and deletion (LGDPOL01, LGDPDB01, LGDPVS01). These programs directly manipulate the Insurance Policy entity and its specialized types across multiple storage mechanisms (DB2 tables and KSDSPOLY file). The call hierarchy shows a layered architecture with UI interfaces (LGTESTPx) calling controller programs (LGXPOL01) which then call data access programs (LGXPDB01, LGXPVS01). LGAPBR01 specifically handles business rules processing for policy fund selection, which is a core Policy Management capability.",
              "programs": [
                "LGAPOL01",
                "LGAPDB01",
                "LGAPVS01",
                "LGDPOL01",
                "LGDPDB01",
                "LGDPVS01",
                "LGIPOL01",
                "LGIPDB01",
                "LGIPVS01",
                "LGUPDB01",
                "LGUPVS01",
                "LGAPBR01"
              ],
              "data_objects_evidence": "These programs have direct write access to the Insurance Policy entity and its specialized types (Endowment, House, Motor, Commercial). LGAPDB01, LGAPVS01, LGUPDB01, and LGUPVS01 create and update policy records, while LGDPDB01 and LGDPVS01 delete them. LGIPDB01 and LGIPVS01 read policy data. The programs operate on both the KSDSPOLY file and specialized DB2 tables for different policy types. The write operations on these core entities strongly indicate domain ownership.",
              "functional_matches": [
                "Policy Creation and Issuance",
                "Policy Maintenance and Updates",
                "Policy Inquiry and Information Retrieval",
                "Policy Termination and Deletion",
                "Business Rules Processing"
              ],
              "boundary_analysis": "These programs focus exclusively on policy data operations without crossing into product definition or claims processing. They handle the full lifecycle of policy records across all insurance types but don't define the product characteristics themselves. The integration with business rules (LGAPBR01 with IBM ODM) is specifically for policy-level decisions about fund selection, staying within policy management boundaries."
            },
            {
              "domain_id": "product_management",
              "domain_name": "Product Management",
              "confidence": 90,
              "reasoning": "The LGTESTP1-4 programs represent specialized interfaces for different insurance product types (Motor, Endowment, House, and Commercial). These programs implement product-specific business logic and user interfaces tailored to each insurance product's unique requirements. They serve as the entry points for product-specific operations, calling the more generic policy management services (LGDPOL01, LGIPOL01) to perform the actual data operations. The product-specific nature of these programs and their focus on different lines of business (Life/Endowment, Property, Motor, Commercial) aligns perfectly with the Product Management service domain.",
              "programs": [
                "LGTESTP1",
                "LGTESTP2",
                "LGTESTP3",
                "LGTESTP4"
              ],
              "data_objects_evidence": "Each program specializes in a specific insurance product type: LGTESTP1 for Motor policies, LGTESTP2 for Endowment policies, LGTESTP3 for House policies, and LGTESTP4 for Commercial policies. LGTESTP4 explicitly writes to CA-COMMERCIAL records. These programs don't directly manipulate the underlying data but instead call the Policy Management services to perform those operations, which is consistent with a Product Management layer that knows about product-specific requirements but delegates data persistence.",
              "functional_matches": [
                "Life and Endowment Insurance",
                "Property Insurance",
                "Motor Insurance",
                "Commercial Insurance"
              ],
              "boundary_analysis": "These programs maintain clear boundaries by focusing on product-specific interfaces and business logic while delegating actual policy data operations to the Policy Management service domain. They don't implement generic policy operations themselves but rather provide product-specific entry points that know how to interact with the underlying policy services. This separation of concerns respects the boundary between product-specific logic and generic policy operations."
            }
          ]
        }
      ]
    },
    "1": {
      "cluster_id": 1,
      "cluster_type": "Master Data",
      "programs": [
        "LGACDB02",
        "LGICDB01",
        "LGACDB01",
        "LGACUS01",
        "OLDACDB2",
        "OLDACDB1",
        "LGTESTC1",
        "LGACVS01",
        "LGUCDB01",
        "LGUCVS01",
        "LGUCUS01",
        "LGICUS01",
        "LGICVS01"
      ],
      "boundary_context": {
        "external_calls": {},
        "external_called_by": {}
      },
      "primary_entities": [
        "Customer",
        "Customer Security"
      ],
      "master_data_programs": [
        "LGTESTC1",
        "LGACDB02",
        "LGACDB01",
        "LGACUS01",
        "OLDACDB2",
        "LGACVS01",
        "LGUCDB01",
        "LGUCVS01",
        "OLDACDB1"
      ],
      "data_access_paths": {
        "Customer Security": [
          {
            "program": "LGACDB02",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          },
          {
            "program": "LGACDB01",
            "path_info": {
              "type": "orchestration",
              "weight": 3.1499999999999995,
              "via_program": "LGACDB02",
              "path": {
                "type": "direct",
                "weight": 3.0
              }
            }
          },
          {
            "program": "LGACUS01",
            "path_info": {
              "type": "indirect",
              "weight": 2.2049999999999996,
              "via_program": "LGACDB01",
              "path": {
                "type": "orchestration",
                "weight": 3.1499999999999995,
                "via_program": "LGACDB02",
                "path": {
                  "type": "direct",
                  "weight": 3.0
                }
              }
            }
          },
          {
            "program": "OLDACDB2",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          },
          {
            "program": "OLDACDB1",
            "path_info": {
              "type": "orchestration",
              "weight": 3.1499999999999995,
              "via_program": "LGACDB02",
              "path": {
                "type": "direct",
                "weight": 3.0
              }
            }
          }
        ],
        "Error Log": [
          {
            "program": "LGACDB01",
            "path_info": {
              "type": "orchestration",
              "weight": 2.0999999999999996,
              "via_program": "LGACVS01",
              "path": {
                "type": "direct",
                "weight": 2.0
              }
            }
          },
          {
            "program": "OLDACDB1",
            "path_info": {
              "type": "orchestration",
              "weight": 2.0999999999999996,
              "via_program": "LGACVS01",
              "path": {
                "type": "direct",
                "weight": 2.0
              }
            }
          },
          {
            "program": "LGACVS01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          }
        ],
        "Customer": [
          {
            "program": "LGACDB01",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          },
          {
            "program": "LGACDB01",
            "path_info": {
              "type": "orchestration",
              "weight": 3.1499999999999995,
              "via_program": "LGACVS01",
              "path": {
                "type": "direct",
                "weight": 3.0
              }
            }
          },
          {
            "program": "LGACUS01",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          },
          {
            "program": "OLDACDB1",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          },
          {
            "program": "OLDACDB1",
            "path_info": {
              "type": "orchestration",
              "weight": 3.1499999999999995,
              "via_program": "LGACVS01",
              "path": {
                "type": "direct",
                "weight": 3.0
              }
            }
          },
          {
            "program": "LGTESTC1",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          },
          {
            "program": "LGACVS01",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          },
          {
            "program": "LGUCDB01",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          },
          {
            "program": "LGUCVS01",
            "path_info": {
              "type": "direct",
              "weight": 3.0
            }
          },
          {
            "program": "LGUCUS01",
            "path_info": {
              "type": "indirect",
              "weight": 2.0999999999999996,
              "via_program": "LGUCDB01",
              "path": {
                "type": "direct",
                "weight": 3.0
              }
            }
          }
        ],
        "CustomerSecurity": [
          {
            "program": "LGACDB01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          },
          {
            "program": "OLDACDB1",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          }
        ],
        "CustomerFile": [
          {
            "program": "LGACDB01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          }
        ],
        "CustomerNumberSequence": [
          {
            "program": "LGTESTC1",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          }
        ],
        "CustomerNumberRange": [
          {
            "program": "LGICVS01",
            "path_info": {
              "type": "direct",
              "weight": 2.0
            }
          }
        ]
      },
      "business_domains": [
        {
          "domain_id": "party_reference",
          "domain_name": "Party Reference",
          "framework_appropriate": true,
          "confidence": 90,
          "reasoning": "This cluster strongly aligns with the Party Reference domain as it focuses on the management of customer reference data. The evidence includes: 1) The primary entities are 'Customer' and 'Customer Security' which are core party reference data; 2) The programs handle customer registration, information retrieval, and profile updates - all key aspects of party reference management; 3) The cluster maintains a centralized directory of customer information with standardized processes for updating this data; 4) The programs manage both core customer data and associated security information, which are essential components of party reference data; 5) There is a clear separation between the reference data management (customer profiles) and transactional operations, which is characteristic of the Party Reference domain. The cluster demonstrates multiple key indicators of the Party Reference domain, including the presence of a centralized directory for entities (customers), management of location and contact data for parties, and standardized processes for updating party reference data.",
          "programs": [
            "LGACDB01",
            "LGACDB02",
            "LGACUS01",
            "LGACVS01",
            "LGICDB01",
            "LGICUS01",
            "LGICVS01",
            "LGTESTC1",
            "LGUCDB01",
            "LGUCUS01",
            "LGUCVS01",
            "OLDACDB1",
            "OLDACDB2"
          ],
          "unclassified_reason": null,
          "other_business_framework": null,
          "other_business_framework_first_level": null,
          "other_business_framework_second_level": null,
          "other_business_framework_third_level": null,
          "domain_driven_design": [
            {
              "microservice_name": "Customer Registration Service",
              "programs": [
                "LGACDB01",
                "LGACUS01",
                "LGACVS01",
                "OLDACDB1"
              ]
            },
            {
              "microservice_name": "Customer Security Management Service",
              "programs": [
                "LGACDB02",
                "OLDACDB2"
              ]
            },
            {
              "microservice_name": "Customer Information Service",
              "programs": [
                "LGICDB01",
                "LGICUS01",
                "LGICVS01"
              ]
            },
            {
              "microservice_name": "Customer Profile Update Service",
              "programs": [
                "LGUCDB01",
                "LGUCUS01",
                "LGUCVS01"
              ]
            },
            {
              "microservice_name": "Customer Management Interface",
              "programs": [
                "LGTESTC1"
              ]
            }
          ],
          "vertical_slices": [
            {
              "vertical_slice_name": "Customer Registration",
              "programs": [
                "LGACDB01",
                "LGACDB02",
                "LGACUS01",
                "LGACVS01",
                "OLDACDB1",
                "OLDACDB2"
              ]
            },
            {
              "vertical_slice_name": "Customer Information Retrieval",
              "programs": [
                "LGICDB01",
                "LGICUS01",
                "LGICVS01"
              ]
            },
            {
              "vertical_slice_name": "Customer Profile Management",
              "programs": [
                "LGUCDB01",
                "LGUCUS01",
                "LGUCVS01",
                "LGTESTC1"
              ]
            }
          ],
          "service_domains": [
            {
              "domain_id": "party_reference_data_directory",
              "domain_name": "Party Reference Data Directory",
              "confidence": 90,
              "reasoning": "The programs in this group primarily manage customer records, which are a specific type of party record. They handle the creation, retrieval, and updating of customer information, which aligns with the core purpose of the Party Reference Data Directory service domain. The programs demonstrate a cohesive set of operations around customer data management, including registration, information retrieval, and profile updates. The data writing operations (create, update) on the Customer entity, which is a high-significance business entity, strongly indicate domain ownership.",
              "programs": [
                "LGACDB01",
                "LGACUS01",
                "LGACVS01",
                "LGICDB01",
                "LGICUS01",
                "LGICVS01",
                "LGTESTC1",
                "LGUCDB01",
                "LGUCUS01",
                "LGUCVS01",
                "OLDACDB1"
              ],
              "data_objects_evidence": "These programs directly manipulate the Customer entity, which is a high-significance data object within the Party Reference Data Directory domain. LGACDB01, LGACUS01, LGACVS01, LGTESTC1, LGUCDB01, LGUCVS01, and OLDACDB1 write to the Customer entity, while LGICDB01 and LGICVS01 read from it. The programs also manage CustomerNumberRange and CustomerNumberSequence, which are supporting entities for customer record management. LGICVS01 specifically generates customer numbers, which is a critical function for creating new party records.",
              "functional_matches": [
                "Maintain comprehensive party records",
                "Support data consistency across systems",
                "Create party record",
                "Update party information",
                "Retrieve party details"
              ],
              "boundary_analysis": "These programs focus on managing reference data for customers (a type of party) rather than handling transactional or dynamic data, which aligns with the classification boundaries of the Party Reference Data Directory. They do not extend into geographic analysis (which would place them in Location Data Management) or focus exclusively on legal entity compliance (which would place them in Legal Entity Directory). The programs handle the core reference data management functions that define this service domain."
            },
            {
              "domain_id": "party_security_management",
              "domain_name": "Party Security Management",
              "confidence": 85,
              "reasoning": "While not explicitly listed in the provided service domains, there is strong evidence for a separate security-focused service domain. LGACDB02 and OLDACDB2 specifically manage customer security records and password information, which is distinct from general party reference data management. These programs write to the Customer Security entity, which is stored in a separate CUSTOMER_SECURE database table. The separation of security data into a dedicated table and dedicated programs suggests a deliberate domain boundary for security management.",
              "programs": [
                "LGACDB02",
                "OLDACDB2"
              ],
              "data_objects_evidence": "These programs exclusively write to the Customer Security entity, which is stored in the CUSTOMER_SECURE database table. This is a high-significance data object related to security and authentication rather than general reference data. The programs do not interact with the main Customer entity directly, further supporting the domain separation.",
              "functional_matches": [
                "Create customer security records",
                "Store customer password/security information",
                "Manage security credentials"
              ],
              "boundary_analysis": "These programs focus exclusively on security aspects of party data, which is a specialized concern distinct from general reference data management. The data is stored in a separate table (CUSTOMER_SECURE) from the general customer data, indicating a clear system boundary. The programs handle sensitive security information that requires different access controls and management processes than general party reference data."
            }
          ]
        }
      ]
    },
    "2": {
      "cluster_id": 2,
      "cluster_type": "Utility",
      "programs": [
        "LGUPOL01"
      ],
      "boundary_context": {
        "external_calls": {},
        "external_called_by": {
          "LGUPOL01": [
            {
              "source": "LGTESTP3"
            },
            {
              "source": "LGTESTP1"
            },
            {
              "source": "LGTESTP2"
            }
          ]
        }
      },
      "primary_entities": [],
      "master_data_programs": [],
      "data_access_paths": {},
      "business_domains": [
        {
          "domain_id": "policy_administration",
          "domain_name": "Policy Administration",
          "framework_appropriate": false,
          "confidence": 60,
          "reasoning": "While LGUPOL01 deals with insurance policy updates which suggests insurance industry operations, the BIAN framework is primarily designed for banking services. The program's title and business goals indicate it's focused on updating insurance policy information in databases and validating policy update requests. This aligns more with insurance policy administration than banking services. The incoming interfaces from test programs (LGTESTP1, LGTESTP2, LGTESTP3) suggest this is a core system that receives update requests from various testing interfaces. However, since BIAN is banking-focused, this insurance-related functionality doesn't fit perfectly into any BIAN domain.",
          "programs": [
            "LGUPOL01"
          ],
          "unclassified_reason": null,
          "other_business_framework": "ACORD",
          "other_business_framework_first_level": "Insurance Process Framework",
          "other_business_framework_second_level": "Policy Administration",
          "other_business_framework_third_level": [
            {
              "id": "policy_servicing",
              "name": "Policy Servicing",
              "description": "Processes related to servicing existing insurance policies, including policy updates, endorsements, and maintenance activities",
              "fourth_level": [
                {
                  "id": "policy_update",
                  "name": "Policy Update Processing"
                }
              ]
            }
          ],
          "domain_driven_design": [
            {
              "microservice_name": "Policy Update Service",
              "programs": [
                "LGUPOL01"
              ]
            }
          ],
          "vertical_slices": [
            {
              "vertical_slice_name": "Policy Maintenance",
              "programs": [
                "LGUPOL01"
              ]
            }
          ],
          "service_domains": [
            {
              "domain_id": "policy_servicing",
              "domain_name": "Policy Servicing",
              "confidence": 90,
              "reasoning": "LGUPOL01 is titled 'Insurance Policy Update Processing System' with a stated business goal of updating insurance policy information in the database and validating policy update requests. These functions directly align with the core responsibilities of the Policy Servicing domain, specifically the 'Policy Update Processing' service operation. The program's primary purpose is to handle maintenance activities for existing policies, which is the central function of Policy Servicing.",
              "programs": [
                "LGUPOL01"
              ],
              "data_objects_evidence": "The program is designed to update insurance policy information in the database, indicating it has write access to policy data objects. While specific entities aren't listed in the provided information, the program's title and business goals clearly indicate it performs update operations on policy data, which is a core data object in the Policy Servicing domain.",
              "functional_matches": [
                "Policy Update Processing"
              ],
              "boundary_analysis": "The program focuses exclusively on policy update processing, which is firmly within the Policy Servicing domain boundaries. There's no evidence of the program crossing into other service domains. The program's functionality of updating existing policies and validating update requests aligns perfectly with Policy Servicing's core responsibility of maintaining existing policies."
            }
          ]
        }
      ]
    }
  },
  "business_domains": [
    {
      "domain_id": "policy_administration",
      "domain_name": "Policy Administration",
      "business_framework": "",
      "description": "",
      "service_domains": {
        "policy_management": {
          "domain_id": "policy_management",
          "domain_name": "Policy Management",
          "description": "",
          "programs": [
            {
              "name": "LGAPOL01",
              "business_domain": "Policy Administration",
              "service_domain": "Policy Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGAPDB01",
              "business_domain": "Policy Administration",
              "service_domain": "Policy Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGAPVS01",
              "business_domain": "Policy Administration",
              "service_domain": "Policy Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGDPOL01",
              "business_domain": "Policy Administration",
              "service_domain": "Policy Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGDPDB01",
              "business_domain": "Policy Administration",
              "service_domain": "Policy Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGDPVS01",
              "business_domain": "Policy Administration",
              "service_domain": "Policy Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGIPOL01",
              "business_domain": "Policy Administration",
              "service_domain": "Policy Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGIPDB01",
              "business_domain": "Policy Administration",
              "service_domain": "Policy Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGIPVS01",
              "business_domain": "Policy Administration",
              "service_domain": "Policy Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGUPDB01",
              "business_domain": "Policy Administration",
              "service_domain": "Policy Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGUPVS01",
              "business_domain": "Policy Administration",
              "service_domain": "Policy Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGAPBR01",
              "business_domain": "Policy Administration",
              "service_domain": "Policy Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            }
          ],
          "service_operations": {},
          "cohesion_metrics": null,
          "needs_review": false,
          "reasoning": [
            {
              "confidence": 0.95,
              "reasoning": "The programs in this service domain form a clear CRUD architecture for insurance policies. They handle the core lifecycle operations of policies including creation (LGAPOL01, LGAPDB01, LGAPVS01), retrieval (LGIPOL01, LGIPDB01, LGIPVS01), update (LGUPDB01, LGUPVS01), and deletion (LGDPOL01, LGDPDB01, LGDPVS01). These programs directly manipulate the Insurance Policy entity and its specialized types across multiple storage mechanisms (DB2 tables and KSDSPOLY file). The call hierarchy shows a layered architecture with UI interfaces (LGTESTPx) calling controller programs (LGXPOL01) which then call data access programs (LGXPDB01, LGXPVS01). LGAPBR01 specifically handles business rules processing for policy fund selection, which is a core Policy Management capability.",
              "classification_possible": true,
              "weight": 1.0,
              "other_classification_suggestion": null,
              "unclassified_reason": null,
              "needs_review": false,
              "cohesion_metrics": null,
              "programs": [
                "LGAPOL01",
                "LGAPDB01",
                "LGAPVS01",
                "LGDPOL01",
                "LGDPDB01",
                "LGDPVS01",
                "LGIPOL01",
                "LGIPDB01",
                "LGIPVS01",
                "LGUPDB01",
                "LGUPVS01",
                "LGAPBR01"
              ],
              "data_objects_evidence": "These programs have direct write access to the Insurance Policy entity and its specialized types (Endowment, House, Motor, Commercial). LGAPDB01, LGAPVS01, LGUPDB01, and LGUPVS01 create and update policy records, while LGDPDB01 and LGDPVS01 delete them. LGIPDB01 and LGIPVS01 read policy data. The programs operate on both the KSDSPOLY file and specialized DB2 tables for different policy types. The write operations on these core entities strongly indicate domain ownership.",
              "functional_matches": [
                "Policy Creation and Issuance",
                "Policy Maintenance and Updates",
                "Policy Inquiry and Information Retrieval",
                "Policy Termination and Deletion",
                "Business Rules Processing"
              ],
              "boundary_analysis": "These programs focus exclusively on policy data operations without crossing into product definition or claims processing. They handle the full lifecycle of policy records across all insurance types but don't define the product characteristics themselves. The integration with business rules (LGAPBR01 with IBM ODM) is specifically for policy-level decisions about fund selection, staying within policy management boundaries."
            }
          ]
        },
        "product_management": {
          "domain_id": "product_management",
          "domain_name": "Product Management",
          "description": "",
          "programs": [
            {
              "name": "LGTESTP1",
              "business_domain": "Policy Administration",
              "service_domain": "Product Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGTESTP2",
              "business_domain": "Policy Administration",
              "service_domain": "Product Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGTESTP3",
              "business_domain": "Policy Administration",
              "service_domain": "Product Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGTESTP4",
              "business_domain": "Policy Administration",
              "service_domain": "Product Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            }
          ],
          "service_operations": {},
          "cohesion_metrics": null,
          "needs_review": false,
          "reasoning": [
            {
              "confidence": 0.9,
              "reasoning": "The LGTESTP1-4 programs represent specialized interfaces for different insurance product types (Motor, Endowment, House, and Commercial). These programs implement product-specific business logic and user interfaces tailored to each insurance product's unique requirements. They serve as the entry points for product-specific operations, calling the more generic policy management services (LGDPOL01, LGIPOL01) to perform the actual data operations. The product-specific nature of these programs and their focus on different lines of business (Life/Endowment, Property, Motor, Commercial) aligns perfectly with the Product Management service domain.",
              "classification_possible": true,
              "weight": 1.0,
              "other_classification_suggestion": null,
              "unclassified_reason": null,
              "needs_review": false,
              "cohesion_metrics": null,
              "programs": [
                "LGTESTP1",
                "LGTESTP2",
                "LGTESTP3",
                "LGTESTP4"
              ],
              "data_objects_evidence": "Each program specializes in a specific insurance product type: LGTESTP1 for Motor policies, LGTESTP2 for Endowment policies, LGTESTP3 for House policies, and LGTESTP4 for Commercial policies. LGTESTP4 explicitly writes to CA-COMMERCIAL records. These programs don't directly manipulate the underlying data but instead call the Policy Management services to perform those operations, which is consistent with a Product Management layer that knows about product-specific requirements but delegates data persistence.",
              "functional_matches": [
                "Life and Endowment Insurance",
                "Property Insurance",
                "Motor Insurance",
                "Commercial Insurance"
              ],
              "boundary_analysis": "These programs maintain clear boundaries by focusing on product-specific interfaces and business logic while delegating actual policy data operations to the Policy Management service domain. They don't implement generic policy operations themselves but rather provide product-specific entry points that know how to interact with the underlying policy services. This separation of concerns respects the boundary between product-specific logic and generic policy operations."
            }
          ]
        },
        "policy_servicing": {
          "domain_id": "policy_servicing",
          "domain_name": "Policy Servicing",
          "description": "",
          "programs": [
            {
              "name": "LGUPOL01",
              "business_domain": "Policy Administration",
              "service_domain": "Policy Servicing",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            }
          ],
          "service_operations": {},
          "cohesion_metrics": null,
          "needs_review": false,
          "reasoning": [
            {
              "confidence": 0.9,
              "reasoning": "LGUPOL01 is titled 'Insurance Policy Update Processing System' with a stated business goal of updating insurance policy information in the database and validating policy update requests. These functions directly align with the core responsibilities of the Policy Servicing domain, specifically the 'Policy Update Processing' service operation. The program's primary purpose is to handle maintenance activities for existing policies, which is the central function of Policy Servicing.",
              "classification_possible": true,
              "weight": 1.0,
              "other_classification_suggestion": null,
              "unclassified_reason": null,
              "needs_review": false,
              "cohesion_metrics": null,
              "programs": [
                "LGUPOL01"
              ],
              "data_objects_evidence": "The program is designed to update insurance policy information in the database, indicating it has write access to policy data objects. While specific entities aren't listed in the provided information, the program's title and business goals clearly indicate it performs update operations on policy data, which is a core data object in the Policy Servicing domain.",
              "functional_matches": [
                "Policy Update Processing"
              ],
              "boundary_analysis": "The program focuses exclusively on policy update processing, which is firmly within the Policy Servicing domain boundaries. There's no evidence of the program crossing into other service domains. The program's functionality of updating existing policies and validating update requests aligns perfectly with Policy Servicing's core responsibility of maintaining existing policies."
            }
          ]
        }
      },
      "domain_driven_design": [
        {
          "microservice_name": "Policy Core Service",
          "programs": [
            "LGAPOL01",
            "LGDPOL01",
            "LGIPOL01"
          ]
        },
        {
          "microservice_name": "Policy Database Service",
          "programs": [
            "LGAPDB01",
            "LGDPDB01",
            "LGIPDB01",
            "LGUPDB01"
          ]
        },
        {
          "microservice_name": "Policy File Storage Service",
          "programs": [
            "LGAPVS01",
            "LGDPVS01",
            "LGIPVS01",
            "LGUPVS01"
          ]
        },
        {
          "microservice_name": "Business Rules Service",
          "programs": [
            "LGAPBR01"
          ]
        },
        {
          "microservice_name": "Policy UI Services",
          "programs": [
            "LGTESTP1",
            "LGTESTP2",
            "LGTESTP3",
            "LGTESTP4"
          ]
        }
      ],
      "vertical_slices": [
        {
          "vertical_slice_name": "Endowment Policy Management",
          "programs": [
            "LGTESTP2",
            "LGAPOL01",
            "LGDPOL01",
            "LGIPOL01",
            "LGAPDB01",
            "LGDPDB01",
            "LGIPDB01",
            "LGUPDB01",
            "LGAPVS01",
            "LGDPVS01",
            "LGIPVS01",
            "LGUPVS01",
            "LGAPBR01"
          ]
        },
        {
          "vertical_slice_name": "Motor Policy Management",
          "programs": [
            "LGTESTP1",
            "LGAPOL01",
            "LGDPOL01",
            "LGIPOL01",
            "LGAPDB01",
            "LGDPDB01",
            "LGIPDB01",
            "LGUPDB01",
            "LGAPVS01",
            "LGDPVS01",
            "LGIPVS01",
            "LGUPVS01"
          ]
        },
        {
          "vertical_slice_name": "House Policy Management",
          "programs": [
            "LGTESTP3",
            "LGAPOL01",
            "LGDPOL01",
            "LGIPOL01",
            "LGAPDB01",
            "LGDPDB01",
            "LGIPDB01",
            "LGUPDB01",
            "LGAPVS01",
            "LGDPVS01",
            "LGIPVS01",
            "LGUPVS01"
          ]
        },
        {
          "vertical_slice_name": "Commercial Policy Management",
          "programs": [
            "LGTESTP4",
            "LGAPOL01",
            "LGDPOL01",
            "LGIPOL01",
            "LGAPDB01",
            "LGDPDB01",
            "LGIPDB01",
            "LGUPDB01",
            "LGAPVS01",
            "LGDPVS01",
            "LGIPVS01",
            "LGUPVS01"
          ]
        }
      ],
      "programs": [
        {
          "name": "LGIPVS01",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGAPDB01",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGIPDB01",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGUPVS01",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGAPVS01",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGDPVS01",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGAPBR01",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGIPOL01",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGAPOL01",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGUPDB01",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGDPDB01",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGDPOL01",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGTESTP4",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGTESTP3",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGTESTP1",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGTESTP2",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGUPOL01",
          "business_domain": "Policy Administration",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        }
      ],
      "reasoning": [
        {
          "confidence": 0.005,
          "reasoning": [],
          "classification_possible": true,
          "weight": 1.0,
          "other_classification_suggestion": null,
          "unclassified_reason": null,
          "needs_review": false,
          "cohesion_metrics": null,
          "programs": [],
          "data_objects_evidence": "",
          "functional_matches": [],
          "boundary_analysis": ""
        },
        {
          "confidence": 0.6,
          "reasoning": "While LGUPOL01 deals with insurance policy updates which suggests insurance industry operations, the BIAN framework is primarily designed for banking services. The program's title and business goals indicate it's focused on updating insurance policy information in databases and validating policy update requests. This aligns more with insurance policy administration than banking services. The incoming interfaces from test programs (LGTESTP1, LGTESTP2, LGTESTP3) suggest this is a core system that receives update requests from various testing interfaces. However, since BIAN is banking-focused, this insurance-related functionality doesn't fit perfectly into any BIAN domain.",
          "classification_possible": true,
          "weight": 1.0,
          "other_classification_suggestion": null,
          "unclassified_reason": null,
          "needs_review": false,
          "cohesion_metrics": null,
          "programs": [
            "LGUPOL01"
          ],
          "data_objects_evidence": "",
          "functional_matches": [],
          "boundary_analysis": ""
        }
      ]
    },
    {
      "domain_id": "party_reference",
      "domain_name": "Party Reference",
      "business_framework": "",
      "description": "",
      "service_domains": {
        "party_reference_data_directory": {
          "domain_id": "party_reference_data_directory",
          "domain_name": "Party Reference Data Directory",
          "description": "",
          "programs": [
            {
              "name": "LGACDB01",
              "business_domain": "Party Reference",
              "service_domain": "Party Reference Data Directory",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGACUS01",
              "business_domain": "Party Reference",
              "service_domain": "Party Reference Data Directory",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGACVS01",
              "business_domain": "Party Reference",
              "service_domain": "Party Reference Data Directory",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGICDB01",
              "business_domain": "Party Reference",
              "service_domain": "Party Reference Data Directory",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGICUS01",
              "business_domain": "Party Reference",
              "service_domain": "Party Reference Data Directory",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGICVS01",
              "business_domain": "Party Reference",
              "service_domain": "Party Reference Data Directory",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGTESTC1",
              "business_domain": "Party Reference",
              "service_domain": "Party Reference Data Directory",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGUCDB01",
              "business_domain": "Party Reference",
              "service_domain": "Party Reference Data Directory",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGUCUS01",
              "business_domain": "Party Reference",
              "service_domain": "Party Reference Data Directory",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "LGUCVS01",
              "business_domain": "Party Reference",
              "service_domain": "Party Reference Data Directory",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "OLDACDB1",
              "business_domain": "Party Reference",
              "service_domain": "Party Reference Data Directory",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            }
          ],
          "service_operations": {},
          "cohesion_metrics": null,
          "needs_review": false,
          "reasoning": [
            {
              "confidence": 0.9,
              "reasoning": "The programs in this group primarily manage customer records, which are a specific type of party record. They handle the creation, retrieval, and updating of customer information, which aligns with the core purpose of the Party Reference Data Directory service domain. The programs demonstrate a cohesive set of operations around customer data management, including registration, information retrieval, and profile updates. The data writing operations (create, update) on the Customer entity, which is a high-significance business entity, strongly indicate domain ownership.",
              "classification_possible": true,
              "weight": 1.0,
              "other_classification_suggestion": null,
              "unclassified_reason": null,
              "needs_review": false,
              "cohesion_metrics": null,
              "programs": [
                "LGACDB01",
                "LGACUS01",
                "LGACVS01",
                "LGICDB01",
                "LGICUS01",
                "LGICVS01",
                "LGTESTC1",
                "LGUCDB01",
                "LGUCUS01",
                "LGUCVS01",
                "OLDACDB1"
              ],
              "data_objects_evidence": "These programs directly manipulate the Customer entity, which is a high-significance data object within the Party Reference Data Directory domain. LGACDB01, LGACUS01, LGACVS01, LGTESTC1, LGUCDB01, LGUCVS01, and OLDACDB1 write to the Customer entity, while LGICDB01 and LGICVS01 read from it. The programs also manage CustomerNumberRange and CustomerNumberSequence, which are supporting entities for customer record management. LGICVS01 specifically generates customer numbers, which is a critical function for creating new party records.",
              "functional_matches": [
                "Maintain comprehensive party records",
                "Support data consistency across systems",
                "Create party record",
                "Update party information",
                "Retrieve party details"
              ],
              "boundary_analysis": "These programs focus on managing reference data for customers (a type of party) rather than handling transactional or dynamic data, which aligns with the classification boundaries of the Party Reference Data Directory. They do not extend into geographic analysis (which would place them in Location Data Management) or focus exclusively on legal entity compliance (which would place them in Legal Entity Directory). The programs handle the core reference data management functions that define this service domain."
            }
          ]
        },
        "party_security_management": {
          "domain_id": "party_security_management",
          "domain_name": "Party Security Management",
          "description": "",
          "programs": [
            {
              "name": "LGACDB02",
              "business_domain": "Party Reference",
              "service_domain": "Party Security Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            },
            {
              "name": "OLDACDB2",
              "business_domain": "Party Reference",
              "service_domain": "Party Security Management",
              "classification_origin": "LLM Cluster Analysis",
              "percentage_in_domain": 1.0
            }
          ],
          "service_operations": {},
          "cohesion_metrics": null,
          "needs_review": false,
          "reasoning": [
            {
              "confidence": 0.85,
              "reasoning": "While not explicitly listed in the provided service domains, there is strong evidence for a separate security-focused service domain. LGACDB02 and OLDACDB2 specifically manage customer security records and password information, which is distinct from general party reference data management. These programs write to the Customer Security entity, which is stored in a separate CUSTOMER_SECURE database table. The separation of security data into a dedicated table and dedicated programs suggests a deliberate domain boundary for security management.",
              "classification_possible": true,
              "weight": 1.0,
              "other_classification_suggestion": null,
              "unclassified_reason": null,
              "needs_review": false,
              "cohesion_metrics": null,
              "programs": [
                "LGACDB02",
                "OLDACDB2"
              ],
              "data_objects_evidence": "These programs exclusively write to the Customer Security entity, which is stored in the CUSTOMER_SECURE database table. This is a high-significance data object related to security and authentication rather than general reference data. The programs do not interact with the main Customer entity directly, further supporting the domain separation.",
              "functional_matches": [
                "Create customer security records",
                "Store customer password/security information",
                "Manage security credentials"
              ],
              "boundary_analysis": "These programs focus exclusively on security aspects of party data, which is a specialized concern distinct from general reference data management. The data is stored in a separate table (CUSTOMER_SECURE) from the general customer data, indicating a clear system boundary. The programs handle sensitive security information that requires different access controls and management processes than general party reference data."
            }
          ]
        }
      },
      "domain_driven_design": [
        {
          "microservice_name": "Customer Registration Service",
          "programs": [
            "LGACDB01",
            "LGACUS01",
            "LGACVS01",
            "OLDACDB1"
          ]
        },
        {
          "microservice_name": "Customer Security Management Service",
          "programs": [
            "LGACDB02",
            "OLDACDB2"
          ]
        },
        {
          "microservice_name": "Customer Information Service",
          "programs": [
            "LGICDB01",
            "LGICUS01",
            "LGICVS01"
          ]
        },
        {
          "microservice_name": "Customer Profile Update Service",
          "programs": [
            "LGUCDB01",
            "LGUCUS01",
            "LGUCVS01"
          ]
        },
        {
          "microservice_name": "Customer Management Interface",
          "programs": [
            "LGTESTC1"
          ]
        }
      ],
      "vertical_slices": [
        {
          "vertical_slice_name": "Customer Registration",
          "programs": [
            "LGACDB01",
            "LGACDB02",
            "LGACUS01",
            "LGACVS01",
            "OLDACDB1",
            "OLDACDB2"
          ]
        },
        {
          "vertical_slice_name": "Customer Information Retrieval",
          "programs": [
            "LGICDB01",
            "LGICUS01",
            "LGICVS01"
          ]
        },
        {
          "vertical_slice_name": "Customer Profile Management",
          "programs": [
            "LGUCDB01",
            "LGUCUS01",
            "LGUCVS01",
            "LGTESTC1"
          ]
        }
      ],
      "programs": [
        {
          "name": "LGACDB01",
          "business_domain": "Party Reference",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGACDB02",
          "business_domain": "Party Reference",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGACUS01",
          "business_domain": "Party Reference",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGACVS01",
          "business_domain": "Party Reference",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGICDB01",
          "business_domain": "Party Reference",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGICUS01",
          "business_domain": "Party Reference",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGICVS01",
          "business_domain": "Party Reference",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGTESTC1",
          "business_domain": "Party Reference",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGUCDB01",
          "business_domain": "Party Reference",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGUCUS01",
          "business_domain": "Party Reference",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "LGUCVS01",
          "business_domain": "Party Reference",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "OLDACDB1",
          "business_domain": "Party Reference",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        },
        {
          "name": "OLDACDB2",
          "business_domain": "Party Reference",
          "service_domain": null,
          "classification_origin": "LLM Cluster Analysis",
          "percentage_in_domain": 1.0
        }
      ],
      "reasoning": [
        {
          "confidence": 0.005,
          "reasoning": [],
          "classification_possible": true,
          "weight": 1.0,
          "other_classification_suggestion": null,
          "unclassified_reason": null,
          "needs_review": false,
          "cohesion_metrics": null,
          "programs": [],
          "data_objects_evidence": "",
          "functional_matches": [],
          "boundary_analysis": ""
        }
      ]
    }
  ],
  "missing": {},
  "metadata": {
    "LGSTSQ": {
      "last_modified": 1742504120.6348002,
      "last_analyzed": 1743564090.93952,
      "hash": "d86158ee0214ff0e0d905def043fbc41"
    },
    "LGSETUP": {
      "last_modified": 1742504120.6171935,
      "last_analyzed": 1743564090.950453,
      "hash": "d7651a2e4b4d8e618e7ecd76864b36e0"
    },
    "LGIPVS01": {
      "last_modified": 1742504120.614859,
      "last_analyzed": 1743564090.95938,
      "hash": "c7544bd19891bd3c2214523d9eaf483d"
    },
    "LGASTAT1": {
      "last_modified": 1742504120.6183317,
      "last_analyzed": 1743564090.9687161,
      "hash": "c74f992a506786983344ae80a6dcc47f"
    },
    "LGICVS01": {
      "last_modified": 1742504120.6307647,
      "last_analyzed": 1743564090.978815,
      "hash": "8faabd43ac87f05081ffb9af0b312aa7"
    },
    "LGAPDB01": {
      "last_modified": 1742504120.618961,
      "last_analyzed": 1743565041.925211,
      "hash": "e8d13bae05ecfa357aaa4e6ff637065a"
    },
    "LGACDB02": {
      "last_modified": 1742504120.6295044,
      "last_analyzed": 1743565041.94568,
      "hash": "3e094db8248df80bdffc45e7f5138c13"
    },
    "LGIPDB01": {
      "last_modified": 1742504120.6267467,
      "last_analyzed": 1743565041.961985,
      "hash": "dcab9db879c136a4d17eb98676187dc5"
    },
    "LGUPVS01": {
      "last_modified": 1742504120.6259987,
      "last_analyzed": 1743565041.9789171,
      "hash": "fea0c6b176d723f3b2af03b808e63f31"
    },
    "LGUPOL01": {
      "last_modified": 1742504120.6207147,
      "last_analyzed": 1743565041.997319,
      "hash": "2a80c156a9b42f3ce61a0e5aeb0f4d5f"
    },
    "LGACVS01": {
      "last_modified": 1742504120.61422,
      "last_analyzed": 1743565042.01667,
      "hash": "a6562ef469b9093646a82dad5d7dcd8d"
    },
    "LGICDB01": {
      "last_modified": 1742504120.6195185,
      "last_analyzed": 1743565042.036845,
      "hash": "d25e04a17146de747a7d49c48c6d2ee1"
    },
    "LGAPVS01": {
      "last_modified": 1742504120.6338549,
      "last_analyzed": 1743565042.058592,
      "hash": "c087fb6714c04882efece34c609d9b95"
    },
    "LGWEBST5": {
      "last_modified": 1742504120.611878,
      "last_analyzed": 1743565042.081882,
      "hash": "57215a3046e6c3f0c27a41a38eff39cf"
    },
    "LGDPVS01": {
      "last_modified": 1742504120.612586,
      "last_analyzed": 1743565042.106286,
      "hash": "65d6ffa0826b3e2f1b6739a1d52919d2"
    },
    "LGUCVS01": {
      "last_modified": 1742504120.620154,
      "last_analyzed": 1743565042.130466,
      "hash": "a44a9cec2aa1609a27ef3ad71c584c55"
    },
    "LGAPBR01": {
      "last_modified": 1742504120.6248066,
      "last_analyzed": 1743565042.1558871,
      "hash": "999e0fbebc8af6e711d5265b4f3993b1"
    },
    "OLDACDB2": {
      "last_modified": 1742504120.6324599,
      "last_analyzed": 1743565042.1841002,
      "hash": "27b5a58188985f23cdeb89ad3427231c"
    },
    "LGIPOL01": {
      "last_modified": 1742504120.6315644,
      "last_analyzed": 1743565615.3164449,
      "hash": "2c7b7587c8eecffc732e23879efe1ac8"
    },
    "LGACDB01": {
      "last_modified": 1742504120.6289945,
      "last_analyzed": 1743565615.348084,
      "hash": "9b99f3cab69e603de50ac017f5c2e587"
    },
    "LGAPOL01": {
      "last_modified": 1742504120.6134849,
      "last_analyzed": 1743565615.3793101,
      "hash": "8496912158a3429b2e2abf32cbcd608e"
    },
    "LGUPDB01": {
      "last_modified": 1742504120.615634,
      "last_analyzed": 1743565615.412658,
      "hash": "edf0e95a18bcd1b313ffc39cfdce9879"
    },
    "LGUCDB01": {
      "last_modified": 1742504120.63012,
      "last_analyzed": 1743565615.448064,
      "hash": "1a5fc8f500519e3b4ab261e556ca3a58"
    },
    "LGICUS01": {
      "last_modified": 1742504120.6162646,
      "last_analyzed": 1743565615.4833899,
      "hash": "a053d1bd7f8037e48e2014e5a3b40a1e"
    },
    "OLDACDB1": {
      "last_modified": 1742504120.6363266,
      "last_analyzed": 1743565615.521025,
      "hash": "dfcc530a6e24750c7a34837067c21dbd"
    },
    "LGDPDB01": {
      "last_modified": 1742504120.6253924,
      "last_analyzed": 1743565615.5604491,
      "hash": "a0868706132e17fe9b71431bcde1354b"
    },
    "LGACUS01": {
      "last_modified": 1742504120.6331902,
      "last_analyzed": 1743565836.381527,
      "hash": "889ad62d08be55d4c00af8bbbd62daa3"
    },
    "LGDPOL01": {
      "last_modified": 1742504120.6228642,
      "last_analyzed": 1743565836.4265118,
      "hash": "2b6fa3ad0283acab350179143d3b2933"
    },
    "LGUCUS01": {
      "last_modified": 1742504120.6276755,
      "last_analyzed": 1743565836.468353,
      "hash": "d60a41646a7ceaa4d35a9515b09f133c"
    },
    "LGTESTP4": {
      "last_modified": 1742504120.6241677,
      "last_analyzed": 1743566384.276253,
      "hash": "edcbd5a0d06f96026ea78e99b5a4f598"
    },
    "LGTESTC1": {
      "last_modified": 1742504120.628418,
      "last_analyzed": 1743566384.327496,
      "hash": "d476da95530dfe76a3bc41a9d0edc760"
    },
    "LGTESTP3": {
      "last_modified": 1742504120.621905,
      "last_analyzed": 1743566384.371797,
      "hash": "abdb9f85c8fab6582ad5547431f4a247"
    },
    "LGTESTP1": {
      "last_modified": 1742504120.6235528,
      "last_analyzed": 1743566384.416966,
      "hash": "a86b6116082cc62dbb5653903355441a"
    },
    "LGTESTP2": {
      "last_modified": 1742504120.6213157,
      "last_analyzed": 1743566384.465143,
      "hash": "56b023eb346dc2587541467734cab9d3"
    }
  },
  "last_update": "2025-04-02T01:03:02.234961"
}